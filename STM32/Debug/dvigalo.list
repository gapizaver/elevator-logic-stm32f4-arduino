
dvigalo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009814  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800999c  0800999c  0001999c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099b8  080099b8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080099b8  080099b8  000199b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099c0  080099c0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099c0  080099c0  000199c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099c4  080099c4  000199c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080099c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  20000094  08009a5c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f8  08009a5c  000208f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f98e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040a9  00000000  00000000  0003fa52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  00043b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001550  00000000  00000000  000451b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000251c4  00000000  00000000  00046708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c602  00000000  00000000  0006b8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d36e7  00000000  00000000  00087ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015b5b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006268  00000000  00000000  0015b608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009984 	.word	0x08009984

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08009984 	.word	0x08009984

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// handlerji prekinitev časovnika
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim2)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	6078      	str	r0, [r7, #4]
	// handler za prekinitev časovnika vsakih 0.5s - komunikacija z arduinom
	HAL_StatusTypeDef ret;
	uint8_t buf[2];

	buf[0] = pos;
 80004c8:	4b1c      	ldr	r3, [pc, #112]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	733b      	strb	r3, [r7, #12]
	// pošlji trenutno nadstropje in zahtevaj vrednost gumbov od Arduina
	ret = HAL_I2C_Master_Transmit(&hi2c1, UNO_ADDR, buf, 1, HAL_MAX_DELAY);
 80004ce:	2328      	movs	r3, #40	; 0x28
 80004d0:	b299      	uxth	r1, r3
 80004d2:	f107 020c 	add.w	r2, r7, #12
 80004d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2301      	movs	r3, #1
 80004de:	4818      	ldr	r0, [pc, #96]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80004e0:	f003 fa46 	bl	8003970 <HAL_I2C_Master_Transmit>
 80004e4:	4603      	mov	r3, r0
 80004e6:	73fb      	strb	r3, [r7, #15]
	if (ret == HAL_OK) {
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d122      	bne.n	8000534 <HAL_TIM_PeriodElapsedCallback+0x74>
		ret = HAL_I2C_Master_Receive(&hi2c1, UNO_ADDR, buf, 2, HAL_MAX_DELAY);
 80004ee:	2328      	movs	r3, #40	; 0x28
 80004f0:	b299      	uxth	r1, r3
 80004f2:	f107 020c 	add.w	r2, r7, #12
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2302      	movs	r3, #2
 80004fe:	4810      	ldr	r0, [pc, #64]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000500:	f003 fb34 	bl	8003b6c <HAL_I2C_Master_Receive>
 8000504:	4603      	mov	r3, r0
 8000506:	73fb      	strb	r3, [r7, #15]
		if (ret == HAL_OK) {
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d112      	bne.n	8000534 <HAL_TIM_PeriodElapsedCallback+0x74>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800050e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000512:	480c      	ldr	r0, [pc, #48]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000514:	f001 fb69 	bl	8001bea <HAL_GPIO_TogglePin>
			floorsGoingUp |= buf[0];
 8000518:	7b3a      	ldrb	r2, [r7, #12]
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	4313      	orrs	r3, r2
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000524:	701a      	strb	r2, [r3, #0]
			floorsGoingDown |= buf[1];
 8000526:	7b7a      	ldrb	r2, [r7, #13]
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4313      	orrs	r3, r2
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000532:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200000b2 	.word	0x200000b2
 8000540:	200000cc 	.word	0x200000cc
 8000544:	40020c00 	.word	0x40020c00
 8000548:	200000b0 	.word	0x200000b0
 800054c:	200000b1 	.word	0x200000b1

08000550 <needToOpenDoors>:

// preveri če prišel zahtevek za odpiranje vrat
int needToOpenDoors() {
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	return openDoorsRequest || (direction == 1 && (floorsGoingUp & (1 << pos)))
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <needToOpenDoors+0x5c>)
 8000556:	681b      	ldr	r3, [r3, #0]
			|| (direction == -1 && (floorsGoingDown & (1 << pos)));
 8000558:	2b00      	cmp	r3, #0
 800055a:	d11e      	bne.n	800059a <needToOpenDoors+0x4a>
	return openDoorsRequest || (direction == 1 && (floorsGoingUp & (1 << pos)))
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <needToOpenDoors+0x60>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d10a      	bne.n	800057a <needToOpenDoors+0x2a>
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <needToOpenDoors+0x64>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	461a      	mov	r2, r3
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <needToOpenDoors+0x68>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	fa42 f303 	asr.w	r3, r2, r3
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	2b00      	cmp	r3, #0
 8000578:	d10f      	bne.n	800059a <needToOpenDoors+0x4a>
			|| (direction == -1 && (floorsGoingDown & (1 << pos)));
 800057a:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <needToOpenDoors+0x60>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000582:	d10c      	bne.n	800059e <needToOpenDoors+0x4e>
 8000584:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <needToOpenDoors+0x6c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	461a      	mov	r2, r3
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <needToOpenDoors+0x68>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	fa42 f303 	asr.w	r3, r2, r3
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <needToOpenDoors+0x4e>
 800059a:	2301      	movs	r3, #1
 800059c:	e000      	b.n	80005a0 <needToOpenDoors+0x50>
 800059e:	2300      	movs	r3, #0
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	200000b4 	.word	0x200000b4
 80005b0:	20000000 	.word	0x20000000
 80005b4:	200000b0 	.word	0x200000b0
 80005b8:	200000b2 	.word	0x200000b2
 80005bc:	200000b1 	.word	0x200000b1

080005c0 <needToCloseDoors>:

// preveri če prišel zahtevek za zapiranje vrat
int needToCloseDoors() {
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	return closeDoorsRequest;
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <needToCloseDoors+0x14>)
 80005c6:	681b      	ldr	r3, [r3, #0]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	200000b8 	.word	0x200000b8

080005d8 <getLowestSetBit>:

// vrni prvi prižgani bit (LSB->MSB)
int getLowestSetBit(uint8_t num, int min) {
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	6039      	str	r1, [r7, #0]
 80005e2:	71fb      	strb	r3, [r7, #7]
	if (num == 0) {
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d102      	bne.n	80005f0 <getLowestSetBit+0x18>
		return -1;
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ee:	e014      	b.n	800061a <getLowestSetBit+0x42>
	} else  {
		for(int i=min; i<255; i++) {
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	e00c      	b.n	8000610 <getLowestSetBit+0x38>
			if ((num >> i) & 1){
 80005f6:	79fa      	ldrb	r2, [r7, #7]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	fa42 f303 	asr.w	r3, r2, r3
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <getLowestSetBit+0x32>
				return i;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	e007      	b.n	800061a <getLowestSetBit+0x42>
		for(int i=min; i<255; i++) {
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	3301      	adds	r3, #1
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2bfe      	cmp	r3, #254	; 0xfe
 8000614:	ddef      	ble.n	80005f6 <getLowestSetBit+0x1e>
			}
		}
		return -1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 800061a:	4618      	mov	r0, r3
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <getHighestSetBit>:

// vrni zadnji prižgani bit (LSB->MSB)
int getHighestSetBit(uint8_t num, int max) {
 8000626:	b480      	push	{r7}
 8000628:	b085      	sub	sp, #20
 800062a:	af00      	add	r7, sp, #0
 800062c:	4603      	mov	r3, r0
 800062e:	6039      	str	r1, [r7, #0]
 8000630:	71fb      	strb	r3, [r7, #7]
	if (num == 0) {
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d102      	bne.n	800063e <getHighestSetBit+0x18>
		return -1;
 8000638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800063c:	e01b      	b.n	8000676 <getHighestSetBit+0x50>
	}

	int result = -1;
 800063e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000642:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<max; i++) {
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	e010      	b.n	800066c <getHighestSetBit+0x46>
		if ((num >> i) & 1){
 800064a:	79fa      	ldrb	r2, [r7, #7]
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	fa42 f303 	asr.w	r3, r2, r3
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	2b00      	cmp	r3, #0
 8000658:	d005      	beq.n	8000666 <getHighestSetBit+0x40>
			if (i > result) {
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	429a      	cmp	r2, r3
 8000660:	dd01      	ble.n	8000666 <getHighestSetBit+0x40>
				result = i;
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<max; i++) {
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	3301      	adds	r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68ba      	ldr	r2, [r7, #8]
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	429a      	cmp	r2, r3
 8000672:	dbea      	blt.n	800064a <getHighestSetBit+0x24>
			}
		}
	}

	return result;
 8000674:	68fb      	ldr	r3, [r7, #12]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <readButtons>:

// preberi gumbe
void readButtons() {
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
	// preberi stanja gumbov
	int floor0In = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 800068a:	2180      	movs	r1, #128	; 0x80
 800068c:	4845      	ldr	r0, [pc, #276]	; (80007a4 <readButtons+0x120>)
 800068e:	f001 fa7b 	bl	8001b88 <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	60fb      	str	r3, [r7, #12]
	int floor1In = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8);
 8000696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069a:	4842      	ldr	r0, [pc, #264]	; (80007a4 <readButtons+0x120>)
 800069c:	f001 fa74 	bl	8001b88 <HAL_GPIO_ReadPin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	60bb      	str	r3, [r7, #8]
	int floor2In = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9);
 80006a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a8:	483e      	ldr	r0, [pc, #248]	; (80007a4 <readButtons+0x120>)
 80006aa:	f001 fa6d 	bl	8001b88 <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	607b      	str	r3, [r7, #4]
	int floor3In = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10);
 80006b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b6:	483b      	ldr	r0, [pc, #236]	; (80007a4 <readButtons+0x120>)
 80006b8:	f001 fa66 	bl	8001b88 <HAL_GPIO_ReadPin>
 80006bc:	4603      	mov	r3, r0
 80006be:	603b      	str	r3, [r7, #0]
	openDoorsRequest  |= HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11);
 80006c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c4:	4837      	ldr	r0, [pc, #220]	; (80007a4 <readButtons+0x120>)
 80006c6:	f001 fa5f 	bl	8001b88 <HAL_GPIO_ReadPin>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b36      	ldr	r3, [pc, #216]	; (80007a8 <readButtons+0x124>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	4a34      	ldr	r2, [pc, #208]	; (80007a8 <readButtons+0x124>)
 80006d6:	6013      	str	r3, [r2, #0]
	closeDoorsRequest |= HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12);
 80006d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006dc:	4831      	ldr	r0, [pc, #196]	; (80007a4 <readButtons+0x120>)
 80006de:	f001 fa53 	bl	8001b88 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b31      	ldr	r3, [pc, #196]	; (80007ac <readButtons+0x128>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	4a2f      	ldr	r2, [pc, #188]	; (80007ac <readButtons+0x128>)
 80006ee:	6013      	str	r3, [r2, #0]

	// dodaj zahtevke za nadstropja
	floorsGoingUp 	|= floor0In;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	b25a      	sxtb	r2, r3
 80006f4:	4b2e      	ldr	r3, [pc, #184]	; (80007b0 <readButtons+0x12c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	4313      	orrs	r3, r2
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <readButtons+0x12c>)
 8000702:	701a      	strb	r2, [r3, #0]
	floorsGoingDown |= floor0In;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	b25a      	sxtb	r2, r3
 8000708:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <readButtons+0x130>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b25b      	sxtb	r3, r3
 800070e:	4313      	orrs	r3, r2
 8000710:	b25b      	sxtb	r3, r3
 8000712:	b2da      	uxtb	r2, r3
 8000714:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <readButtons+0x130>)
 8000716:	701a      	strb	r2, [r3, #0]
	floorsGoingUp 	|= (floor1In << 1);
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	b25a      	sxtb	r2, r3
 800071e:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <readButtons+0x12c>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b25b      	sxtb	r3, r3
 8000724:	4313      	orrs	r3, r2
 8000726:	b25b      	sxtb	r3, r3
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <readButtons+0x12c>)
 800072c:	701a      	strb	r2, [r3, #0]
	floorsGoingDown |= (floor1In << 1);
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	b25a      	sxtb	r2, r3
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <readButtons+0x130>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b25b      	sxtb	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	b25b      	sxtb	r3, r3
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <readButtons+0x130>)
 8000742:	701a      	strb	r2, [r3, #0]
	floorsGoingUp 	|= (floor2In << 2);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	b25a      	sxtb	r2, r3
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <readButtons+0x12c>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b25b      	sxtb	r3, r3
 8000750:	4313      	orrs	r3, r2
 8000752:	b25b      	sxtb	r3, r3
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <readButtons+0x12c>)
 8000758:	701a      	strb	r2, [r3, #0]
	floorsGoingDown |= (floor2In << 2);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	b25a      	sxtb	r2, r3
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <readButtons+0x130>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b25b      	sxtb	r3, r3
 8000766:	4313      	orrs	r3, r2
 8000768:	b25b      	sxtb	r3, r3
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <readButtons+0x130>)
 800076e:	701a      	strb	r2, [r3, #0]
	floorsGoingUp 	|= (floor3In << 3);
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	b25a      	sxtb	r2, r3
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <readButtons+0x12c>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	b25b      	sxtb	r3, r3
 800077c:	4313      	orrs	r3, r2
 800077e:	b25b      	sxtb	r3, r3
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <readButtons+0x12c>)
 8000784:	701a      	strb	r2, [r3, #0]
	floorsGoingDown |= (floor3In << 3);
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	b25a      	sxtb	r2, r3
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <readButtons+0x130>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b25b      	sxtb	r3, r3
 8000792:	4313      	orrs	r3, r2
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <readButtons+0x130>)
 800079a:	701a      	strb	r2, [r3, #0]
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	200000b4 	.word	0x200000b4
 80007ac:	200000b8 	.word	0x200000b8
 80007b0:	200000b0 	.word	0x200000b0
 80007b4:	200000b1 	.word	0x200000b1

080007b8 <openDoors>:

// odpri vrata dvigala
void openDoors() {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
	// pobriši zahtevke za to nadstropje
	floorsGoingUp &= ~(1 << pos);
 80007be:	4b27      	ldr	r3, [pc, #156]	; (800085c <openDoors+0xa4>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	2301      	movs	r3, #1
 80007c6:	4093      	lsls	r3, r2
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	43db      	mvns	r3, r3
 80007cc:	b25a      	sxtb	r2, r3
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <openDoors+0xa8>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b25b      	sxtb	r3, r3
 80007d4:	4013      	ands	r3, r2
 80007d6:	b25b      	sxtb	r3, r3
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <openDoors+0xa8>)
 80007dc:	701a      	strb	r2, [r3, #0]
	floorsGoingDown &= ~(1 << pos);
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <openDoors+0xa4>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	2301      	movs	r3, #1
 80007e6:	4093      	lsls	r3, r2
 80007e8:	b25b      	sxtb	r3, r3
 80007ea:	43db      	mvns	r3, r3
 80007ec:	b25a      	sxtb	r2, r3
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <openDoors+0xac>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b25b      	sxtb	r3, r3
 80007f4:	4013      	ands	r3, r2
 80007f6:	b25b      	sxtb	r3, r3
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <openDoors+0xac>)
 80007fc:	701a      	strb	r2, [r3, #0]
	// pobriši zahtevek za odprtje vrat
	openDoorsRequest = 0;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <openDoors+0xb0>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]

	// odpri vrata (prižgi zeleno LED)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080a:	4818      	ldr	r0, [pc, #96]	; (800086c <openDoors+0xb4>)
 800080c:	f001 f9d4 	bl	8001bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000816:	4815      	ldr	r0, [pc, #84]	; (800086c <openDoors+0xb4>)
 8000818:	f001 f9ce 	bl	8001bb8 <HAL_GPIO_WritePin>

	// počakaj 2.5s
	for (int i = 0; i < 250; i++) {
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	e011      	b.n	8000846 <openDoors+0x8e>
		// preveri gumbe (za morebitne nove zahtevke za vrata
		readButtons();
 8000822:	f7ff ff2f 	bl	8000684 <readButtons>

		// preveri če nov zahtevek
		if (needToOpenDoors() || needToCloseDoors()) {
 8000826:	f7ff fe93 	bl	8000550 <needToOpenDoors>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d111      	bne.n	8000854 <openDoors+0x9c>
 8000830:	f7ff fec6 	bl	80005c0 <needToCloseDoors>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d10c      	bne.n	8000854 <openDoors+0x9c>
			// začni znova
			return;
		}
		HAL_Delay(10);
 800083a:	200a      	movs	r0, #10
 800083c:	f000 fed2 	bl	80015e4 <HAL_Delay>
	for (int i = 0; i < 250; i++) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3301      	adds	r3, #1
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2bf9      	cmp	r3, #249	; 0xf9
 800084a:	ddea      	ble.n	8000822 <openDoors+0x6a>
	}

	// zapri vrata po 2.5s
	closeDoorsRequest = 1;
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <openDoors+0xb8>)
 800084e:	2201      	movs	r2, #1
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	e000      	b.n	8000856 <openDoors+0x9e>
			return;
 8000854:	bf00      	nop
}
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000b2 	.word	0x200000b2
 8000860:	200000b0 	.word	0x200000b0
 8000864:	200000b1 	.word	0x200000b1
 8000868:	200000b4 	.word	0x200000b4
 800086c:	40021000 	.word	0x40021000
 8000870:	200000b8 	.word	0x200000b8

08000874 <closeDoors>:

// zapri vrata dvigala
void closeDoors() {
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	// zapri vrata (prižgi rdečo LED)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087e:	4807      	ldr	r0, [pc, #28]	; (800089c <closeDoors+0x28>)
 8000880:	f001 f99a 	bl	8001bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <closeDoors+0x28>)
 800088c:	f001 f994 	bl	8001bb8 <HAL_GPIO_WritePin>

	// pobriši zahtevek za zaprtje vrat
	closeDoorsRequest = 0;
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <closeDoors+0x2c>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000
 80008a0:	200000b8 	.word	0x200000b8

080008a4 <printPos>:

// izpiši nadstropje na 7-seg zaslon
void printPos() {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	// 1. nadstropje
	if ( pos == 1) {
 80008a8:	4b4e      	ldr	r3, [pc, #312]	; (80009e4 <printPos+0x140>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d123      	bne.n	80008f8 <printPos+0x54>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2101      	movs	r1, #1
 80008b4:	484c      	ldr	r0, [pc, #304]	; (80009e8 <printPos+0x144>)
 80008b6:	f001 f97f 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2102      	movs	r1, #2
 80008be:	484a      	ldr	r0, [pc, #296]	; (80009e8 <printPos+0x144>)
 80008c0:	f001 f97a 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2120      	movs	r1, #32
 80008c8:	4848      	ldr	r0, [pc, #288]	; (80009ec <printPos+0x148>)
 80008ca:	f001 f975 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2108      	movs	r1, #8
 80008d2:	4845      	ldr	r0, [pc, #276]	; (80009e8 <printPos+0x144>)
 80008d4:	f001 f970 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	4842      	ldr	r0, [pc, #264]	; (80009e8 <printPos+0x144>)
 80008de:	f001 f96b 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	4840      	ldr	r0, [pc, #256]	; (80009e8 <printPos+0x144>)
 80008e8:	f001 f966 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2110      	movs	r1, #16
 80008f0:	483e      	ldr	r0, [pc, #248]	; (80009ec <printPos+0x148>)
 80008f2:	f001 f961 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 80008f6:	e072      	b.n	80009de <printPos+0x13a>
	else if (pos == 2) {
 80008f8:	4b3a      	ldr	r3, [pc, #232]	; (80009e4 <printPos+0x140>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d123      	bne.n	8000948 <printPos+0xa4>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000900:	2201      	movs	r2, #1
 8000902:	2101      	movs	r1, #1
 8000904:	4838      	ldr	r0, [pc, #224]	; (80009e8 <printPos+0x144>)
 8000906:	f001 f957 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2102      	movs	r1, #2
 800090e:	4836      	ldr	r0, [pc, #216]	; (80009e8 <printPos+0x144>)
 8000910:	f001 f952 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2120      	movs	r1, #32
 8000918:	4834      	ldr	r0, [pc, #208]	; (80009ec <printPos+0x148>)
 800091a:	f001 f94d 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 800091e:	2201      	movs	r2, #1
 8000920:	2108      	movs	r1, #8
 8000922:	4831      	ldr	r0, [pc, #196]	; (80009e8 <printPos+0x144>)
 8000924:	f001 f948 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2140      	movs	r1, #64	; 0x40
 800092c:	482e      	ldr	r0, [pc, #184]	; (80009e8 <printPos+0x144>)
 800092e:	f001 f943 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000932:	2201      	movs	r2, #1
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	482c      	ldr	r0, [pc, #176]	; (80009e8 <printPos+0x144>)
 8000938:	f001 f93e 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2110      	movs	r1, #16
 8000940:	482a      	ldr	r0, [pc, #168]	; (80009ec <printPos+0x148>)
 8000942:	f001 f939 	bl	8001bb8 <HAL_GPIO_WritePin>
}
 8000946:	e04a      	b.n	80009de <printPos+0x13a>
	else if (pos == 3)  {
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <printPos+0x140>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b03      	cmp	r3, #3
 800094e:	d123      	bne.n	8000998 <printPos+0xf4>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2101      	movs	r1, #1
 8000954:	4824      	ldr	r0, [pc, #144]	; (80009e8 <printPos+0x144>)
 8000956:	f001 f92f 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2102      	movs	r1, #2
 800095e:	4822      	ldr	r0, [pc, #136]	; (80009e8 <printPos+0x144>)
 8000960:	f001 f92a 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	2120      	movs	r1, #32
 8000968:	4820      	ldr	r0, [pc, #128]	; (80009ec <printPos+0x148>)
 800096a:	f001 f925 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	2108      	movs	r1, #8
 8000972:	481d      	ldr	r0, [pc, #116]	; (80009e8 <printPos+0x144>)
 8000974:	f001 f920 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	2140      	movs	r1, #64	; 0x40
 800097c:	481a      	ldr	r0, [pc, #104]	; (80009e8 <printPos+0x144>)
 800097e:	f001 f91b 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000982:	2201      	movs	r2, #1
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	4818      	ldr	r0, [pc, #96]	; (80009e8 <printPos+0x144>)
 8000988:	f001 f916 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2110      	movs	r1, #16
 8000990:	4816      	ldr	r0, [pc, #88]	; (80009ec <printPos+0x148>)
 8000992:	f001 f911 	bl	8001bb8 <HAL_GPIO_WritePin>
}
 8000996:	e022      	b.n	80009de <printPos+0x13a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2101      	movs	r1, #1
 800099c:	4812      	ldr	r0, [pc, #72]	; (80009e8 <printPos+0x144>)
 800099e:	f001 f90b 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	2102      	movs	r1, #2
 80009a6:	4810      	ldr	r0, [pc, #64]	; (80009e8 <printPos+0x144>)
 80009a8:	f001 f906 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2120      	movs	r1, #32
 80009b0:	480e      	ldr	r0, [pc, #56]	; (80009ec <printPos+0x148>)
 80009b2:	f001 f901 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2108      	movs	r1, #8
 80009ba:	480b      	ldr	r0, [pc, #44]	; (80009e8 <printPos+0x144>)
 80009bc:	f001 f8fc 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2140      	movs	r1, #64	; 0x40
 80009c4:	4808      	ldr	r0, [pc, #32]	; (80009e8 <printPos+0x144>)
 80009c6:	f001 f8f7 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <printPos+0x144>)
 80009d0:	f001 f8f2 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2110      	movs	r1, #16
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <printPos+0x148>)
 80009da:	f001 f8ed 	bl	8001bb8 <HAL_GPIO_WritePin>
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000b2 	.word	0x200000b2
 80009e8:	40020c00 	.word	0x40020c00
 80009ec:	40020400 	.word	0x40020400

080009f0 <moveElevator>:

// premakni dvigalo
void moveElevator() {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
	// zapri vrata
	closeDoors();
 80009f6:	f7ff ff3d 	bl	8000874 <closeDoors>

	// počakaj 1.5s
	for (int i = 0; i < 150; i++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	e007      	b.n	8000a10 <moveElevator+0x20>
		// med delayam preverjaj stanje gumbov
		readButtons();
 8000a00:	f7ff fe40 	bl	8000684 <readButtons>
		HAL_Delay(10);
 8000a04:	200a      	movs	r0, #10
 8000a06:	f000 fded 	bl	80015e4 <HAL_Delay>
	for (int i = 0; i < 150; i++) {
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b95      	cmp	r3, #149	; 0x95
 8000a14:	ddf4      	ble.n	8000a00 <moveElevator+0x10>
	}

	// premakni v pravo smer
	if (direction == 1) {
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <moveElevator+0x54>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d106      	bne.n	8000a2c <moveElevator+0x3c>
		pos++;
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <moveElevator+0x58>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <moveElevator+0x58>)
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	e005      	b.n	8000a38 <moveElevator+0x48>
	} else {
		pos--;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <moveElevator+0x58>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	3b01      	subs	r3, #1
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <moveElevator+0x58>)
 8000a36:	701a      	strb	r2, [r3, #0]
	}

	// izpiši nadstropje
	printPos();
 8000a38:	f7ff ff34 	bl	80008a4 <printPos>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000000 	.word	0x20000000
 8000a48:	200000b2 	.word	0x200000b2

08000a4c <playBuzzer>:

// predvajaj piskač za 0.2s
void playBuzzer() {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a56:	4807      	ldr	r0, [pc, #28]	; (8000a74 <playBuzzer+0x28>)
 8000a58:	f001 f8ae 	bl	8001bb8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000a5c:	20c8      	movs	r0, #200	; 0xc8
 8000a5e:	f000 fdc1 	bl	80015e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <playBuzzer+0x28>)
 8000a6a:	f001 f8a5 	bl	8001bb8 <HAL_GPIO_WritePin>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f000 fd40 	bl	8001500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f8c0 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f000 fa20 	bl	8000ec8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a88:	f000 f93e 	bl	8000d08 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000a8c:	f000 f96a 	bl	8000d64 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a90:	f000 f998 	bl	8000dc4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000a94:	f008 fb64 	bl	8009160 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000a98:	f000 f9ca 	bl	8000e30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //void SysTick_CallBack(void);
  // poženi časovnik komunikacije I2C
  HAL_TIM_Base_Start_IT(&htim2);
 8000a9c:	4854      	ldr	r0, [pc, #336]	; (8000bf0 <main+0x178>)
 8000a9e:	f005 f8d1 	bl	8005c44 <HAL_TIM_Base_Start_IT>

  // izpiši 0. nadstropje
  printPos();
 8000aa2:	f7ff feff 	bl	80008a4 <printPos>

  // zapri vrata dvigala
  closeDoors();
 8000aa6:	f7ff fee5 	bl	8000874 <closeDoors>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // preveri zahtevke za vrata
	  if (needToOpenDoors()){
 8000aaa:	f7ff fd51 	bl	8000550 <needToOpenDoors>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d002      	beq.n	8000aba <main+0x42>
		  openDoors();
 8000ab4:	f7ff fe80 	bl	80007b8 <openDoors>
		  continue;
 8000ab8:	e099      	b.n	8000bee <main+0x176>
	  } else if (needToCloseDoors()){
 8000aba:	f7ff fd81 	bl	80005c0 <needToCloseDoors>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d002      	beq.n	8000aca <main+0x52>
		  closeDoors();
 8000ac4:	f7ff fed6 	bl	8000874 <closeDoors>
		  continue;
 8000ac8:	e091      	b.n	8000bee <main+0x176>
	  }

	  // dvigalo gre gor
	  if (direction == 1) {
 8000aca:	4b4a      	ldr	r3, [pc, #296]	; (8000bf4 <main+0x17c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d13e      	bne.n	8000b50 <main+0xd8>
		  // zahteva za gor na poti
		  if (getLowestSetBit(floorsGoingUp, pos) >= 0) {
 8000ad2:	4b49      	ldr	r3, [pc, #292]	; (8000bf8 <main+0x180>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4a49      	ldr	r2, [pc, #292]	; (8000bfc <main+0x184>)
 8000ad8:	7812      	ldrb	r2, [r2, #0]
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fd7b 	bl	80005d8 <getLowestSetBit>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db11      	blt.n	8000b0c <main+0x94>
			  moveElevator();
 8000ae8:	f7ff ff82 	bl	80009f0 <moveElevator>
			  // če je zahteva od zunaj za gor, odpri vrata
			  if (floorsGoingUp & (1 << pos)) {
 8000aec:	4b42      	ldr	r3, [pc, #264]	; (8000bf8 <main+0x180>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b42      	ldr	r3, [pc, #264]	; (8000bfc <main+0x184>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	fa42 f303 	asr.w	r3, r2, r3
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d071      	beq.n	8000be6 <main+0x16e>
				  playBuzzer();
 8000b02:	f7ff ffa3 	bl	8000a4c <playBuzzer>
				  openDoors();
 8000b06:	f7ff fe57 	bl	80007b8 <openDoors>
 8000b0a:	e06c      	b.n	8000be6 <main+0x16e>
			  }
		  } else {
			  // nad dvigalom še zahteva za dol
			  if (getHighestSetBit(floorsGoingDown, 255) > pos) {
 8000b0c:	4b3c      	ldr	r3, [pc, #240]	; (8000c00 <main+0x188>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	21ff      	movs	r1, #255	; 0xff
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fd87 	bl	8000626 <getHighestSetBit>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	4a38      	ldr	r2, [pc, #224]	; (8000bfc <main+0x184>)
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	dd02      	ble.n	8000b28 <main+0xb0>
				  moveElevator();
 8000b22:	f7ff ff65 	bl	80009f0 <moveElevator>
 8000b26:	e05e      	b.n	8000be6 <main+0x16e>
			  } else {
				  // spremeni smer
				  direction = -1;
 8000b28:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <main+0x17c>)
 8000b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b2e:	601a      	str	r2, [r3, #0]
				  // če zahteva odpri vrata
				  if (floorsGoingDown & (1 << pos)){
 8000b30:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <main+0x188>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b31      	ldr	r3, [pc, #196]	; (8000bfc <main+0x184>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	fa42 f303 	asr.w	r3, r2, r3
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d04f      	beq.n	8000be6 <main+0x16e>
					  playBuzzer();
 8000b46:	f7ff ff81 	bl	8000a4c <playBuzzer>
				  	  openDoors();
 8000b4a:	f7ff fe35 	bl	80007b8 <openDoors>
 8000b4e:	e04a      	b.n	8000be6 <main+0x16e>
			  }
		  }
	  }

	  // dvigalo gre dol
	  else if (direction == -1) {
 8000b50:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <main+0x17c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b58:	d145      	bne.n	8000be6 <main+0x16e>
		  // zahteva za dol na poti
		  if (getHighestSetBit(floorsGoingDown, pos) >= 0) {
 8000b5a:	4b29      	ldr	r3, [pc, #164]	; (8000c00 <main+0x188>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	4a27      	ldr	r2, [pc, #156]	; (8000bfc <main+0x184>)
 8000b60:	7812      	ldrb	r2, [r2, #0]
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fd5e 	bl	8000626 <getHighestSetBit>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	db11      	blt.n	8000b94 <main+0x11c>
			  moveElevator();
 8000b70:	f7ff ff3e 	bl	80009f0 <moveElevator>
			  // če je zahteva od zunaj za dol, odpri vrata
			  if (floorsGoingDown & (1 << pos)) {
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <main+0x188>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <main+0x184>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	fa42 f303 	asr.w	r3, r2, r3
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d02d      	beq.n	8000be6 <main+0x16e>
				  playBuzzer();
 8000b8a:	f7ff ff5f 	bl	8000a4c <playBuzzer>
				  openDoors();
 8000b8e:	f7ff fe13 	bl	80007b8 <openDoors>
 8000b92:	e028      	b.n	8000be6 <main+0x16e>
			  }
		  } else {
			  // pod dvigalom še zahteva za gor
			  if (getLowestSetBit(floorsGoingUp, 0) >= 0 && getLowestSetBit(floorsGoingUp, 0) < pos) {
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <main+0x180>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fd1c 	bl	80005d8 <getLowestSetBit>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db0d      	blt.n	8000bc2 <main+0x14a>
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <main+0x180>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fd13 	bl	80005d8 <getLowestSetBit>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <main+0x184>)
 8000bb6:	7812      	ldrb	r2, [r2, #0]
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	da02      	bge.n	8000bc2 <main+0x14a>
				  moveElevator();
 8000bbc:	f7ff ff18 	bl	80009f0 <moveElevator>
 8000bc0:	e011      	b.n	8000be6 <main+0x16e>
			  } else {
				  // spremeni smer
				  direction = 1;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <main+0x17c>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	601a      	str	r2, [r3, #0]
				  // če zahteva odpri vrata
				  if (floorsGoingUp & (1 << pos)){
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <main+0x180>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <main+0x184>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	fa42 f303 	asr.w	r3, r2, r3
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <main+0x16e>
					  playBuzzer();
 8000bde:	f7ff ff35 	bl	8000a4c <playBuzzer>
				  	  openDoors();
 8000be2:	f7ff fde9 	bl	80007b8 <openDoors>
			  }
		  }
	  }

	  // preberi gumbe
	  readButtons();
 8000be6:	f7ff fd4d 	bl	8000684 <readButtons>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000bea:	f008 fadf 	bl	80091ac <MX_USB_HOST_Process>
	  if (needToOpenDoors()){
 8000bee:	e75c      	b.n	8000aaa <main+0x32>
 8000bf0:	20000178 	.word	0x20000178
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	200000b0 	.word	0x200000b0
 8000bfc:	200000b2 	.word	0x200000b2
 8000c00:	200000b1 	.word	0x200000b1

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b098      	sub	sp, #96	; 0x60
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c0e:	2230      	movs	r2, #48	; 0x30
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f008 fde6 	bl	80097e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <SystemClock_Config+0xfc>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a30      	ldr	r2, [pc, #192]	; (8000d00 <SystemClock_Config+0xfc>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <SystemClock_Config+0xfc>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <SystemClock_Config+0x100>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a2a      	ldr	r2, [pc, #168]	; (8000d04 <SystemClock_Config+0x100>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <SystemClock_Config+0x100>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c82:	2308      	movs	r3, #8
 8000c84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c86:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c8a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c90:	2307      	movs	r3, #7
 8000c92:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 f95b 	bl	8004f54 <HAL_RCC_OscConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000ca4:	f000 fa30 	bl	8001108 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca8:	230f      	movs	r3, #15
 8000caa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cac:	2302      	movs	r3, #2
 8000cae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	2105      	movs	r1, #5
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f004 fbbc 	bl	8005444 <HAL_RCC_ClockConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000cd2:	f000 fa19 	bl	8001108 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cda:	23c0      	movs	r3, #192	; 0xc0
 8000cdc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f004 fd94 	bl	8005814 <HAL_RCCEx_PeriphCLKConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000cf2:	f000 fa09 	bl	8001108 <Error_Handler>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3760      	adds	r7, #96	; 0x60
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40007000 	.word	0x40007000

08000d08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <MX_I2C1_Init+0x50>)
 8000d0e:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <MX_I2C1_Init+0x54>)
 8000d10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_I2C1_Init+0x50>)
 8000d14:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_I2C1_Init+0x58>)
 8000d16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_I2C1_Init+0x50>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_I2C1_Init+0x50>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_I2C1_Init+0x50>)
 8000d26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <MX_I2C1_Init+0x50>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_I2C1_Init+0x50>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <MX_I2C1_Init+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_I2C1_Init+0x50>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_I2C1_Init+0x50>)
 8000d46:	f002 fccf 	bl	80036e8 <HAL_I2C_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d50:	f000 f9da 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200000cc 	.word	0x200000cc
 8000d5c:	40005400 	.word	0x40005400
 8000d60:	000186a0 	.word	0x000186a0

08000d64 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_I2S3_Init+0x54>)
 8000d6a:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <MX_I2S3_Init+0x58>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_I2S3_Init+0x54>)
 8000d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d74:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_I2S3_Init+0x54>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_I2S3_Init+0x54>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <MX_I2S3_Init+0x54>)
 8000d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d88:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <MX_I2S3_Init+0x54>)
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <MX_I2S3_Init+0x5c>)
 8000d8e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_I2S3_Init+0x54>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <MX_I2S3_Init+0x54>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_I2S3_Init+0x54>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_I2S3_Init+0x54>)
 8000da4:	f003 fc36 	bl	8004614 <HAL_I2S_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000dae:	f000 f9ab 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200001c0 	.word	0x200001c0
 8000dbc:	40003c00 	.word	0x40003c00
 8000dc0:	00017700 	.word	0x00017700

08000dc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dc8:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000dca:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <MX_SPI1_Init+0x68>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000dd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000e10:	220a      	movs	r2, #10
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000e16:	f004 fe3d 	bl	8005a94 <HAL_SPI_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e20:	f000 f972 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000120 	.word	0x20000120
 8000e2c:	40013000 	.word	0x40013000

08000e30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 250;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e56:	22fa      	movs	r2, #250	; 0xfa
 8000e58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42000;
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e62:	f24a 4210 	movw	r2, #42000	; 0xa410
 8000e66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e74:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e76:	f004 fe96 	bl	8005ba6 <HAL_TIM_Base_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e80:	f000 f942 	bl	8001108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e92:	f005 f84f 	bl	8005f34 <HAL_TIM_ConfigClockSource>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e9c:	f000 f934 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000eae:	f005 fa67 	bl	8006380 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000eb8:	f000 f926 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000178 	.word	0x20000178

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	; 0x30
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
 8000ee2:	4b82      	ldr	r3, [pc, #520]	; (80010ec <MX_GPIO_Init+0x224>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a81      	ldr	r2, [pc, #516]	; (80010ec <MX_GPIO_Init+0x224>)
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b7f      	ldr	r3, [pc, #508]	; (80010ec <MX_GPIO_Init+0x224>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	4b7b      	ldr	r3, [pc, #492]	; (80010ec <MX_GPIO_Init+0x224>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a7a      	ldr	r2, [pc, #488]	; (80010ec <MX_GPIO_Init+0x224>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b78      	ldr	r3, [pc, #480]	; (80010ec <MX_GPIO_Init+0x224>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b74      	ldr	r3, [pc, #464]	; (80010ec <MX_GPIO_Init+0x224>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a73      	ldr	r2, [pc, #460]	; (80010ec <MX_GPIO_Init+0x224>)
 8000f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b71      	ldr	r3, [pc, #452]	; (80010ec <MX_GPIO_Init+0x224>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b6d      	ldr	r3, [pc, #436]	; (80010ec <MX_GPIO_Init+0x224>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a6c      	ldr	r2, [pc, #432]	; (80010ec <MX_GPIO_Init+0x224>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b6a      	ldr	r3, [pc, #424]	; (80010ec <MX_GPIO_Init+0x224>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b66      	ldr	r3, [pc, #408]	; (80010ec <MX_GPIO_Init+0x224>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a65      	ldr	r2, [pc, #404]	; (80010ec <MX_GPIO_Init+0x224>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b63      	ldr	r3, [pc, #396]	; (80010ec <MX_GPIO_Init+0x224>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b5f      	ldr	r3, [pc, #380]	; (80010ec <MX_GPIO_Init+0x224>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a5e      	ldr	r2, [pc, #376]	; (80010ec <MX_GPIO_Init+0x224>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b5c      	ldr	r3, [pc, #368]	; (80010ec <MX_GPIO_Init+0x224>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f24e 0108 	movw	r1, #57352	; 0xe008
 8000f8c:	4858      	ldr	r0, [pc, #352]	; (80010f0 <MX_GPIO_Init+0x228>)
 8000f8e:	f000 fe13 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2101      	movs	r1, #1
 8000f96:	4857      	ldr	r0, [pc, #348]	; (80010f4 <MX_GPIO_Init+0x22c>)
 8000f98:	f000 fe0e 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f24f 01db 	movw	r1, #61659	; 0xf0db
 8000fa2:	4855      	ldr	r0, [pc, #340]	; (80010f8 <MX_GPIO_Init+0x230>)
 8000fa4:	f000 fe08 	bl	8001bb8 <HAL_GPIO_WritePin>
                          |SEGG_Pin|GPIO_PIN_1|GPIO_PIN_3|Audio_RST_Pin
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2130      	movs	r1, #48	; 0x30
 8000fac:	4853      	ldr	r0, [pc, #332]	; (80010fc <MX_GPIO_Init+0x234>)
 8000fae:	f000 fe03 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fb2:	f24e 0308 	movw	r3, #57352	; 0xe008
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4849      	ldr	r0, [pc, #292]	; (80010f0 <MX_GPIO_Init+0x228>)
 8000fcc:	f000 fc40 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4843      	ldr	r0, [pc, #268]	; (80010f4 <MX_GPIO_Init+0x22c>)
 8000fe8:	f000 fc32 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000fec:	2308      	movs	r3, #8
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ffc:	2305      	movs	r3, #5
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	483b      	ldr	r0, [pc, #236]	; (80010f4 <MX_GPIO_Init+0x22c>)
 8001008:	f000 fc22 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800100c:	2301      	movs	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001010:	4b3b      	ldr	r3, [pc, #236]	; (8001100 <MX_GPIO_Init+0x238>)
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	4839      	ldr	r0, [pc, #228]	; (8001104 <MX_GPIO_Init+0x23c>)
 8001020:	f000 fc16 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001024:	2304      	movs	r3, #4
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	4831      	ldr	r0, [pc, #196]	; (80010fc <MX_GPIO_Init+0x234>)
 8001038:	f000 fc0a 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800103c:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
 8001040:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001046:	2302      	movs	r3, #2
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4827      	ldr	r0, [pc, #156]	; (80010f0 <MX_GPIO_Init+0x228>)
 8001052:	f000 fbfd 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001068:	2305      	movs	r3, #5
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4619      	mov	r1, r3
 8001072:	4822      	ldr	r0, [pc, #136]	; (80010fc <MX_GPIO_Init+0x234>)
 8001074:	f000 fbec 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           SEGG_Pin PD1 PD3 Audio_RST_Pin
                           PD6 PD7 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001078:	f24f 03db 	movw	r3, #61659	; 0xf0db
 800107c:	61fb      	str	r3, [r7, #28]
                          |SEGG_Pin|GPIO_PIN_1|GPIO_PIN_3|Audio_RST_Pin
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	4819      	ldr	r0, [pc, #100]	; (80010f8 <MX_GPIO_Init+0x230>)
 8001092:	f000 fbdd 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001096:	2320      	movs	r3, #32
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	4813      	ldr	r0, [pc, #76]	; (80010f8 <MX_GPIO_Init+0x230>)
 80010aa:	f000 fbd1 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010ae:	2330      	movs	r3, #48	; 0x30
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <MX_GPIO_Init+0x234>)
 80010c6:	f000 fbc3 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_GPIO_Init+0x238>)
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <MX_GPIO_Init+0x228>)
 80010de:	f000 fbb7 	bl	8001850 <HAL_GPIO_Init>

}
 80010e2:	bf00      	nop
 80010e4:	3730      	adds	r7, #48	; 0x30
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40020800 	.word	0x40020800
 80010f8:	40020c00 	.word	0x40020c00
 80010fc:	40020400 	.word	0x40020400
 8001100:	10120000 	.word	0x10120000
 8001104:	40020000 	.word	0x40020000

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	e7fe      	b.n	8001110 <Error_Handler+0x8>
	...

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_MspInit+0x4c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <HAL_MspInit+0x4c>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_MspInit+0x4c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_MspInit+0x4c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_MspInit+0x4c>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_MspInit+0x4c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001152:	2007      	movs	r0, #7
 8001154:	f000 fb3a 	bl	80017cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800

08001164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <HAL_I2C_MspInit+0x84>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d12c      	bne.n	80011e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_I2C_MspInit+0x88>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_I2C_MspInit+0x88>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_I2C_MspInit+0x88>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80011a2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a8:	2312      	movs	r3, #18
 80011aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011b4:	2304      	movs	r3, #4
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	480c      	ldr	r0, [pc, #48]	; (80011f0 <HAL_I2C_MspInit+0x8c>)
 80011c0:	f000 fb46 	bl	8001850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_I2C_MspInit+0x88>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_I2C_MspInit+0x88>)
 80011ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011d2:	6413      	str	r3, [r2, #64]	; 0x40
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_I2C_MspInit+0x88>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011e0:	bf00      	nop
 80011e2:	3728      	adds	r7, #40	; 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40005400 	.word	0x40005400
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020400 	.word	0x40020400

080011f4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a28      	ldr	r2, [pc, #160]	; (80012b4 <HAL_I2S_MspInit+0xc0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d14a      	bne.n	80012ac <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <HAL_I2S_MspInit+0xc4>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <HAL_I2S_MspInit+0xc4>)
 8001220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <HAL_I2S_MspInit+0xc4>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_I2S_MspInit+0xc4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a1f      	ldr	r2, [pc, #124]	; (80012b8 <HAL_I2S_MspInit+0xc4>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_I2S_MspInit+0xc4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_I2S_MspInit+0xc4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a18      	ldr	r2, [pc, #96]	; (80012b8 <HAL_I2S_MspInit+0xc4>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_I2S_MspInit+0xc4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800126a:	2310      	movs	r3, #16
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800127a:	2306      	movs	r3, #6
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <HAL_I2S_MspInit+0xc8>)
 8001286:	f000 fae3 	bl	8001850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800128a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800128e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800129c:	2306      	movs	r3, #6
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <HAL_I2S_MspInit+0xcc>)
 80012a8:	f000 fad2 	bl	8001850 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40003c00 	.word	0x40003c00
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020800 	.word	0x40020800

080012c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a19      	ldr	r2, [pc, #100]	; (8001348 <HAL_SPI_MspInit+0x84>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d12b      	bne.n	800133e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <HAL_SPI_MspInit+0x88>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a17      	ldr	r2, [pc, #92]	; (800134c <HAL_SPI_MspInit+0x88>)
 80012f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_SPI_MspInit+0x88>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_SPI_MspInit+0x88>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a10      	ldr	r2, [pc, #64]	; (800134c <HAL_SPI_MspInit+0x88>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_SPI_MspInit+0x88>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800131e:	23e0      	movs	r3, #224	; 0xe0
 8001320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800132e:	2305      	movs	r3, #5
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <HAL_SPI_MspInit+0x8c>)
 800133a:	f000 fa89 	bl	8001850 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40013000 	.word	0x40013000
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001364:	d115      	bne.n	8001392 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_TIM_Base_MspInit+0x48>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <HAL_TIM_Base_MspInit+0x48>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_TIM_Base_MspInit+0x48>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	201c      	movs	r0, #28
 8001388:	f000 fa2b 	bl	80017e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800138c:	201c      	movs	r0, #28
 800138e:	f000 fa44 	bl	800181a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <NMI_Handler+0x4>

080013a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ec:	f000 f8da 	bl	80015a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //SysTick_CallBack();
  /* USER CODE END SysTick_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <TIM2_IRQHandler+0x10>)
 80013fa:	f004 fc93 	bl	8005d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000178 	.word	0x20000178

08001408 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <OTG_FS_IRQHandler+0x10>)
 800140e:	f000 fe71 	bl	80020f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200005e4 	.word	0x200005e4

0800141c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <_sbrk+0x5c>)
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <_sbrk+0x60>)
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <_sbrk+0x64>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <_sbrk+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	429a      	cmp	r2, r3
 800144a:	d207      	bcs.n	800145c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800144c:	f008 f990 	bl	8009770 <__errno>
 8001450:	4603      	mov	r3, r0
 8001452:	220c      	movs	r2, #12
 8001454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800145a:	e009      	b.n	8001470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <_sbrk+0x64>)
 800146c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20020000 	.word	0x20020000
 800147c:	00000400 	.word	0x00000400
 8001480:	200000bc 	.word	0x200000bc
 8001484:	200008f8 	.word	0x200008f8

08001488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <SystemInit+0x20>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <SystemInit+0x20>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b0:	480d      	ldr	r0, [pc, #52]	; (80014e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014b2:	490e      	ldr	r1, [pc, #56]	; (80014ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014b4:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014c8:	4c0b      	ldr	r4, [pc, #44]	; (80014f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014d6:	f7ff ffd7 	bl	8001488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014da:	f008 f94f 	bl	800977c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014de:	f7ff facb 	bl	8000a78 <main>
  bx  lr    
 80014e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ec:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80014f0:	080099c8 	.word	0x080099c8
  ldr r2, =_sbss
 80014f4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80014f8:	200008f8 	.word	0x200008f8

080014fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC_IRQHandler>
	...

08001500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_Init+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <HAL_Init+0x40>)
 800150a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_Init+0x40>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_Init+0x40>)
 8001516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800151a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_Init+0x40>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <HAL_Init+0x40>)
 8001522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001528:	2003      	movs	r0, #3
 800152a:	f000 f94f 	bl	80017cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152e:	2000      	movs	r0, #0
 8001530:	f000 f808 	bl	8001544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001534:	f7ff fdee 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023c00 	.word	0x40023c00

08001544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_InitTick+0x54>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_InitTick+0x58>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155a:	fbb3 f3f1 	udiv	r3, r3, r1
 800155e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f967 	bl	8001836 <HAL_SYSTICK_Config>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e00e      	b.n	8001590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d80a      	bhi.n	800158e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001580:	f000 f92f 	bl	80017e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_InitTick+0x5c>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	e000      	b.n	8001590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000004 	.word	0x20000004
 800159c:	2000000c 	.word	0x2000000c
 80015a0:	20000008 	.word	0x20000008

080015a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_IncTick+0x20>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_IncTick+0x24>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <HAL_IncTick+0x24>)
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	2000000c 	.word	0x2000000c
 80015c8:	20000208 	.word	0x20000208

080015cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return uwTick;
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <HAL_GetTick+0x14>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000208 	.word	0x20000208

080015e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ec:	f7ff ffee 	bl	80015cc <HAL_GetTick>
 80015f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015fc:	d005      	beq.n	800160a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <HAL_Delay+0x44>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800160a:	bf00      	nop
 800160c:	f7ff ffde 	bl	80015cc <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	429a      	cmp	r2, r3
 800161a:	d8f7      	bhi.n	800160c <HAL_Delay+0x28>
  {
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000000c 	.word	0x2000000c

0800162c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001648:	4013      	ands	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165e:	4a04      	ldr	r2, [pc, #16]	; (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	60d3      	str	r3, [r2, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <__NVIC_GetPriorityGrouping+0x18>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	f003 0307 	and.w	r3, r3, #7
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db0b      	blt.n	80016ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	f003 021f 	and.w	r2, r3, #31
 80016a8:	4907      	ldr	r1, [pc, #28]	; (80016c8 <__NVIC_EnableIRQ+0x38>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	2001      	movs	r0, #1
 80016b2:	fa00 f202 	lsl.w	r2, r0, r2
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e100 	.word	0xe000e100

080016cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db0a      	blt.n	80016f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	490c      	ldr	r1, [pc, #48]	; (8001718 <__NVIC_SetPriority+0x4c>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	0112      	lsls	r2, r2, #4
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	440b      	add	r3, r1
 80016f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f4:	e00a      	b.n	800170c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4908      	ldr	r1, [pc, #32]	; (800171c <__NVIC_SetPriority+0x50>)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	3b04      	subs	r3, #4
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	440b      	add	r3, r1
 800170a:	761a      	strb	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000e100 	.word	0xe000e100
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f1c3 0307 	rsb	r3, r3, #7
 800173a:	2b04      	cmp	r3, #4
 800173c:	bf28      	it	cs
 800173e:	2304      	movcs	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3304      	adds	r3, #4
 8001746:	2b06      	cmp	r3, #6
 8001748:	d902      	bls.n	8001750 <NVIC_EncodePriority+0x30>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3b03      	subs	r3, #3
 800174e:	e000      	b.n	8001752 <NVIC_EncodePriority+0x32>
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	401a      	ands	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001768:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43d9      	mvns	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	4313      	orrs	r3, r2
         );
}
 800177a:	4618      	mov	r0, r3
 800177c:	3724      	adds	r7, #36	; 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001798:	d301      	bcc.n	800179e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179a:	2301      	movs	r3, #1
 800179c:	e00f      	b.n	80017be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <SysTick_Config+0x40>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a6:	210f      	movs	r1, #15
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017ac:	f7ff ff8e 	bl	80016cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <SysTick_Config+0x40>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <SysTick_Config+0x40>)
 80017b8:	2207      	movs	r2, #7
 80017ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	e000e010 	.word	0xe000e010

080017cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff29 	bl	800162c <__NVIC_SetPriorityGrouping>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f4:	f7ff ff3e 	bl	8001674 <__NVIC_GetPriorityGrouping>
 80017f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	6978      	ldr	r0, [r7, #20]
 8001800:	f7ff ff8e 	bl	8001720 <NVIC_EncodePriority>
 8001804:	4602      	mov	r2, r0
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff5d 	bl	80016cc <__NVIC_SetPriority>
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff31 	bl	8001690 <__NVIC_EnableIRQ>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ffa2 	bl	8001788 <SysTick_Config>
 8001844:	4603      	mov	r3, r0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	e16b      	b.n	8001b44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800186c:	2201      	movs	r2, #1
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	429a      	cmp	r2, r3
 8001886:	f040 815a 	bne.w	8001b3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d005      	beq.n	80018a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d130      	bne.n	8001904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	2203      	movs	r2, #3
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d8:	2201      	movs	r2, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 0201 	and.w	r2, r3, #1
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	2b03      	cmp	r3, #3
 800190e:	d017      	beq.n	8001940 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	2203      	movs	r2, #3
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d123      	bne.n	8001994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	08da      	lsrs	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3208      	adds	r2, #8
 8001954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	220f      	movs	r2, #15
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	08da      	lsrs	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3208      	adds	r2, #8
 800198e:	69b9      	ldr	r1, [r7, #24]
 8001990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0203 	and.w	r2, r3, #3
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 80b4 	beq.w	8001b3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b60      	ldr	r3, [pc, #384]	; (8001b5c <HAL_GPIO_Init+0x30c>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a5f      	ldr	r2, [pc, #380]	; (8001b5c <HAL_GPIO_Init+0x30c>)
 80019e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b5d      	ldr	r3, [pc, #372]	; (8001b5c <HAL_GPIO_Init+0x30c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019f2:	4a5b      	ldr	r2, [pc, #364]	; (8001b60 <HAL_GPIO_Init+0x310>)
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	220f      	movs	r2, #15
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a52      	ldr	r2, [pc, #328]	; (8001b64 <HAL_GPIO_Init+0x314>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d02b      	beq.n	8001a76 <HAL_GPIO_Init+0x226>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a51      	ldr	r2, [pc, #324]	; (8001b68 <HAL_GPIO_Init+0x318>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d025      	beq.n	8001a72 <HAL_GPIO_Init+0x222>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a50      	ldr	r2, [pc, #320]	; (8001b6c <HAL_GPIO_Init+0x31c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d01f      	beq.n	8001a6e <HAL_GPIO_Init+0x21e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4f      	ldr	r2, [pc, #316]	; (8001b70 <HAL_GPIO_Init+0x320>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d019      	beq.n	8001a6a <HAL_GPIO_Init+0x21a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4e      	ldr	r2, [pc, #312]	; (8001b74 <HAL_GPIO_Init+0x324>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <HAL_GPIO_Init+0x216>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4d      	ldr	r2, [pc, #308]	; (8001b78 <HAL_GPIO_Init+0x328>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00d      	beq.n	8001a62 <HAL_GPIO_Init+0x212>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4c      	ldr	r2, [pc, #304]	; (8001b7c <HAL_GPIO_Init+0x32c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d007      	beq.n	8001a5e <HAL_GPIO_Init+0x20e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4b      	ldr	r2, [pc, #300]	; (8001b80 <HAL_GPIO_Init+0x330>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d101      	bne.n	8001a5a <HAL_GPIO_Init+0x20a>
 8001a56:	2307      	movs	r3, #7
 8001a58:	e00e      	b.n	8001a78 <HAL_GPIO_Init+0x228>
 8001a5a:	2308      	movs	r3, #8
 8001a5c:	e00c      	b.n	8001a78 <HAL_GPIO_Init+0x228>
 8001a5e:	2306      	movs	r3, #6
 8001a60:	e00a      	b.n	8001a78 <HAL_GPIO_Init+0x228>
 8001a62:	2305      	movs	r3, #5
 8001a64:	e008      	b.n	8001a78 <HAL_GPIO_Init+0x228>
 8001a66:	2304      	movs	r3, #4
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x228>
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e004      	b.n	8001a78 <HAL_GPIO_Init+0x228>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e002      	b.n	8001a78 <HAL_GPIO_Init+0x228>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_GPIO_Init+0x228>
 8001a76:	2300      	movs	r3, #0
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	f002 0203 	and.w	r2, r2, #3
 8001a7e:	0092      	lsls	r2, r2, #2
 8001a80:	4093      	lsls	r3, r2
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a88:	4935      	ldr	r1, [pc, #212]	; (8001b60 <HAL_GPIO_Init+0x310>)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a96:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <HAL_GPIO_Init+0x334>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aba:	4a32      	ldr	r2, [pc, #200]	; (8001b84 <HAL_GPIO_Init+0x334>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ac0:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <HAL_GPIO_Init+0x334>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ae4:	4a27      	ldr	r2, [pc, #156]	; (8001b84 <HAL_GPIO_Init+0x334>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aea:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <HAL_GPIO_Init+0x334>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b0e:	4a1d      	ldr	r2, [pc, #116]	; (8001b84 <HAL_GPIO_Init+0x334>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_GPIO_Init+0x334>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b38:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <HAL_GPIO_Init+0x334>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3301      	adds	r3, #1
 8001b42:	61fb      	str	r3, [r7, #28]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	2b0f      	cmp	r3, #15
 8001b48:	f67f ae90 	bls.w	800186c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3724      	adds	r7, #36	; 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40013800 	.word	0x40013800
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40021400 	.word	0x40021400
 8001b7c:	40021800 	.word	0x40021800
 8001b80:	40021c00 	.word	0x40021c00
 8001b84:	40013c00 	.word	0x40013c00

08001b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e001      	b.n	8001baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc8:	787b      	ldrb	r3, [r7, #1]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bce:	887a      	ldrh	r2, [r7, #2]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bd4:	e003      	b.n	8001bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bd6:	887b      	ldrh	r3, [r7, #2]
 8001bd8:	041a      	lsls	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	619a      	str	r2, [r3, #24]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b085      	sub	sp, #20
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bfc:	887a      	ldrh	r2, [r7, #2]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4013      	ands	r3, r2
 8001c02:	041a      	lsls	r2, r3, #16
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	400b      	ands	r3, r1
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	619a      	str	r2, [r3, #24]
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c20:	b08f      	sub	sp, #60	; 0x3c
 8001c22:	af0a      	add	r7, sp, #40	; 0x28
 8001c24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e054      	b.n	8001cda <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f007 fae6 	bl	800921c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2203      	movs	r2, #3
 8001c54:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d102      	bne.n	8001c6a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 fc88 	bl	8006584 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	687e      	ldr	r6, [r7, #4]
 8001c7c:	466d      	mov	r5, sp
 8001c7e:	f106 0410 	add.w	r4, r6, #16
 8001c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c92:	1d33      	adds	r3, r6, #4
 8001c94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c96:	6838      	ldr	r0, [r7, #0]
 8001c98:	f004 fc02 	bl	80064a0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 fc7f 	bl	80065a6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	687e      	ldr	r6, [r7, #4]
 8001cb0:	466d      	mov	r5, sp
 8001cb2:	f106 0410 	add.w	r4, r6, #16
 8001cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cc6:	1d33      	adds	r3, r6, #4
 8001cc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cca:	6838      	ldr	r0, [r7, #0]
 8001ccc:	f004 fd92 	bl	80067f4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ce2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ce2:	b590      	push	{r4, r7, lr}
 8001ce4:	b089      	sub	sp, #36	; 0x24
 8001ce6:	af04      	add	r7, sp, #16
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	4608      	mov	r0, r1
 8001cec:	4611      	mov	r1, r2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	70fb      	strb	r3, [r7, #3]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70bb      	strb	r3, [r7, #2]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_HCD_HC_Init+0x28>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e076      	b.n	8001df8 <HAL_HCD_HC_Init+0x116>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	212c      	movs	r1, #44	; 0x2c
 8001d18:	fb01 f303 	mul.w	r3, r1, r3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	333d      	adds	r3, #61	; 0x3d
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	212c      	movs	r1, #44	; 0x2c
 8001d2a:	fb01 f303 	mul.w	r3, r1, r3
 8001d2e:	4413      	add	r3, r2
 8001d30:	3338      	adds	r3, #56	; 0x38
 8001d32:	787a      	ldrb	r2, [r7, #1]
 8001d34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	3340      	adds	r3, #64	; 0x40
 8001d44:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d46:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	212c      	movs	r1, #44	; 0x2c
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	3339      	adds	r3, #57	; 0x39
 8001d56:	78fa      	ldrb	r2, [r7, #3]
 8001d58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	212c      	movs	r1, #44	; 0x2c
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	333f      	adds	r3, #63	; 0x3f
 8001d68:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	78ba      	ldrb	r2, [r7, #2]
 8001d72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d76:	b2d0      	uxtb	r0, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	212c      	movs	r1, #44	; 0x2c
 8001d7c:	fb01 f303 	mul.w	r3, r1, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	333a      	adds	r3, #58	; 0x3a
 8001d84:	4602      	mov	r2, r0
 8001d86:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001d88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	da09      	bge.n	8001da4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	212c      	movs	r1, #44	; 0x2c
 8001d96:	fb01 f303 	mul.w	r3, r1, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	333b      	adds	r3, #59	; 0x3b
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	e008      	b.n	8001db6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	212c      	movs	r1, #44	; 0x2c
 8001daa:	fb01 f303 	mul.w	r3, r1, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	333b      	adds	r3, #59	; 0x3b
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	212c      	movs	r1, #44	; 0x2c
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	333c      	adds	r3, #60	; 0x3c
 8001dc4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dc8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	787c      	ldrb	r4, [r7, #1]
 8001dd0:	78ba      	ldrb	r2, [r7, #2]
 8001dd2:	78f9      	ldrb	r1, [r7, #3]
 8001dd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ddc:	9301      	str	r3, [sp, #4]
 8001dde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	4623      	mov	r3, r4
 8001de6:	f004 fe87 	bl	8006af8 <USB_HC_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd90      	pop	{r4, r7, pc}

08001e00 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_HCD_HC_Halt+0x1e>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e00f      	b.n	8001e3e <HAL_HCD_HC_Halt+0x3e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f005 f8c3 	bl	8006fba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	4608      	mov	r0, r1
 8001e52:	4611      	mov	r1, r2
 8001e54:	461a      	mov	r2, r3
 8001e56:	4603      	mov	r3, r0
 8001e58:	70fb      	strb	r3, [r7, #3]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	70bb      	strb	r3, [r7, #2]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	212c      	movs	r1, #44	; 0x2c
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	333b      	adds	r3, #59	; 0x3b
 8001e70:	78ba      	ldrb	r2, [r7, #2]
 8001e72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	212c      	movs	r1, #44	; 0x2c
 8001e7a:	fb01 f303 	mul.w	r3, r1, r3
 8001e7e:	4413      	add	r3, r2
 8001e80:	333f      	adds	r3, #63	; 0x3f
 8001e82:	787a      	ldrb	r2, [r7, #1]
 8001e84:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001e86:	7c3b      	ldrb	r3, [r7, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d112      	bne.n	8001eb2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	212c      	movs	r1, #44	; 0x2c
 8001e92:	fb01 f303 	mul.w	r3, r1, r3
 8001e96:	4413      	add	r3, r2
 8001e98:	3342      	adds	r3, #66	; 0x42
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	212c      	movs	r1, #44	; 0x2c
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	333d      	adds	r3, #61	; 0x3d
 8001eac:	7f3a      	ldrb	r2, [r7, #28]
 8001eae:	701a      	strb	r2, [r3, #0]
 8001eb0:	e008      	b.n	8001ec4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	212c      	movs	r1, #44	; 0x2c
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3342      	adds	r3, #66	; 0x42
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ec4:	787b      	ldrb	r3, [r7, #1]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	f200 80c6 	bhi.w	8002058 <HAL_HCD_HC_SubmitRequest+0x210>
 8001ecc:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed2:	bf00      	nop
 8001ed4:	08001ee5 	.word	0x08001ee5
 8001ed8:	08002045 	.word	0x08002045
 8001edc:	08001f49 	.word	0x08001f49
 8001ee0:	08001fc7 	.word	0x08001fc7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ee4:	7c3b      	ldrb	r3, [r7, #16]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	f040 80b8 	bne.w	800205c <HAL_HCD_HC_SubmitRequest+0x214>
 8001eec:	78bb      	ldrb	r3, [r7, #2]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f040 80b4 	bne.w	800205c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001ef4:	8b3b      	ldrh	r3, [r7, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d108      	bne.n	8001f0c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	3355      	adds	r3, #85	; 0x55
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	212c      	movs	r1, #44	; 0x2c
 8001f12:	fb01 f303 	mul.w	r3, r1, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	3355      	adds	r3, #85	; 0x55
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	212c      	movs	r1, #44	; 0x2c
 8001f26:	fb01 f303 	mul.w	r3, r1, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3342      	adds	r3, #66	; 0x42
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f32:	e093      	b.n	800205c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	212c      	movs	r1, #44	; 0x2c
 8001f3a:	fb01 f303 	mul.w	r3, r1, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	3342      	adds	r3, #66	; 0x42
 8001f42:	2202      	movs	r2, #2
 8001f44:	701a      	strb	r2, [r3, #0]
      break;
 8001f46:	e089      	b.n	800205c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f48:	78bb      	ldrb	r3, [r7, #2]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d11d      	bne.n	8001f8a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	212c      	movs	r1, #44	; 0x2c
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	3355      	adds	r3, #85	; 0x55
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d109      	bne.n	8001f76 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	212c      	movs	r1, #44	; 0x2c
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3342      	adds	r3, #66	; 0x42
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001f74:	e073      	b.n	800205e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	212c      	movs	r1, #44	; 0x2c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	3342      	adds	r3, #66	; 0x42
 8001f84:	2202      	movs	r2, #2
 8001f86:	701a      	strb	r2, [r3, #0]
      break;
 8001f88:	e069      	b.n	800205e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	212c      	movs	r1, #44	; 0x2c
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	3354      	adds	r3, #84	; 0x54
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	212c      	movs	r1, #44	; 0x2c
 8001fa4:	fb01 f303 	mul.w	r3, r1, r3
 8001fa8:	4413      	add	r3, r2
 8001faa:	3342      	adds	r3, #66	; 0x42
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
      break;
 8001fb0:	e055      	b.n	800205e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	212c      	movs	r1, #44	; 0x2c
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3342      	adds	r3, #66	; 0x42
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	701a      	strb	r2, [r3, #0]
      break;
 8001fc4:	e04b      	b.n	800205e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001fc6:	78bb      	ldrb	r3, [r7, #2]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d11d      	bne.n	8002008 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	212c      	movs	r1, #44	; 0x2c
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3355      	adds	r3, #85	; 0x55
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d109      	bne.n	8001ff4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	212c      	movs	r1, #44	; 0x2c
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	3342      	adds	r3, #66	; 0x42
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ff2:	e034      	b.n	800205e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	212c      	movs	r1, #44	; 0x2c
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	3342      	adds	r3, #66	; 0x42
 8002002:	2202      	movs	r2, #2
 8002004:	701a      	strb	r2, [r3, #0]
      break;
 8002006:	e02a      	b.n	800205e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	212c      	movs	r1, #44	; 0x2c
 800200e:	fb01 f303 	mul.w	r3, r1, r3
 8002012:	4413      	add	r3, r2
 8002014:	3354      	adds	r3, #84	; 0x54
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d109      	bne.n	8002030 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	212c      	movs	r1, #44	; 0x2c
 8002022:	fb01 f303 	mul.w	r3, r1, r3
 8002026:	4413      	add	r3, r2
 8002028:	3342      	adds	r3, #66	; 0x42
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
      break;
 800202e:	e016      	b.n	800205e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	212c      	movs	r1, #44	; 0x2c
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	3342      	adds	r3, #66	; 0x42
 800203e:	2202      	movs	r2, #2
 8002040:	701a      	strb	r2, [r3, #0]
      break;
 8002042:	e00c      	b.n	800205e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	212c      	movs	r1, #44	; 0x2c
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	3342      	adds	r3, #66	; 0x42
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
      break;
 8002056:	e002      	b.n	800205e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002058:	bf00      	nop
 800205a:	e000      	b.n	800205e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800205c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	212c      	movs	r1, #44	; 0x2c
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	4413      	add	r3, r2
 800206a:	3344      	adds	r3, #68	; 0x44
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	8b3a      	ldrh	r2, [r7, #24]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	202c      	movs	r0, #44	; 0x2c
 8002078:	fb00 f303 	mul.w	r3, r0, r3
 800207c:	440b      	add	r3, r1
 800207e:	334c      	adds	r3, #76	; 0x4c
 8002080:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3360      	adds	r3, #96	; 0x60
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	3350      	adds	r3, #80	; 0x50
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	212c      	movs	r1, #44	; 0x2c
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	3339      	adds	r3, #57	; 0x39
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	212c      	movs	r1, #44	; 0x2c
 80020be:	fb01 f303 	mul.w	r3, r1, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	3361      	adds	r3, #97	; 0x61
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	222c      	movs	r2, #44	; 0x2c
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	3338      	adds	r3, #56	; 0x38
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	18d1      	adds	r1, r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	f004 fe16 	bl	8006d14 <USB_HC_StartXfer>
 80020e8:	4603      	mov	r3, r0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop

080020f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f004 fb2f 	bl	800676e <USB_GetMode>
 8002110:	4603      	mov	r3, r0
 8002112:	2b01      	cmp	r3, #1
 8002114:	f040 80ef 	bne.w	80022f6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f004 fb13 	bl	8006748 <USB_ReadInterrupts>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80e5 	beq.w	80022f4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f004 fb0a 	bl	8006748 <USB_ReadInterrupts>
 8002134:	4603      	mov	r3, r0
 8002136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800213e:	d104      	bne.n	800214a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002148:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f004 fafa 	bl	8006748 <USB_ReadInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800215e:	d104      	bne.n	800216a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002168:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f004 faea 	bl	8006748 <USB_ReadInterrupts>
 8002174:	4603      	mov	r3, r0
 8002176:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800217a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800217e:	d104      	bne.n	800218a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002188:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f004 fada 	bl	8006748 <USB_ReadInterrupts>
 8002194:	4603      	mov	r3, r0
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d103      	bne.n	80021a6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2202      	movs	r2, #2
 80021a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 facc 	bl	8006748 <USB_ReadInterrupts>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021ba:	d115      	bne.n	80021e8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021c4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d108      	bne.n	80021e8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f007 f89e 	bl	8009318 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	4618      	mov	r0, r3
 80021e4:	f004 fbc2 	bl	800696c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f004 faab 	bl	8006748 <USB_ReadInterrupts>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021fc:	d102      	bne.n	8002204 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f001 f9ff 	bl	8003602 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f004 fa9d 	bl	8006748 <USB_ReadInterrupts>
 800220e:	4603      	mov	r3, r0
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b08      	cmp	r3, #8
 8002216:	d106      	bne.n	8002226 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f007 f861 	bl	80092e0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2208      	movs	r2, #8
 8002224:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f004 fa8c 	bl	8006748 <USB_ReadInterrupts>
 8002230:	4603      	mov	r3, r0
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b10      	cmp	r3, #16
 8002238:	d101      	bne.n	800223e <HAL_HCD_IRQHandler+0x14a>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_HCD_IRQHandler+0x14c>
 800223e:	2300      	movs	r3, #0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d012      	beq.n	800226a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699a      	ldr	r2, [r3, #24]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0210 	bic.w	r2, r2, #16
 8002252:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f001 f902 	bl	800345e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699a      	ldr	r2, [r3, #24]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0210 	orr.w	r2, r2, #16
 8002268:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f004 fa6a 	bl	8006748 <USB_ReadInterrupts>
 8002274:	4603      	mov	r3, r0
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800227e:	d13a      	bne.n	80022f6 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f004 fe87 	bl	8006f98 <USB_HC_ReadInterrupt>
 800228a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	e025      	b.n	80022de <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	fa22 f303 	lsr.w	r3, r2, r3
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d018      	beq.n	80022d8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022bc:	d106      	bne.n	80022cc <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	4619      	mov	r1, r3
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f8ab 	bl	8002420 <HCD_HC_IN_IRQHandler>
 80022ca:	e005      	b.n	80022d8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	4619      	mov	r1, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fcc6 	bl	8002c64 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	3301      	adds	r3, #1
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d3d4      	bcc.n	8002292 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022f0:	615a      	str	r2, [r3, #20]
 80022f2:	e000      	b.n	80022f6 <HAL_HCD_IRQHandler+0x202>
      return;
 80022f4:	bf00      	nop
    }
  }
}
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_HCD_Start+0x16>
 800230e:	2302      	movs	r3, #2
 8002310:	e013      	b.n	800233a <HAL_HCD_Start+0x3e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f004 f91f 	bl	8006562 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2101      	movs	r1, #1
 800232a:	4618      	mov	r0, r3
 800232c:	f004 fb82 	bl	8006a34 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_HCD_Stop+0x16>
 8002354:	2302      	movs	r3, #2
 8002356:	e00d      	b.n	8002374 <HAL_HCD_Stop+0x32>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f004 ff81 	bl	800726c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f004 fb29 	bl	80069e0 <USB_ResetPort>
 800238e:	4603      	mov	r3, r0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3360      	adds	r3, #96	; 0x60
 80023b2:	781b      	ldrb	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	212c      	movs	r1, #44	; 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	3350      	adds	r3, #80	; 0x50
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f004 fb6d 	bl	8006ad4 <USB_GetCurrentFrame>
 80023fa:	4603      	mov	r3, r0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f004 fb48 	bl	8006aa6 <USB_GetHostSpeed>
 8002416:	4603      	mov	r3, r0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4413      	add	r3, r2
 8002442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b04      	cmp	r3, #4
 800244e:	d119      	bne.n	8002484 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245c:	461a      	mov	r2, r3
 800245e:	2304      	movs	r3, #4
 8002460:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	0151      	lsls	r1, r2, #5
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	440a      	add	r2, r1
 8002478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	60d3      	str	r3, [r2, #12]
 8002482:	e101      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800249a:	d12b      	bne.n	80024f4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a8:	461a      	mov	r2, r3
 80024aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	3361      	adds	r3, #97	; 0x61
 80024be:	2207      	movs	r2, #7
 80024c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	0151      	lsls	r1, r2, #5
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	440a      	add	r2, r1
 80024d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f004 fd64 	bl	8006fba <USB_HC_Halt>
 80024f2:	e0c9      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	2b20      	cmp	r3, #32
 8002508:	d109      	bne.n	800251e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4413      	add	r3, r2
 8002512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002516:	461a      	mov	r2, r3
 8002518:	2320      	movs	r3, #32
 800251a:	6093      	str	r3, [r2, #8]
 800251c:	e0b4      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4413      	add	r3, r2
 8002526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b08      	cmp	r3, #8
 8002532:	d133      	bne.n	800259c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	0151      	lsls	r1, r2, #5
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	440a      	add	r2, r1
 800254a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	3361      	adds	r3, #97	; 0x61
 8002562:	2205      	movs	r2, #5
 8002564:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002572:	461a      	mov	r2, r3
 8002574:	2310      	movs	r3, #16
 8002576:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002584:	461a      	mov	r2, r3
 8002586:	2308      	movs	r3, #8
 8002588:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f004 fd10 	bl	8006fba <USB_HC_Halt>
 800259a:	e075      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b2:	d134      	bne.n	800261e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	0151      	lsls	r1, r2, #5
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	440a      	add	r2, r1
 80025ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	212c      	movs	r1, #44	; 0x2c
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	4413      	add	r3, r2
 80025e0:	3361      	adds	r3, #97	; 0x61
 80025e2:	2208      	movs	r2, #8
 80025e4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f2:	461a      	mov	r2, r3
 80025f4:	2310      	movs	r3, #16
 80025f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002604:	461a      	mov	r2, r3
 8002606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800260a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f004 fccf 	bl	8006fba <USB_HC_Halt>
 800261c:	e034      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002630:	2b80      	cmp	r3, #128	; 0x80
 8002632:	d129      	bne.n	8002688 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	0151      	lsls	r1, r2, #5
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	440a      	add	r2, r1
 800264a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800264e:	f043 0302 	orr.w	r3, r3, #2
 8002652:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3361      	adds	r3, #97	; 0x61
 8002662:	2206      	movs	r2, #6
 8002664:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f004 fca2 	bl	8006fba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	461a      	mov	r2, r3
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800269e:	d122      	bne.n	80026e6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	0151      	lsls	r1, r2, #5
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	440a      	add	r2, r1
 80026b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ba:	f043 0302 	orr.w	r3, r3, #2
 80026be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f004 fc75 	bl	8006fba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	461a      	mov	r2, r3
 80026de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026e2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80026e4:	e2ba      	b.n	8002c5c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	f040 811b 	bne.w	8002934 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d019      	beq.n	800273a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	3348      	adds	r3, #72	; 0x48
 8002714:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	0159      	lsls	r1, r3, #5
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	440b      	add	r3, r1
 800271e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002728:	1ad2      	subs	r2, r2, r3
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	202c      	movs	r0, #44	; 0x2c
 8002730:	fb00 f303 	mul.w	r3, r0, r3
 8002734:	440b      	add	r3, r1
 8002736:	3350      	adds	r3, #80	; 0x50
 8002738:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	3361      	adds	r3, #97	; 0x61
 8002748:	2201      	movs	r2, #1
 800274a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	335c      	adds	r3, #92	; 0x5c
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	2301      	movs	r3, #1
 800276e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	333f      	adds	r3, #63	; 0x3f
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d009      	beq.n	8002798 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	212c      	movs	r1, #44	; 0x2c
 800278a:	fb01 f303 	mul.w	r3, r1, r3
 800278e:	4413      	add	r3, r2
 8002790:	333f      	adds	r3, #63	; 0x3f
 8002792:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002794:	2b02      	cmp	r3, #2
 8002796:	d121      	bne.n	80027dc <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	0151      	lsls	r1, r2, #5
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	440a      	add	r2, r1
 80027ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f004 fbf9 	bl	8006fba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	461a      	mov	r2, r3
 80027d6:	2310      	movs	r3, #16
 80027d8:	6093      	str	r3, [r2, #8]
 80027da:	e066      	b.n	80028aa <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	212c      	movs	r1, #44	; 0x2c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	333f      	adds	r3, #63	; 0x3f
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d127      	bne.n	8002840 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	0151      	lsls	r1, r2, #5
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	440a      	add	r2, r1
 8002806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800280a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800280e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	212c      	movs	r1, #44	; 0x2c
 8002816:	fb01 f303 	mul.w	r3, r1, r3
 800281a:	4413      	add	r3, r2
 800281c:	3360      	adds	r3, #96	; 0x60
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	b2d9      	uxtb	r1, r3
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	202c      	movs	r0, #44	; 0x2c
 800282c:	fb00 f303 	mul.w	r3, r0, r3
 8002830:	4413      	add	r3, r2
 8002832:	3360      	adds	r3, #96	; 0x60
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f006 fd7b 	bl	8009334 <HAL_HCD_HC_NotifyURBChange_Callback>
 800283e:	e034      	b.n	80028aa <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	333f      	adds	r3, #63	; 0x3f
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d12a      	bne.n	80028aa <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3360      	adds	r3, #96	; 0x60
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	3354      	adds	r3, #84	; 0x54
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	f083 0301 	eor.w	r3, r3, #1
 800287a:	b2d8      	uxtb	r0, r3
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	212c      	movs	r1, #44	; 0x2c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	3354      	adds	r3, #84	; 0x54
 800288a:	4602      	mov	r2, r0
 800288c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	b2d9      	uxtb	r1, r3
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	202c      	movs	r0, #44	; 0x2c
 8002898:	fb00 f303 	mul.w	r3, r0, r3
 800289c:	4413      	add	r3, r2
 800289e:	3360      	adds	r3, #96	; 0x60
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f006 fd45 	bl	8009334 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d12b      	bne.n	800290a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	212c      	movs	r1, #44	; 0x2c
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	3348      	adds	r3, #72	; 0x48
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	202c      	movs	r0, #44	; 0x2c
 80028c8:	fb00 f202 	mul.w	r2, r0, r2
 80028cc:	440a      	add	r2, r1
 80028ce:	3240      	adds	r2, #64	; 0x40
 80028d0:	8812      	ldrh	r2, [r2, #0]
 80028d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 81be 	beq.w	8002c5c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	212c      	movs	r1, #44	; 0x2c
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	3354      	adds	r3, #84	; 0x54
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	f083 0301 	eor.w	r3, r3, #1
 80028f4:	b2d8      	uxtb	r0, r3
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	212c      	movs	r1, #44	; 0x2c
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	3354      	adds	r3, #84	; 0x54
 8002904:	4602      	mov	r2, r0
 8002906:	701a      	strb	r2, [r3, #0]
}
 8002908:	e1a8      	b.n	8002c5c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	3354      	adds	r3, #84	; 0x54
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	f083 0301 	eor.w	r3, r3, #1
 800291e:	b2d8      	uxtb	r0, r3
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	3354      	adds	r3, #84	; 0x54
 800292e:	4602      	mov	r2, r0
 8002930:	701a      	strb	r2, [r3, #0]
}
 8002932:	e193      	b.n	8002c5c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b02      	cmp	r3, #2
 8002948:	f040 8106 	bne.w	8002b58 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	0151      	lsls	r1, r2, #5
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	440a      	add	r2, r1
 8002962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002966:	f023 0302 	bic.w	r3, r3, #2
 800296a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	3361      	adds	r3, #97	; 0x61
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d109      	bne.n	8002994 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3360      	adds	r3, #96	; 0x60
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	e0c9      	b.n	8002b28 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	3361      	adds	r3, #97	; 0x61
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d109      	bne.n	80029bc <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	3360      	adds	r3, #96	; 0x60
 80029b6:	2205      	movs	r2, #5
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	e0b5      	b.n	8002b28 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	3361      	adds	r3, #97	; 0x61
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b06      	cmp	r3, #6
 80029ce:	d009      	beq.n	80029e4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	3361      	adds	r3, #97	; 0x61
 80029de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d150      	bne.n	8002a86 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	335c      	adds	r3, #92	; 0x5c
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	202c      	movs	r0, #44	; 0x2c
 80029fc:	fb00 f303 	mul.w	r3, r0, r3
 8002a00:	440b      	add	r3, r1
 8002a02:	335c      	adds	r3, #92	; 0x5c
 8002a04:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	212c      	movs	r1, #44	; 0x2c
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	335c      	adds	r3, #92	; 0x5c
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d912      	bls.n	8002a40 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	335c      	adds	r3, #92	; 0x5c
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3360      	adds	r3, #96	; 0x60
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a3e:	e073      	b.n	8002b28 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3360      	adds	r3, #96	; 0x60
 8002a4e:	2202      	movs	r2, #2
 8002a50:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a68:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a70:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a84:	e050      	b.n	8002b28 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	3361      	adds	r3, #97	; 0x61
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d122      	bne.n	8002ae0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3360      	adds	r3, #96	; 0x60
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ac2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002aca:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e023      	b.n	8002b28 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	3361      	adds	r3, #97	; 0x61
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b07      	cmp	r3, #7
 8002af2:	d119      	bne.n	8002b28 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	335c      	adds	r3, #92	; 0x5c
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	202c      	movs	r0, #44	; 0x2c
 8002b0c:	fb00 f303 	mul.w	r3, r0, r3
 8002b10:	440b      	add	r3, r1
 8002b12:	335c      	adds	r3, #92	; 0x5c
 8002b14:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	3360      	adds	r3, #96	; 0x60
 8002b24:	2204      	movs	r2, #4
 8002b26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b34:	461a      	mov	r2, r3
 8002b36:	2302      	movs	r3, #2
 8002b38:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	b2d9      	uxtb	r1, r3
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	202c      	movs	r0, #44	; 0x2c
 8002b44:	fb00 f303 	mul.w	r3, r0, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	3360      	adds	r3, #96	; 0x60
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f006 fbef 	bl	8009334 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b56:	e081      	b.n	8002c5c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d176      	bne.n	8002c5c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	333f      	adds	r3, #63	; 0x3f
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d121      	bne.n	8002bc6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	335c      	adds	r3, #92	; 0x5c
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	0151      	lsls	r1, r2, #5
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	440a      	add	r2, r1
 8002baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f004 f9fb 	bl	8006fba <USB_HC_Halt>
 8002bc4:	e041      	b.n	8002c4a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	212c      	movs	r1, #44	; 0x2c
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	333f      	adds	r3, #63	; 0x3f
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	212c      	movs	r1, #44	; 0x2c
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	333f      	adds	r3, #63	; 0x3f
 8002be8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d12d      	bne.n	8002c4a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	212c      	movs	r1, #44	; 0x2c
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	335c      	adds	r3, #92	; 0x5c
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d120      	bne.n	8002c4a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	3361      	adds	r3, #97	; 0x61
 8002c16:	2203      	movs	r2, #3
 8002c18:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	0151      	lsls	r1, r2, #5
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	440a      	add	r2, r1
 8002c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c34:	f043 0302 	orr.w	r3, r3, #2
 8002c38:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	4611      	mov	r1, r2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f004 f9b8 	bl	8006fba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c56:	461a      	mov	r2, r3
 8002c58:	2310      	movs	r3, #16
 8002c5a:	6093      	str	r3, [r2, #8]
}
 8002c5c:	bf00      	nop
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d119      	bne.n	8002cc8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2304      	movs	r3, #4
 8002ca4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	0151      	lsls	r1, r2, #5
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	440a      	add	r2, r1
 8002cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cc0:	f043 0302 	orr.w	r3, r3, #2
 8002cc4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002cc6:	e3c6      	b.n	8003456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d13e      	bne.n	8002d5c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cea:	461a      	mov	r2, r3
 8002cec:	2320      	movs	r3, #32
 8002cee:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	333d      	adds	r3, #61	; 0x3d
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	f040 83a8 	bne.w	8003456 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	333d      	adds	r3, #61	; 0x3d
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3360      	adds	r3, #96	; 0x60
 8002d26:	2202      	movs	r2, #2
 8002d28:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	0151      	lsls	r1, r2, #5
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	440a      	add	r2, r1
 8002d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d44:	f043 0302 	orr.w	r3, r3, #2
 8002d48:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f004 f930 	bl	8006fba <USB_HC_Halt>
}
 8002d5a:	e37c      	b.n	8003456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d72:	d122      	bne.n	8002dba <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	0151      	lsls	r1, r2, #5
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	440a      	add	r2, r1
 8002d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d8e:	f043 0302 	orr.w	r3, r3, #2
 8002d92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f004 f90b 	bl	8006fba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db0:	461a      	mov	r2, r3
 8002db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002db6:	6093      	str	r3, [r2, #8]
}
 8002db8:	e34d      	b.n	8003456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d150      	bne.n	8002e72 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	335c      	adds	r3, #92	; 0x5c
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df4:	2b40      	cmp	r3, #64	; 0x40
 8002df6:	d111      	bne.n	8002e1c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	333d      	adds	r3, #61	; 0x3d
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e16:	461a      	mov	r2, r3
 8002e18:	2340      	movs	r3, #64	; 0x40
 8002e1a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	0151      	lsls	r1, r2, #5
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	440a      	add	r2, r1
 8002e32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e36:	f043 0302 	orr.w	r3, r3, #2
 8002e3a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f004 f8b7 	bl	8006fba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	212c      	movs	r1, #44	; 0x2c
 8002e64:	fb01 f303 	mul.w	r3, r1, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	3361      	adds	r3, #97	; 0x61
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
}
 8002e70:	e2f1      	b.n	8003456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e84:	2b40      	cmp	r3, #64	; 0x40
 8002e86:	d13c      	bne.n	8002f02 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	212c      	movs	r1, #44	; 0x2c
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	3361      	adds	r3, #97	; 0x61
 8002e96:	2204      	movs	r2, #4
 8002e98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	333d      	adds	r3, #61	; 0x3d
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	335c      	adds	r3, #92	; 0x5c
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	0151      	lsls	r1, r2, #5
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	440a      	add	r2, r1
 8002ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f004 f866 	bl	8006fba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efa:	461a      	mov	r2, r3
 8002efc:	2340      	movs	r3, #64	; 0x40
 8002efe:	6093      	str	r3, [r2, #8]
}
 8002f00:	e2a9      	b.n	8003456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d12a      	bne.n	8002f6e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	461a      	mov	r2, r3
 8002f26:	2308      	movs	r3, #8
 8002f28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	0151      	lsls	r1, r2, #5
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	440a      	add	r2, r1
 8002f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f44:	f043 0302 	orr.w	r3, r3, #2
 8002f48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f004 f830 	bl	8006fba <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	3361      	adds	r3, #97	; 0x61
 8002f68:	2205      	movs	r2, #5
 8002f6a:	701a      	strb	r2, [r3, #0]
}
 8002f6c:	e273      	b.n	8003456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d150      	bne.n	8003026 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	212c      	movs	r1, #44	; 0x2c
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	335c      	adds	r3, #92	; 0x5c
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3361      	adds	r3, #97	; 0x61
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	212c      	movs	r1, #44	; 0x2c
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	333d      	adds	r3, #61	; 0x3d
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d112      	bne.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	212c      	movs	r1, #44	; 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	333c      	adds	r3, #60	; 0x3c
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d108      	bne.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	333d      	adds	r3, #61	; 0x3d
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	0151      	lsls	r1, r2, #5
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	440a      	add	r2, r1
 8002ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f003 ffd4 	bl	8006fba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301e:	461a      	mov	r2, r3
 8003020:	2310      	movs	r3, #16
 8003022:	6093      	str	r3, [r2, #8]
}
 8003024:	e217      	b.n	8003456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	4413      	add	r3, r2
 800302e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003038:	2b80      	cmp	r3, #128	; 0x80
 800303a:	d174      	bne.n	8003126 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d121      	bne.n	8003088 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	212c      	movs	r1, #44	; 0x2c
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	4413      	add	r3, r2
 8003050:	3361      	adds	r3, #97	; 0x61
 8003052:	2206      	movs	r2, #6
 8003054:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	4413      	add	r3, r2
 800305e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	0151      	lsls	r1, r2, #5
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	440a      	add	r2, r1
 800306c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f003 ff9a 	bl	8006fba <USB_HC_Halt>
 8003086:	e044      	b.n	8003112 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	335c      	adds	r3, #92	; 0x5c
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	202c      	movs	r0, #44	; 0x2c
 80030a0:	fb00 f303 	mul.w	r3, r0, r3
 80030a4:	440b      	add	r3, r1
 80030a6:	335c      	adds	r3, #92	; 0x5c
 80030a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	212c      	movs	r1, #44	; 0x2c
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	335c      	adds	r3, #92	; 0x5c
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d920      	bls.n	8003100 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	335c      	adds	r3, #92	; 0x5c
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	3360      	adds	r3, #96	; 0x60
 80030de:	2204      	movs	r2, #4
 80030e0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	b2d9      	uxtb	r1, r3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	202c      	movs	r0, #44	; 0x2c
 80030ec:	fb00 f303 	mul.w	r3, r0, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	3360      	adds	r3, #96	; 0x60
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f006 f91b 	bl	8009334 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030fe:	e008      	b.n	8003112 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	3360      	adds	r3, #96	; 0x60
 800310e:	2202      	movs	r2, #2
 8003110:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	4413      	add	r3, r2
 800311a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311e:	461a      	mov	r2, r3
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	6093      	str	r3, [r2, #8]
}
 8003124:	e197      	b.n	8003456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	4413      	add	r3, r2
 800312e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313c:	d134      	bne.n	80031a8 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	4413      	add	r3, r2
 8003146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	0151      	lsls	r1, r2, #5
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	440a      	add	r2, r1
 8003154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003158:	f043 0302 	orr.w	r3, r3, #2
 800315c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f003 ff26 	bl	8006fba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	4413      	add	r3, r2
 8003176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317a:	461a      	mov	r2, r3
 800317c:	2310      	movs	r3, #16
 800317e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318c:	461a      	mov	r2, r3
 800318e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003192:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	212c      	movs	r1, #44	; 0x2c
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4413      	add	r3, r2
 80031a0:	3361      	adds	r3, #97	; 0x61
 80031a2:	2208      	movs	r2, #8
 80031a4:	701a      	strb	r2, [r3, #0]
}
 80031a6:	e156      	b.n	8003456 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	f040 814b 	bne.w	8003456 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	0151      	lsls	r1, r2, #5
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	440a      	add	r2, r1
 80031d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031da:	f023 0302 	bic.w	r3, r3, #2
 80031de:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	212c      	movs	r1, #44	; 0x2c
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	3361      	adds	r3, #97	; 0x61
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d179      	bne.n	80032e8 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	212c      	movs	r1, #44	; 0x2c
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	4413      	add	r3, r2
 8003200:	3360      	adds	r3, #96	; 0x60
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	333f      	adds	r3, #63	; 0x3f
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d00a      	beq.n	8003230 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	212c      	movs	r1, #44	; 0x2c
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	333f      	adds	r3, #63	; 0x3f
 8003228:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800322a:	2b03      	cmp	r3, #3
 800322c:	f040 80fc 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d142      	bne.n	80032be <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	334c      	adds	r3, #76	; 0x4c
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80ed 	beq.w	8003428 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	212c      	movs	r1, #44	; 0x2c
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	334c      	adds	r3, #76	; 0x4c
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	202c      	movs	r0, #44	; 0x2c
 8003264:	fb00 f202 	mul.w	r2, r0, r2
 8003268:	440a      	add	r2, r1
 800326a:	3240      	adds	r2, #64	; 0x40
 800326c:	8812      	ldrh	r2, [r2, #0]
 800326e:	4413      	add	r3, r2
 8003270:	3b01      	subs	r3, #1
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	202c      	movs	r0, #44	; 0x2c
 8003278:	fb00 f202 	mul.w	r2, r0, r2
 800327c:	440a      	add	r2, r1
 800327e:	3240      	adds	r2, #64	; 0x40
 8003280:	8812      	ldrh	r2, [r2, #0]
 8003282:	fbb3 f3f2 	udiv	r3, r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 80ca 	beq.w	8003428 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	212c      	movs	r1, #44	; 0x2c
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	4413      	add	r3, r2
 80032a0:	3355      	adds	r3, #85	; 0x55
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	f083 0301 	eor.w	r3, r3, #1
 80032a8:	b2d8      	uxtb	r0, r3
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	212c      	movs	r1, #44	; 0x2c
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	3355      	adds	r3, #85	; 0x55
 80032b8:	4602      	mov	r2, r0
 80032ba:	701a      	strb	r2, [r3, #0]
 80032bc:	e0b4      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	3355      	adds	r3, #85	; 0x55
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	f083 0301 	eor.w	r3, r3, #1
 80032d2:	b2d8      	uxtb	r0, r3
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	212c      	movs	r1, #44	; 0x2c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	3355      	adds	r3, #85	; 0x55
 80032e2:	4602      	mov	r2, r0
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	e09f      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	3361      	adds	r3, #97	; 0x61
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d109      	bne.n	8003310 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	3360      	adds	r3, #96	; 0x60
 800330a:	2202      	movs	r2, #2
 800330c:	701a      	strb	r2, [r3, #0]
 800330e:	e08b      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	212c      	movs	r1, #44	; 0x2c
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	4413      	add	r3, r2
 800331c:	3361      	adds	r3, #97	; 0x61
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d109      	bne.n	8003338 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	212c      	movs	r1, #44	; 0x2c
 800332a:	fb01 f303 	mul.w	r3, r1, r3
 800332e:	4413      	add	r3, r2
 8003330:	3360      	adds	r3, #96	; 0x60
 8003332:	2202      	movs	r2, #2
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e077      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	212c      	movs	r1, #44	; 0x2c
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	4413      	add	r3, r2
 8003344:	3361      	adds	r3, #97	; 0x61
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b05      	cmp	r3, #5
 800334a:	d109      	bne.n	8003360 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	212c      	movs	r1, #44	; 0x2c
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	4413      	add	r3, r2
 8003358:	3360      	adds	r3, #96	; 0x60
 800335a:	2205      	movs	r2, #5
 800335c:	701a      	strb	r2, [r3, #0]
 800335e:	e063      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	212c      	movs	r1, #44	; 0x2c
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	4413      	add	r3, r2
 800336c:	3361      	adds	r3, #97	; 0x61
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b06      	cmp	r3, #6
 8003372:	d009      	beq.n	8003388 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	212c      	movs	r1, #44	; 0x2c
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	4413      	add	r3, r2
 8003380:	3361      	adds	r3, #97	; 0x61
 8003382:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003384:	2b08      	cmp	r3, #8
 8003386:	d14f      	bne.n	8003428 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	212c      	movs	r1, #44	; 0x2c
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	4413      	add	r3, r2
 8003394:	335c      	adds	r3, #92	; 0x5c
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	202c      	movs	r0, #44	; 0x2c
 80033a0:	fb00 f303 	mul.w	r3, r0, r3
 80033a4:	440b      	add	r3, r1
 80033a6:	335c      	adds	r3, #92	; 0x5c
 80033a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	212c      	movs	r1, #44	; 0x2c
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	4413      	add	r3, r2
 80033b6:	335c      	adds	r3, #92	; 0x5c
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d912      	bls.n	80033e4 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	212c      	movs	r1, #44	; 0x2c
 80033c4:	fb01 f303 	mul.w	r3, r1, r3
 80033c8:	4413      	add	r3, r2
 80033ca:	335c      	adds	r3, #92	; 0x5c
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	3360      	adds	r3, #96	; 0x60
 80033de:	2204      	movs	r2, #4
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e021      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	3360      	adds	r3, #96	; 0x60
 80033f2:	2202      	movs	r2, #2
 80033f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800340c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003414:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	4413      	add	r3, r2
 800341e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003422:	461a      	mov	r2, r3
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	4413      	add	r3, r2
 8003430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003434:	461a      	mov	r2, r3
 8003436:	2302      	movs	r3, #2
 8003438:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	b2d9      	uxtb	r1, r3
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	202c      	movs	r0, #44	; 0x2c
 8003444:	fb00 f303 	mul.w	r3, r0, r3
 8003448:	4413      	add	r3, r2
 800344a:	3360      	adds	r3, #96	; 0x60
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f005 ff6f 	bl	8009334 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003456:	bf00      	nop
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b08a      	sub	sp, #40	; 0x28
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	0c5b      	lsrs	r3, r3, #17
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003492:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d004      	beq.n	80034a4 <HCD_RXQLVL_IRQHandler+0x46>
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b05      	cmp	r3, #5
 800349e:	f000 80a9 	beq.w	80035f4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034a2:	e0aa      	b.n	80035fa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80a6 	beq.w	80035f8 <HCD_RXQLVL_IRQHandler+0x19a>
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	212c      	movs	r1, #44	; 0x2c
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	4413      	add	r3, r2
 80034b8:	3344      	adds	r3, #68	; 0x44
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 809b 	beq.w	80035f8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	3350      	adds	r3, #80	; 0x50
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	441a      	add	r2, r3
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	202c      	movs	r0, #44	; 0x2c
 80034dc:	fb00 f303 	mul.w	r3, r0, r3
 80034e0:	440b      	add	r3, r1
 80034e2:	334c      	adds	r3, #76	; 0x4c
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d87a      	bhi.n	80035e0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	3344      	adds	r3, #68	; 0x44
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	b292      	uxth	r2, r2
 8003502:	4619      	mov	r1, r3
 8003504:	f003 f8f7 	bl	80066f6 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	3344      	adds	r3, #68	; 0x44
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	441a      	add	r2, r3
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	202c      	movs	r0, #44	; 0x2c
 8003522:	fb00 f303 	mul.w	r3, r0, r3
 8003526:	440b      	add	r3, r1
 8003528:	3344      	adds	r3, #68	; 0x44
 800352a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	212c      	movs	r1, #44	; 0x2c
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	4413      	add	r3, r2
 8003538:	3350      	adds	r3, #80	; 0x50
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	441a      	add	r2, r3
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	202c      	movs	r0, #44	; 0x2c
 8003546:	fb00 f303 	mul.w	r3, r0, r3
 800354a:	440b      	add	r3, r1
 800354c:	3350      	adds	r3, #80	; 0x50
 800354e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	4413      	add	r3, r2
 8003558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	0cdb      	lsrs	r3, r3, #19
 8003560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003564:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	212c      	movs	r1, #44	; 0x2c
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	4413      	add	r3, r2
 8003572:	3340      	adds	r3, #64	; 0x40
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4293      	cmp	r3, r2
 800357c:	d13c      	bne.n	80035f8 <HCD_RXQLVL_IRQHandler+0x19a>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d039      	beq.n	80035f8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	4413      	add	r3, r2
 800358c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800359a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035a2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b0:	461a      	mov	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	212c      	movs	r1, #44	; 0x2c
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	4413      	add	r3, r2
 80035c2:	3354      	adds	r3, #84	; 0x54
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	f083 0301 	eor.w	r3, r3, #1
 80035ca:	b2d8      	uxtb	r0, r3
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	212c      	movs	r1, #44	; 0x2c
 80035d2:	fb01 f303 	mul.w	r3, r1, r3
 80035d6:	4413      	add	r3, r2
 80035d8:	3354      	adds	r3, #84	; 0x54
 80035da:	4602      	mov	r2, r0
 80035dc:	701a      	strb	r2, [r3, #0]
      break;
 80035de:	e00b      	b.n	80035f8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	212c      	movs	r1, #44	; 0x2c
 80035e6:	fb01 f303 	mul.w	r3, r1, r3
 80035ea:	4413      	add	r3, r2
 80035ec:	3360      	adds	r3, #96	; 0x60
 80035ee:	2204      	movs	r2, #4
 80035f0:	701a      	strb	r2, [r3, #0]
      break;
 80035f2:	e001      	b.n	80035f8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80035f4:	bf00      	nop
 80035f6:	e000      	b.n	80035fa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80035f8:	bf00      	nop
  }
}
 80035fa:	bf00      	nop
 80035fc:	3728      	adds	r7, #40	; 0x28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b086      	sub	sp, #24
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800362e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b02      	cmp	r3, #2
 8003638:	d10b      	bne.n	8003652 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d102      	bne.n	800364a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f005 fe59 	bl	80092fc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f043 0302 	orr.w	r3, r3, #2
 8003650:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b08      	cmp	r3, #8
 800365a:	d132      	bne.n	80036c2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f043 0308 	orr.w	r3, r3, #8
 8003662:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b04      	cmp	r3, #4
 800366c:	d126      	bne.n	80036bc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d113      	bne.n	800369e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800367c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003680:	d106      	bne.n	8003690 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2102      	movs	r1, #2
 8003688:	4618      	mov	r0, r3
 800368a:	f003 f96f 	bl	800696c <USB_InitFSLSPClkSel>
 800368e:	e011      	b.n	80036b4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2101      	movs	r1, #1
 8003696:	4618      	mov	r0, r3
 8003698:	f003 f968 	bl	800696c <USB_InitFSLSPClkSel>
 800369c:	e00a      	b.n	80036b4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d106      	bne.n	80036b4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036ac:	461a      	mov	r2, r3
 80036ae:	f64e 2360 	movw	r3, #60000	; 0xea60
 80036b2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f005 fe4b 	bl	8009350 <HAL_HCD_PortEnabled_Callback>
 80036ba:	e002      	b.n	80036c2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f005 fe55 	bl	800936c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d103      	bne.n	80036d4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f043 0320 	orr.w	r3, r3, #32
 80036d2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036da:	461a      	mov	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	6013      	str	r3, [r2, #0]
}
 80036e0:	bf00      	nop
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e12b      	b.n	8003952 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd fd28 	bl	8001164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	; 0x24
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800373a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800374a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800374c:	f002 f84e 	bl	80057ec <HAL_RCC_GetPCLK1Freq>
 8003750:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4a81      	ldr	r2, [pc, #516]	; (800395c <HAL_I2C_Init+0x274>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d807      	bhi.n	800376c <HAL_I2C_Init+0x84>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a80      	ldr	r2, [pc, #512]	; (8003960 <HAL_I2C_Init+0x278>)
 8003760:	4293      	cmp	r3, r2
 8003762:	bf94      	ite	ls
 8003764:	2301      	movls	r3, #1
 8003766:	2300      	movhi	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	e006      	b.n	800377a <HAL_I2C_Init+0x92>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a7d      	ldr	r2, [pc, #500]	; (8003964 <HAL_I2C_Init+0x27c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	bf94      	ite	ls
 8003774:	2301      	movls	r3, #1
 8003776:	2300      	movhi	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0e7      	b.n	8003952 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a78      	ldr	r2, [pc, #480]	; (8003968 <HAL_I2C_Init+0x280>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0c9b      	lsrs	r3, r3, #18
 800378c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a6a      	ldr	r2, [pc, #424]	; (800395c <HAL_I2C_Init+0x274>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d802      	bhi.n	80037bc <HAL_I2C_Init+0xd4>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	3301      	adds	r3, #1
 80037ba:	e009      	b.n	80037d0 <HAL_I2C_Init+0xe8>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	4a69      	ldr	r2, [pc, #420]	; (800396c <HAL_I2C_Init+0x284>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	099b      	lsrs	r3, r3, #6
 80037ce:	3301      	adds	r3, #1
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	495c      	ldr	r1, [pc, #368]	; (800395c <HAL_I2C_Init+0x274>)
 80037ec:	428b      	cmp	r3, r1
 80037ee:	d819      	bhi.n	8003824 <HAL_I2C_Init+0x13c>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1e59      	subs	r1, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80037fe:	1c59      	adds	r1, r3, #1
 8003800:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003804:	400b      	ands	r3, r1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_I2C_Init+0x138>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1e59      	subs	r1, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	fbb1 f3f3 	udiv	r3, r1, r3
 8003818:	3301      	adds	r3, #1
 800381a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381e:	e051      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 8003820:	2304      	movs	r3, #4
 8003822:	e04f      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d111      	bne.n	8003850 <HAL_I2C_Init+0x168>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1e58      	subs	r0, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e012      	b.n	8003876 <HAL_I2C_Init+0x18e>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1e58      	subs	r0, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	0099      	lsls	r1, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	fbb0 f3f3 	udiv	r3, r0, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Init+0x196>
 800387a:	2301      	movs	r3, #1
 800387c:	e022      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10e      	bne.n	80038a4 <HAL_I2C_Init+0x1bc>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1e58      	subs	r0, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	460b      	mov	r3, r1
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	440b      	add	r3, r1
 8003894:	fbb0 f3f3 	udiv	r3, r0, r3
 8003898:	3301      	adds	r3, #1
 800389a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a2:	e00f      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1e58      	subs	r0, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	0099      	lsls	r1, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ba:	3301      	adds	r3, #1
 80038bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	6809      	ldr	r1, [r1, #0]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6911      	ldr	r1, [r2, #16]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68d2      	ldr	r2, [r2, #12]
 80038fe:	4311      	orrs	r1, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	430b      	orrs	r3, r1
 8003906:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	000186a0 	.word	0x000186a0
 8003960:	001e847f 	.word	0x001e847f
 8003964:	003d08ff 	.word	0x003d08ff
 8003968:	431bde83 	.word	0x431bde83
 800396c:	10624dd3 	.word	0x10624dd3

08003970 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	461a      	mov	r2, r3
 800397c:	460b      	mov	r3, r1
 800397e:	817b      	strh	r3, [r7, #10]
 8003980:	4613      	mov	r3, r2
 8003982:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003984:	f7fd fe22 	bl	80015cc <HAL_GetTick>
 8003988:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b20      	cmp	r3, #32
 8003994:	f040 80e0 	bne.w	8003b58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	2319      	movs	r3, #25
 800399e:	2201      	movs	r2, #1
 80039a0:	4970      	ldr	r1, [pc, #448]	; (8003b64 <HAL_I2C_Master_Transmit+0x1f4>)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 fc58 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
 80039b0:	e0d3      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_I2C_Master_Transmit+0x50>
 80039bc:	2302      	movs	r3, #2
 80039be:	e0cc      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d007      	beq.n	80039e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0201 	orr.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2221      	movs	r2, #33	; 0x21
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2210      	movs	r2, #16
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	893a      	ldrh	r2, [r7, #8]
 8003a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4a50      	ldr	r2, [pc, #320]	; (8003b68 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a28:	8979      	ldrh	r1, [r7, #10]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	6a3a      	ldr	r2, [r7, #32]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fac2 	bl	8003fb8 <I2C_MasterRequestWrite>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e08d      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a54:	e066      	b.n	8003b24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	6a39      	ldr	r1, [r7, #32]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fcd2 	bl	8004404 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00d      	beq.n	8003a82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d107      	bne.n	8003a7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e06b      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	781a      	ldrb	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d11b      	bne.n	8003af8 <HAL_I2C_Master_Transmit+0x188>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d017      	beq.n	8003af8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	6a39      	ldr	r1, [r7, #32]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fcc2 	bl	8004486 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00d      	beq.n	8003b24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d107      	bne.n	8003b20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e01a      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d194      	bne.n	8003a56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	00100002 	.word	0x00100002
 8003b68:	ffff0000 	.word	0xffff0000

08003b6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08c      	sub	sp, #48	; 0x30
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	461a      	mov	r2, r3
 8003b78:	460b      	mov	r3, r1
 8003b7a:	817b      	strh	r3, [r7, #10]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b80:	f7fd fd24 	bl	80015cc <HAL_GetTick>
 8003b84:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	f040 820b 	bne.w	8003faa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	2319      	movs	r3, #25
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	497c      	ldr	r1, [pc, #496]	; (8003d90 <HAL_I2C_Master_Receive+0x224>)
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fb5a 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003baa:	2302      	movs	r3, #2
 8003bac:	e1fe      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_I2C_Master_Receive+0x50>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e1f7      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d007      	beq.n	8003be2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2222      	movs	r2, #34	; 0x22
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2210      	movs	r2, #16
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	893a      	ldrh	r2, [r7, #8]
 8003c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a5c      	ldr	r2, [pc, #368]	; (8003d94 <HAL_I2C_Master_Receive+0x228>)
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c24:	8979      	ldrh	r1, [r7, #10]
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 fa46 	bl	80040bc <I2C_MasterRequestRead>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e1b8      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d113      	bne.n	8003c6a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c42:	2300      	movs	r3, #0
 8003c44:	623b      	str	r3, [r7, #32]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	623b      	str	r3, [r7, #32]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	623b      	str	r3, [r7, #32]
 8003c56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e18c      	b.n	8003f84 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d11b      	bne.n	8003caa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c82:	2300      	movs	r3, #0
 8003c84:	61fb      	str	r3, [r7, #28]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e16c      	b.n	8003f84 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d11b      	bne.n	8003cea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	e14c      	b.n	8003f84 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d10:	e138      	b.n	8003f84 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	f200 80f1 	bhi.w	8003efe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d123      	bne.n	8003d6c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fbed 	bl	8004508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e139      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d6a:	e10b      	b.n	8003f84 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d14e      	bne.n	8003e12 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	4906      	ldr	r1, [pc, #24]	; (8003d98 <HAL_I2C_Master_Receive+0x22c>)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fa6a 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e10e      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
 8003d8e:	bf00      	nop
 8003d90:	00100002 	.word	0x00100002
 8003d94:	ffff0000 	.word	0xffff0000
 8003d98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e10:	e0b8      	b.n	8003f84 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	2200      	movs	r2, #0
 8003e1a:	4966      	ldr	r1, [pc, #408]	; (8003fb4 <HAL_I2C_Master_Receive+0x448>)
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 fa1b 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0bf      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	2200      	movs	r2, #0
 8003e76:	494f      	ldr	r1, [pc, #316]	; (8003fb4 <HAL_I2C_Master_Receive+0x448>)
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f9ed 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e091      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003efc:	e042      	b.n	8003f84 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fb00 	bl	8004508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e04c      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d118      	bne.n	8003f84 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f47f aec2 	bne.w	8003d12 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e000      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003faa:	2302      	movs	r3, #2
  }
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3728      	adds	r7, #40	; 0x28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	00010004 	.word	0x00010004

08003fb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d006      	beq.n	8003fe2 <I2C_MasterRequestWrite+0x2a>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d003      	beq.n	8003fe2 <I2C_MasterRequestWrite+0x2a>
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fe0:	d108      	bne.n	8003ff4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e00b      	b.n	800400c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	2b12      	cmp	r3, #18
 8003ffa:	d107      	bne.n	800400c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800400a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f91d 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00d      	beq.n	8004040 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004032:	d103      	bne.n	800403c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800403a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e035      	b.n	80040ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004048:	d108      	bne.n	800405c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800404a:	897b      	ldrh	r3, [r7, #10]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004058:	611a      	str	r2, [r3, #16]
 800405a:	e01b      	b.n	8004094 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800405c:	897b      	ldrh	r3, [r7, #10]
 800405e:	11db      	asrs	r3, r3, #7
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f003 0306 	and.w	r3, r3, #6
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f063 030f 	orn	r3, r3, #15
 800406c:	b2da      	uxtb	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	490e      	ldr	r1, [pc, #56]	; (80040b4 <I2C_MasterRequestWrite+0xfc>)
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f943 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e010      	b.n	80040ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800408a:	897b      	ldrh	r3, [r7, #10]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	4907      	ldr	r1, [pc, #28]	; (80040b8 <I2C_MasterRequestWrite+0x100>)
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f933 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	00010008 	.word	0x00010008
 80040b8:	00010002 	.word	0x00010002

080040bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	460b      	mov	r3, r1
 80040ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d006      	beq.n	80040f6 <I2C_MasterRequestRead+0x3a>
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d003      	beq.n	80040f6 <I2C_MasterRequestRead+0x3a>
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040f4:	d108      	bne.n	8004108 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	e00b      	b.n	8004120 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	2b11      	cmp	r3, #17
 800410e:	d107      	bne.n	8004120 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800411e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f893 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004146:	d103      	bne.n	8004150 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800414e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e079      	b.n	8004248 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800415c:	d108      	bne.n	8004170 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800415e:	897b      	ldrh	r3, [r7, #10]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	b2da      	uxtb	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	611a      	str	r2, [r3, #16]
 800416e:	e05f      	b.n	8004230 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004170:	897b      	ldrh	r3, [r7, #10]
 8004172:	11db      	asrs	r3, r3, #7
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 0306 	and.w	r3, r3, #6
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f063 030f 	orn	r3, r3, #15
 8004180:	b2da      	uxtb	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4930      	ldr	r1, [pc, #192]	; (8004250 <I2C_MasterRequestRead+0x194>)
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f8b9 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e054      	b.n	8004248 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800419e:	897b      	ldrh	r3, [r7, #10]
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4929      	ldr	r1, [pc, #164]	; (8004254 <I2C_MasterRequestRead+0x198>)
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f8a9 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e044      	b.n	8004248 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f831 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00d      	beq.n	8004218 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420a:	d103      	bne.n	8004214 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004212:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e017      	b.n	8004248 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004218:	897b      	ldrh	r3, [r7, #10]
 800421a:	11db      	asrs	r3, r3, #7
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f003 0306 	and.w	r3, r3, #6
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f063 030e 	orn	r3, r3, #14
 8004228:	b2da      	uxtb	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4907      	ldr	r1, [pc, #28]	; (8004254 <I2C_MasterRequestRead+0x198>)
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f865 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	00010008 	.word	0x00010008
 8004254:	00010002 	.word	0x00010002

08004258 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004268:	e025      	b.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004270:	d021      	beq.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004272:	f7fd f9ab 	bl	80015cc <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d116      	bne.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f043 0220 	orr.w	r2, r3, #32
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e023      	b.n	80042fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d10d      	bne.n	80042dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	43da      	mvns	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4013      	ands	r3, r2
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	e00c      	b.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	43da      	mvns	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4013      	ands	r3, r2
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bf0c      	ite	eq
 80042ee:	2301      	moveq	r3, #1
 80042f0:	2300      	movne	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d0b6      	beq.n	800426a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
 8004312:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004314:	e051      	b.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004324:	d123      	bne.n	800436e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004334:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800433e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f043 0204 	orr.w	r2, r3, #4
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e046      	b.n	80043fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004374:	d021      	beq.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004376:	f7fd f929 	bl	80015cc <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	429a      	cmp	r2, r3
 8004384:	d302      	bcc.n	800438c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d116      	bne.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f043 0220 	orr.w	r2, r3, #32
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e020      	b.n	80043fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d10c      	bne.n	80043de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	43da      	mvns	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4013      	ands	r3, r2
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bf14      	ite	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	2300      	moveq	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	e00b      	b.n	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	43da      	mvns	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4013      	ands	r3, r2
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	bf14      	ite	ne
 80043f0:	2301      	movne	r3, #1
 80043f2:	2300      	moveq	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d18d      	bne.n	8004316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004410:	e02d      	b.n	800446e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f8ce 	bl	80045b4 <I2C_IsAcknowledgeFailed>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e02d      	b.n	800447e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004428:	d021      	beq.n	800446e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7fd f8cf 	bl	80015cc <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d116      	bne.n	800446e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f043 0220 	orr.w	r2, r3, #32
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e007      	b.n	800447e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b80      	cmp	r3, #128	; 0x80
 800447a:	d1ca      	bne.n	8004412 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004492:	e02d      	b.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f88d 	bl	80045b4 <I2C_IsAcknowledgeFailed>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e02d      	b.n	8004500 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044aa:	d021      	beq.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ac:	f7fd f88e 	bl	80015cc <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d116      	bne.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	f043 0220 	orr.w	r2, r3, #32
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e007      	b.n	8004500 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d1ca      	bne.n	8004494 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004514:	e042      	b.n	800459c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b10      	cmp	r3, #16
 8004522:	d119      	bne.n	8004558 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0210 	mvn.w	r2, #16
 800452c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e029      	b.n	80045ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004558:	f7fd f838 	bl	80015cc <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	429a      	cmp	r2, r3
 8004566:	d302      	bcc.n	800456e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d116      	bne.n	800459c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f043 0220 	orr.w	r2, r3, #32
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e007      	b.n	80045ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a6:	2b40      	cmp	r3, #64	; 0x40
 80045a8:	d1b5      	bne.n	8004516 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ca:	d11b      	bne.n	8004604 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	f043 0204 	orr.w	r2, r3, #4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e128      	b.n	8004878 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a90      	ldr	r2, [pc, #576]	; (8004880 <HAL_I2S_Init+0x26c>)
 800463e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7fc fdd7 	bl	80011f4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6812      	ldr	r2, [r2, #0]
 8004658:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800465c:	f023 030f 	bic.w	r3, r3, #15
 8004660:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2202      	movs	r2, #2
 8004668:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d060      	beq.n	8004734 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d102      	bne.n	8004680 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800467a:	2310      	movs	r3, #16
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	e001      	b.n	8004684 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004680:	2320      	movs	r3, #32
 8004682:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b20      	cmp	r3, #32
 800468a:	d802      	bhi.n	8004692 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004692:	2001      	movs	r0, #1
 8004694:	f001 f9a0 	bl	80059d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004698:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a2:	d125      	bne.n	80046f0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d010      	beq.n	80046ce <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	461a      	mov	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	3305      	adds	r3, #5
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	e01f      	b.n	800470e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	461a      	mov	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ea:	3305      	adds	r3, #5
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	e00e      	b.n	800470e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	461a      	mov	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	fbb2 f3f3 	udiv	r3, r2, r3
 800470a:	3305      	adds	r3, #5
 800470c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	4a5c      	ldr	r2, [pc, #368]	; (8004884 <HAL_I2S_Init+0x270>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	08db      	lsrs	r3, r3, #3
 8004718:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	021b      	lsls	r3, r3, #8
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	e003      	b.n	800473c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004734:	2302      	movs	r3, #2
 8004736:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d902      	bls.n	8004748 <HAL_I2S_Init+0x134>
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	2bff      	cmp	r3, #255	; 0xff
 8004746:	d907      	bls.n	8004758 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474c:	f043 0210 	orr.w	r2, r3, #16
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e08f      	b.n	8004878 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	ea42 0103 	orr.w	r1, r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	430a      	orrs	r2, r1
 800476a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004776:	f023 030f 	bic.w	r3, r3, #15
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6851      	ldr	r1, [r2, #4]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6892      	ldr	r2, [r2, #8]
 8004782:	4311      	orrs	r1, r2
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	68d2      	ldr	r2, [r2, #12]
 8004788:	4311      	orrs	r1, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6992      	ldr	r2, [r2, #24]
 800478e:	430a      	orrs	r2, r1
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800479a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d161      	bne.n	8004868 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a38      	ldr	r2, [pc, #224]	; (8004888 <HAL_I2S_Init+0x274>)
 80047a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a37      	ldr	r2, [pc, #220]	; (800488c <HAL_I2S_Init+0x278>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d101      	bne.n	80047b8 <HAL_I2S_Init+0x1a4>
 80047b4:	4b36      	ldr	r3, [pc, #216]	; (8004890 <HAL_I2S_Init+0x27c>)
 80047b6:	e001      	b.n	80047bc <HAL_I2S_Init+0x1a8>
 80047b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	4932      	ldr	r1, [pc, #200]	; (800488c <HAL_I2S_Init+0x278>)
 80047c4:	428a      	cmp	r2, r1
 80047c6:	d101      	bne.n	80047cc <HAL_I2S_Init+0x1b8>
 80047c8:	4a31      	ldr	r2, [pc, #196]	; (8004890 <HAL_I2S_Init+0x27c>)
 80047ca:	e001      	b.n	80047d0 <HAL_I2S_Init+0x1bc>
 80047cc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80047d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80047d4:	f023 030f 	bic.w	r3, r3, #15
 80047d8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a2b      	ldr	r2, [pc, #172]	; (800488c <HAL_I2S_Init+0x278>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d101      	bne.n	80047e8 <HAL_I2S_Init+0x1d4>
 80047e4:	4b2a      	ldr	r3, [pc, #168]	; (8004890 <HAL_I2S_Init+0x27c>)
 80047e6:	e001      	b.n	80047ec <HAL_I2S_Init+0x1d8>
 80047e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ec:	2202      	movs	r2, #2
 80047ee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a25      	ldr	r2, [pc, #148]	; (800488c <HAL_I2S_Init+0x278>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d101      	bne.n	80047fe <HAL_I2S_Init+0x1ea>
 80047fa:	4b25      	ldr	r3, [pc, #148]	; (8004890 <HAL_I2S_Init+0x27c>)
 80047fc:	e001      	b.n	8004802 <HAL_I2S_Init+0x1ee>
 80047fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800480e:	d003      	beq.n	8004818 <HAL_I2S_Init+0x204>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d103      	bne.n	8004820 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	e001      	b.n	8004824 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004820:	2300      	movs	r3, #0
 8004822:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800482e:	4313      	orrs	r3, r2
 8004830:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004838:	4313      	orrs	r3, r2
 800483a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004842:	4313      	orrs	r3, r2
 8004844:	b29a      	uxth	r2, r3
 8004846:	897b      	ldrh	r3, [r7, #10]
 8004848:	4313      	orrs	r3, r2
 800484a:	b29b      	uxth	r3, r3
 800484c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004850:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a0d      	ldr	r2, [pc, #52]	; (800488c <HAL_I2S_Init+0x278>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d101      	bne.n	8004860 <HAL_I2S_Init+0x24c>
 800485c:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <HAL_I2S_Init+0x27c>)
 800485e:	e001      	b.n	8004864 <HAL_I2S_Init+0x250>
 8004860:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004864:	897a      	ldrh	r2, [r7, #10]
 8004866:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3720      	adds	r7, #32
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	0800498b 	.word	0x0800498b
 8004884:	cccccccd 	.word	0xcccccccd
 8004888:	08004aa1 	.word	0x08004aa1
 800488c:	40003800 	.word	0x40003800
 8004890:	40003400 	.word	0x40003400

08004894 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	881a      	ldrh	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	1c9a      	adds	r2, r3, #2
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10e      	bne.n	8004924 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004914:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff ffb8 	bl	8004894 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004924:	bf00      	nop
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	b292      	uxth	r2, r2
 8004940:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004946:	1c9a      	adds	r2, r3, #2
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10e      	bne.n	8004982 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004972:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ff93 	bl	80048a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b086      	sub	sp, #24
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d13a      	bne.n	8004a1c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d109      	bne.n	80049c4 <I2S_IRQHandler+0x3a>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d102      	bne.n	80049c4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff ffb4 	bl	800492c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	d126      	bne.n	8004a1c <I2S_IRQHandler+0x92>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d11f      	bne.n	8004a1c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80049ec:	2300      	movs	r3, #0
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	f043 0202 	orr.w	r2, r3, #2
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff ff50 	bl	80048bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d136      	bne.n	8004a96 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d109      	bne.n	8004a46 <I2S_IRQHandler+0xbc>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3c:	2b80      	cmp	r3, #128	; 0x80
 8004a3e:	d102      	bne.n	8004a46 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff ff45 	bl	80048d0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d122      	bne.n	8004a96 <I2S_IRQHandler+0x10c>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b20      	cmp	r3, #32
 8004a5c:	d11b      	bne.n	8004a96 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a6c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a88:	f043 0204 	orr.w	r2, r3, #4
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff ff13 	bl	80048bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a96:	bf00      	nop
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4aa2      	ldr	r2, [pc, #648]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d101      	bne.n	8004abe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004aba:	4ba2      	ldr	r3, [pc, #648]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004abc:	e001      	b.n	8004ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004abe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a9b      	ldr	r2, [pc, #620]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d101      	bne.n	8004adc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004ad8:	4b9a      	ldr	r3, [pc, #616]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ada:	e001      	b.n	8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004adc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aec:	d004      	beq.n	8004af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f040 8099 	bne.w	8004c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d107      	bne.n	8004b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f925 	bl	8004d5c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d107      	bne.n	8004b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f9c8 	bl	8004ebc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b32:	2b40      	cmp	r3, #64	; 0x40
 8004b34:	d13a      	bne.n	8004bac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d035      	beq.n	8004bac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a7e      	ldr	r2, [pc, #504]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d101      	bne.n	8004b4e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004b4a:	4b7e      	ldr	r3, [pc, #504]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b4c:	e001      	b.n	8004b52 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004b4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4979      	ldr	r1, [pc, #484]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b5a:	428b      	cmp	r3, r1
 8004b5c:	d101      	bne.n	8004b62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004b5e:	4b79      	ldr	r3, [pc, #484]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b60:	e001      	b.n	8004b66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004b62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b6a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b7a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9e:	f043 0202 	orr.w	r2, r3, #2
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff fe88 	bl	80048bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	f040 80be 	bne.w	8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 80b8 	beq.w	8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bd2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a59      	ldr	r2, [pc, #356]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d101      	bne.n	8004be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004bde:	4b59      	ldr	r3, [pc, #356]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004be0:	e001      	b.n	8004be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004be2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4954      	ldr	r1, [pc, #336]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bee:	428b      	cmp	r3, r1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004bf2:	4b54      	ldr	r3, [pc, #336]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bf4:	e001      	b.n	8004bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004bf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bfe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004c00:	2300      	movs	r3, #0
 8004c02:	60bb      	str	r3, [r7, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	60bb      	str	r3, [r7, #8]
 8004c0c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	f043 0204 	orr.w	r2, r3, #4
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff fe4a 	bl	80048bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c28:	e084      	b.n	8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d107      	bne.n	8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f8be 	bl	8004dc0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d107      	bne.n	8004c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f8fd 	bl	8004e58 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d12f      	bne.n	8004cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d02a      	beq.n	8004cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c80:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a2e      	ldr	r2, [pc, #184]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d101      	bne.n	8004c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004c8c:	4b2d      	ldr	r3, [pc, #180]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c8e:	e001      	b.n	8004c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004c90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4929      	ldr	r1, [pc, #164]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004ca0:	4b28      	ldr	r3, [pc, #160]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ca2:	e001      	b.n	8004ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004ca4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ca8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	f043 0202 	orr.w	r2, r3, #2
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7ff fdfa 	bl	80048bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d131      	bne.n	8004d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d02c      	beq.n	8004d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a17      	ldr	r2, [pc, #92]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d101      	bne.n	8004cea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004ce6:	4b17      	ldr	r3, [pc, #92]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ce8:	e001      	b.n	8004cee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004cea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4912      	ldr	r1, [pc, #72]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cf6:	428b      	cmp	r3, r1
 8004cf8:	d101      	bne.n	8004cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cfc:	e001      	b.n	8004d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004cfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d16:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d24:	f043 0204 	orr.w	r2, r3, #4
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff fdc5 	bl	80048bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d32:	e000      	b.n	8004d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d34:	bf00      	nop
}
 8004d36:	bf00      	nop
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40003800 	.word	0x40003800
 8004d44:	40003400 	.word	0x40003400

08004d48 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	1c99      	adds	r1, r3, #2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6251      	str	r1, [r2, #36]	; 0x24
 8004d6e:	881a      	ldrh	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d113      	bne.n	8004db6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d106      	bne.n	8004db6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ffc9 	bl	8004d48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	1c99      	adds	r1, r3, #2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6251      	str	r1, [r2, #36]	; 0x24
 8004dd2:	8819      	ldrh	r1, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a1d      	ldr	r2, [pc, #116]	; (8004e50 <I2SEx_TxISR_I2SExt+0x90>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d101      	bne.n	8004de2 <I2SEx_TxISR_I2SExt+0x22>
 8004dde:	4b1d      	ldr	r3, [pc, #116]	; (8004e54 <I2SEx_TxISR_I2SExt+0x94>)
 8004de0:	e001      	b.n	8004de6 <I2SEx_TxISR_I2SExt+0x26>
 8004de2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004de6:	460a      	mov	r2, r1
 8004de8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d121      	bne.n	8004e46 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <I2SEx_TxISR_I2SExt+0x90>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d101      	bne.n	8004e10 <I2SEx_TxISR_I2SExt+0x50>
 8004e0c:	4b11      	ldr	r3, [pc, #68]	; (8004e54 <I2SEx_TxISR_I2SExt+0x94>)
 8004e0e:	e001      	b.n	8004e14 <I2SEx_TxISR_I2SExt+0x54>
 8004e10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	490d      	ldr	r1, [pc, #52]	; (8004e50 <I2SEx_TxISR_I2SExt+0x90>)
 8004e1c:	428b      	cmp	r3, r1
 8004e1e:	d101      	bne.n	8004e24 <I2SEx_TxISR_I2SExt+0x64>
 8004e20:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <I2SEx_TxISR_I2SExt+0x94>)
 8004e22:	e001      	b.n	8004e28 <I2SEx_TxISR_I2SExt+0x68>
 8004e24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e2c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff ff81 	bl	8004d48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40003800 	.word	0x40003800
 8004e54:	40003400 	.word	0x40003400

08004e58 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68d8      	ldr	r0, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6a:	1c99      	adds	r1, r3, #2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004e70:	b282      	uxth	r2, r0
 8004e72:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d113      	bne.n	8004eb4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e9a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff ff4a 	bl	8004d48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a20      	ldr	r2, [pc, #128]	; (8004f4c <I2SEx_RxISR_I2SExt+0x90>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d101      	bne.n	8004ed2 <I2SEx_RxISR_I2SExt+0x16>
 8004ece:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <I2SEx_RxISR_I2SExt+0x94>)
 8004ed0:	e001      	b.n	8004ed6 <I2SEx_RxISR_I2SExt+0x1a>
 8004ed2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ed6:	68d8      	ldr	r0, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	1c99      	adds	r1, r3, #2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ee2:	b282      	uxth	r2, r0
 8004ee4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d121      	bne.n	8004f42 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a12      	ldr	r2, [pc, #72]	; (8004f4c <I2SEx_RxISR_I2SExt+0x90>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d101      	bne.n	8004f0c <I2SEx_RxISR_I2SExt+0x50>
 8004f08:	4b11      	ldr	r3, [pc, #68]	; (8004f50 <I2SEx_RxISR_I2SExt+0x94>)
 8004f0a:	e001      	b.n	8004f10 <I2SEx_RxISR_I2SExt+0x54>
 8004f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	490d      	ldr	r1, [pc, #52]	; (8004f4c <I2SEx_RxISR_I2SExt+0x90>)
 8004f18:	428b      	cmp	r3, r1
 8004f1a:	d101      	bne.n	8004f20 <I2SEx_RxISR_I2SExt+0x64>
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <I2SEx_RxISR_I2SExt+0x94>)
 8004f1e:	e001      	b.n	8004f24 <I2SEx_RxISR_I2SExt+0x68>
 8004f20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f28:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ff03 	bl	8004d48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40003800 	.word	0x40003800
 8004f50:	40003400 	.word	0x40003400

08004f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e264      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d075      	beq.n	800505e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f72:	4ba3      	ldr	r3, [pc, #652]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 030c 	and.w	r3, r3, #12
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d00c      	beq.n	8004f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f7e:	4ba0      	ldr	r3, [pc, #640]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d112      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f8a:	4b9d      	ldr	r3, [pc, #628]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f96:	d10b      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f98:	4b99      	ldr	r3, [pc, #612]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d05b      	beq.n	800505c <HAL_RCC_OscConfig+0x108>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d157      	bne.n	800505c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e23f      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb8:	d106      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x74>
 8004fba:	4b91      	ldr	r3, [pc, #580]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a90      	ldr	r2, [pc, #576]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8004fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	e01d      	b.n	8005004 <HAL_RCC_OscConfig+0xb0>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fd0:	d10c      	bne.n	8004fec <HAL_RCC_OscConfig+0x98>
 8004fd2:	4b8b      	ldr	r3, [pc, #556]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a8a      	ldr	r2, [pc, #552]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8004fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	4b88      	ldr	r3, [pc, #544]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a87      	ldr	r2, [pc, #540]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8004fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e00b      	b.n	8005004 <HAL_RCC_OscConfig+0xb0>
 8004fec:	4b84      	ldr	r3, [pc, #528]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a83      	ldr	r2, [pc, #524]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8004ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	4b81      	ldr	r3, [pc, #516]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a80      	ldr	r2, [pc, #512]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8004ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d013      	beq.n	8005034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500c:	f7fc fade 	bl	80015cc <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005014:	f7fc fada 	bl	80015cc <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b64      	cmp	r3, #100	; 0x64
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e204      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005026:	4b76      	ldr	r3, [pc, #472]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0xc0>
 8005032:	e014      	b.n	800505e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005034:	f7fc faca 	bl	80015cc <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800503c:	f7fc fac6 	bl	80015cc <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b64      	cmp	r3, #100	; 0x64
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e1f0      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800504e:	4b6c      	ldr	r3, [pc, #432]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0xe8>
 800505a:	e000      	b.n	800505e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800505c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d063      	beq.n	8005132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800506a:	4b65      	ldr	r3, [pc, #404]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 030c 	and.w	r3, r3, #12
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005076:	4b62      	ldr	r3, [pc, #392]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800507e:	2b08      	cmp	r3, #8
 8005080:	d11c      	bne.n	80050bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005082:	4b5f      	ldr	r3, [pc, #380]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d116      	bne.n	80050bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800508e:	4b5c      	ldr	r3, [pc, #368]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d005      	beq.n	80050a6 <HAL_RCC_OscConfig+0x152>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d001      	beq.n	80050a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e1c4      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a6:	4b56      	ldr	r3, [pc, #344]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4952      	ldr	r1, [pc, #328]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ba:	e03a      	b.n	8005132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d020      	beq.n	8005106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050c4:	4b4f      	ldr	r3, [pc, #316]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ca:	f7fc fa7f 	bl	80015cc <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050d2:	f7fc fa7b 	bl	80015cc <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e1a5      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e4:	4b46      	ldr	r3, [pc, #280]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f0:	4b43      	ldr	r3, [pc, #268]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	4940      	ldr	r1, [pc, #256]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8005100:	4313      	orrs	r3, r2
 8005102:	600b      	str	r3, [r1, #0]
 8005104:	e015      	b.n	8005132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005106:	4b3f      	ldr	r3, [pc, #252]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fc fa5e 	bl	80015cc <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005114:	f7fc fa5a 	bl	80015cc <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e184      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005126:	4b36      	ldr	r3, [pc, #216]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f0      	bne.n	8005114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d030      	beq.n	80051a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d016      	beq.n	8005174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005146:	4b30      	ldr	r3, [pc, #192]	; (8005208 <HAL_RCC_OscConfig+0x2b4>)
 8005148:	2201      	movs	r2, #1
 800514a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fc fa3e 	bl	80015cc <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005154:	f7fc fa3a 	bl	80015cc <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e164      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005166:	4b26      	ldr	r3, [pc, #152]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8005168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0x200>
 8005172:	e015      	b.n	80051a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005174:	4b24      	ldr	r3, [pc, #144]	; (8005208 <HAL_RCC_OscConfig+0x2b4>)
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800517a:	f7fc fa27 	bl	80015cc <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005182:	f7fc fa23 	bl	80015cc <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e14d      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005194:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8005196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1f0      	bne.n	8005182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 80a0 	beq.w	80052ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ae:	2300      	movs	r3, #0
 80051b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051b2:	4b13      	ldr	r3, [pc, #76]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10f      	bne.n	80051de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051be:	2300      	movs	r3, #0
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	4a0e      	ldr	r2, [pc, #56]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 80051c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051cc:	6413      	str	r3, [r2, #64]	; 0x40
 80051ce:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d6:	60bb      	str	r3, [r7, #8]
 80051d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051da:	2301      	movs	r3, #1
 80051dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051de:	4b0b      	ldr	r3, [pc, #44]	; (800520c <HAL_RCC_OscConfig+0x2b8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d121      	bne.n	800522e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ea:	4b08      	ldr	r3, [pc, #32]	; (800520c <HAL_RCC_OscConfig+0x2b8>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a07      	ldr	r2, [pc, #28]	; (800520c <HAL_RCC_OscConfig+0x2b8>)
 80051f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051f6:	f7fc f9e9 	bl	80015cc <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051fc:	e011      	b.n	8005222 <HAL_RCC_OscConfig+0x2ce>
 80051fe:	bf00      	nop
 8005200:	40023800 	.word	0x40023800
 8005204:	42470000 	.word	0x42470000
 8005208:	42470e80 	.word	0x42470e80
 800520c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005210:	f7fc f9dc 	bl	80015cc <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e106      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005222:	4b85      	ldr	r3, [pc, #532]	; (8005438 <HAL_RCC_OscConfig+0x4e4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d106      	bne.n	8005244 <HAL_RCC_OscConfig+0x2f0>
 8005236:	4b81      	ldr	r3, [pc, #516]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 8005238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523a:	4a80      	ldr	r2, [pc, #512]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	6713      	str	r3, [r2, #112]	; 0x70
 8005242:	e01c      	b.n	800527e <HAL_RCC_OscConfig+0x32a>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b05      	cmp	r3, #5
 800524a:	d10c      	bne.n	8005266 <HAL_RCC_OscConfig+0x312>
 800524c:	4b7b      	ldr	r3, [pc, #492]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 800524e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005250:	4a7a      	ldr	r2, [pc, #488]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 8005252:	f043 0304 	orr.w	r3, r3, #4
 8005256:	6713      	str	r3, [r2, #112]	; 0x70
 8005258:	4b78      	ldr	r3, [pc, #480]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 800525a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525c:	4a77      	ldr	r2, [pc, #476]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 800525e:	f043 0301 	orr.w	r3, r3, #1
 8005262:	6713      	str	r3, [r2, #112]	; 0x70
 8005264:	e00b      	b.n	800527e <HAL_RCC_OscConfig+0x32a>
 8005266:	4b75      	ldr	r3, [pc, #468]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 8005268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526a:	4a74      	ldr	r2, [pc, #464]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 800526c:	f023 0301 	bic.w	r3, r3, #1
 8005270:	6713      	str	r3, [r2, #112]	; 0x70
 8005272:	4b72      	ldr	r3, [pc, #456]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	4a71      	ldr	r2, [pc, #452]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 8005278:	f023 0304 	bic.w	r3, r3, #4
 800527c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d015      	beq.n	80052b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005286:	f7fc f9a1 	bl	80015cc <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528c:	e00a      	b.n	80052a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800528e:	f7fc f99d 	bl	80015cc <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	f241 3288 	movw	r2, #5000	; 0x1388
 800529c:	4293      	cmp	r3, r2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e0c5      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a4:	4b65      	ldr	r3, [pc, #404]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0ee      	beq.n	800528e <HAL_RCC_OscConfig+0x33a>
 80052b0:	e014      	b.n	80052dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b2:	f7fc f98b 	bl	80015cc <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b8:	e00a      	b.n	80052d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ba:	f7fc f987 	bl	80015cc <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e0af      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052d0:	4b5a      	ldr	r3, [pc, #360]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 80052d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1ee      	bne.n	80052ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052dc:	7dfb      	ldrb	r3, [r7, #23]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d105      	bne.n	80052ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052e2:	4b56      	ldr	r3, [pc, #344]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	4a55      	ldr	r2, [pc, #340]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 80052e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 809b 	beq.w	800542e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052f8:	4b50      	ldr	r3, [pc, #320]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 030c 	and.w	r3, r3, #12
 8005300:	2b08      	cmp	r3, #8
 8005302:	d05c      	beq.n	80053be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	2b02      	cmp	r3, #2
 800530a:	d141      	bne.n	8005390 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800530c:	4b4c      	ldr	r3, [pc, #304]	; (8005440 <HAL_RCC_OscConfig+0x4ec>)
 800530e:	2200      	movs	r2, #0
 8005310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005312:	f7fc f95b 	bl	80015cc <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800531a:	f7fc f957 	bl	80015cc <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e081      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800532c:	4b43      	ldr	r3, [pc, #268]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1f0      	bne.n	800531a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	019b      	lsls	r3, r3, #6
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	3b01      	subs	r3, #1
 8005352:	041b      	lsls	r3, r3, #16
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	061b      	lsls	r3, r3, #24
 800535c:	4937      	ldr	r1, [pc, #220]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 800535e:	4313      	orrs	r3, r2
 8005360:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005362:	4b37      	ldr	r3, [pc, #220]	; (8005440 <HAL_RCC_OscConfig+0x4ec>)
 8005364:	2201      	movs	r2, #1
 8005366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005368:	f7fc f930 	bl	80015cc <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005370:	f7fc f92c 	bl	80015cc <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e056      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005382:	4b2e      	ldr	r3, [pc, #184]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCC_OscConfig+0x41c>
 800538e:	e04e      	b.n	800542e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005390:	4b2b      	ldr	r3, [pc, #172]	; (8005440 <HAL_RCC_OscConfig+0x4ec>)
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005396:	f7fc f919 	bl	80015cc <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800539e:	f7fc f915 	bl	80015cc <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e03f      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b0:	4b22      	ldr	r3, [pc, #136]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1f0      	bne.n	800539e <HAL_RCC_OscConfig+0x44a>
 80053bc:	e037      	b.n	800542e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e032      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053ca:	4b1c      	ldr	r3, [pc, #112]	; (800543c <HAL_RCC_OscConfig+0x4e8>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d028      	beq.n	800542a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d121      	bne.n	800542a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d11a      	bne.n	800542a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053fa:	4013      	ands	r3, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005400:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005402:	4293      	cmp	r3, r2
 8005404:	d111      	bne.n	800542a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	085b      	lsrs	r3, r3, #1
 8005412:	3b01      	subs	r3, #1
 8005414:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005416:	429a      	cmp	r2, r3
 8005418:	d107      	bne.n	800542a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005426:	429a      	cmp	r2, r3
 8005428:	d001      	beq.n	800542e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40007000 	.word	0x40007000
 800543c:	40023800 	.word	0x40023800
 8005440:	42470060 	.word	0x42470060

08005444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e0cc      	b.n	80055f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005458:	4b68      	ldr	r3, [pc, #416]	; (80055fc <HAL_RCC_ClockConfig+0x1b8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d90c      	bls.n	8005480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005466:	4b65      	ldr	r3, [pc, #404]	; (80055fc <HAL_RCC_ClockConfig+0x1b8>)
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800546e:	4b63      	ldr	r3, [pc, #396]	; (80055fc <HAL_RCC_ClockConfig+0x1b8>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d001      	beq.n	8005480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0b8      	b.n	80055f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d020      	beq.n	80054ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b00      	cmp	r3, #0
 8005496:	d005      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005498:	4b59      	ldr	r3, [pc, #356]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	4a58      	ldr	r2, [pc, #352]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0308 	and.w	r3, r3, #8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054b0:	4b53      	ldr	r3, [pc, #332]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	4a52      	ldr	r2, [pc, #328]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 80054b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054bc:	4b50      	ldr	r3, [pc, #320]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	494d      	ldr	r1, [pc, #308]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d044      	beq.n	8005564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d107      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e2:	4b47      	ldr	r3, [pc, #284]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d119      	bne.n	8005522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e07f      	b.n	80055f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d003      	beq.n	8005502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d107      	bne.n	8005512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005502:	4b3f      	ldr	r3, [pc, #252]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e06f      	b.n	80055f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005512:	4b3b      	ldr	r3, [pc, #236]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e067      	b.n	80055f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005522:	4b37      	ldr	r3, [pc, #220]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f023 0203 	bic.w	r2, r3, #3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	4934      	ldr	r1, [pc, #208]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 8005530:	4313      	orrs	r3, r2
 8005532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005534:	f7fc f84a 	bl	80015cc <HAL_GetTick>
 8005538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553a:	e00a      	b.n	8005552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800553c:	f7fc f846 	bl	80015cc <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	f241 3288 	movw	r2, #5000	; 0x1388
 800554a:	4293      	cmp	r3, r2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e04f      	b.n	80055f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005552:	4b2b      	ldr	r3, [pc, #172]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 020c 	and.w	r2, r3, #12
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	429a      	cmp	r2, r3
 8005562:	d1eb      	bne.n	800553c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005564:	4b25      	ldr	r3, [pc, #148]	; (80055fc <HAL_RCC_ClockConfig+0x1b8>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d20c      	bcs.n	800558c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005572:	4b22      	ldr	r3, [pc, #136]	; (80055fc <HAL_RCC_ClockConfig+0x1b8>)
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800557a:	4b20      	ldr	r3, [pc, #128]	; (80055fc <HAL_RCC_ClockConfig+0x1b8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d001      	beq.n	800558c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e032      	b.n	80055f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d008      	beq.n	80055aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005598:	4b19      	ldr	r3, [pc, #100]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	4916      	ldr	r1, [pc, #88]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d009      	beq.n	80055ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055b6:	4b12      	ldr	r3, [pc, #72]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	490e      	ldr	r1, [pc, #56]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055ca:	f000 f821 	bl	8005610 <HAL_RCC_GetSysClockFreq>
 80055ce:	4602      	mov	r2, r0
 80055d0:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	091b      	lsrs	r3, r3, #4
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	490a      	ldr	r1, [pc, #40]	; (8005604 <HAL_RCC_ClockConfig+0x1c0>)
 80055dc:	5ccb      	ldrb	r3, [r1, r3]
 80055de:	fa22 f303 	lsr.w	r3, r2, r3
 80055e2:	4a09      	ldr	r2, [pc, #36]	; (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 80055e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055e6:	4b09      	ldr	r3, [pc, #36]	; (800560c <HAL_RCC_ClockConfig+0x1c8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fb ffaa 	bl	8001544 <HAL_InitTick>

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40023c00 	.word	0x40023c00
 8005600:	40023800 	.word	0x40023800
 8005604:	080099a0 	.word	0x080099a0
 8005608:	20000004 	.word	0x20000004
 800560c:	20000008 	.word	0x20000008

08005610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005610:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005614:	b084      	sub	sp, #16
 8005616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	607b      	str	r3, [r7, #4]
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	2300      	movs	r3, #0
 8005622:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005628:	4b67      	ldr	r3, [pc, #412]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 030c 	and.w	r3, r3, #12
 8005630:	2b08      	cmp	r3, #8
 8005632:	d00d      	beq.n	8005650 <HAL_RCC_GetSysClockFreq+0x40>
 8005634:	2b08      	cmp	r3, #8
 8005636:	f200 80bd 	bhi.w	80057b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_RCC_GetSysClockFreq+0x34>
 800563e:	2b04      	cmp	r3, #4
 8005640:	d003      	beq.n	800564a <HAL_RCC_GetSysClockFreq+0x3a>
 8005642:	e0b7      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005644:	4b61      	ldr	r3, [pc, #388]	; (80057cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005646:	60bb      	str	r3, [r7, #8]
       break;
 8005648:	e0b7      	b.n	80057ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800564a:	4b61      	ldr	r3, [pc, #388]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800564c:	60bb      	str	r3, [r7, #8]
      break;
 800564e:	e0b4      	b.n	80057ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005650:	4b5d      	ldr	r3, [pc, #372]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005658:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800565a:	4b5b      	ldr	r3, [pc, #364]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d04d      	beq.n	8005702 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005666:	4b58      	ldr	r3, [pc, #352]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	099b      	lsrs	r3, r3, #6
 800566c:	461a      	mov	r2, r3
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005676:	f04f 0100 	mov.w	r1, #0
 800567a:	ea02 0800 	and.w	r8, r2, r0
 800567e:	ea03 0901 	and.w	r9, r3, r1
 8005682:	4640      	mov	r0, r8
 8005684:	4649      	mov	r1, r9
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	014b      	lsls	r3, r1, #5
 8005690:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005694:	0142      	lsls	r2, r0, #5
 8005696:	4610      	mov	r0, r2
 8005698:	4619      	mov	r1, r3
 800569a:	ebb0 0008 	subs.w	r0, r0, r8
 800569e:	eb61 0109 	sbc.w	r1, r1, r9
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	018b      	lsls	r3, r1, #6
 80056ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80056b0:	0182      	lsls	r2, r0, #6
 80056b2:	1a12      	subs	r2, r2, r0
 80056b4:	eb63 0301 	sbc.w	r3, r3, r1
 80056b8:	f04f 0000 	mov.w	r0, #0
 80056bc:	f04f 0100 	mov.w	r1, #0
 80056c0:	00d9      	lsls	r1, r3, #3
 80056c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056c6:	00d0      	lsls	r0, r2, #3
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	eb12 0208 	adds.w	r2, r2, r8
 80056d0:	eb43 0309 	adc.w	r3, r3, r9
 80056d4:	f04f 0000 	mov.w	r0, #0
 80056d8:	f04f 0100 	mov.w	r1, #0
 80056dc:	0259      	lsls	r1, r3, #9
 80056de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80056e2:	0250      	lsls	r0, r2, #9
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4610      	mov	r0, r2
 80056ea:	4619      	mov	r1, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	f7fa fd68 	bl	80001c8 <__aeabi_uldivmod>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4613      	mov	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	e04a      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005702:	4b31      	ldr	r3, [pc, #196]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	099b      	lsrs	r3, r3, #6
 8005708:	461a      	mov	r2, r3
 800570a:	f04f 0300 	mov.w	r3, #0
 800570e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005712:	f04f 0100 	mov.w	r1, #0
 8005716:	ea02 0400 	and.w	r4, r2, r0
 800571a:	ea03 0501 	and.w	r5, r3, r1
 800571e:	4620      	mov	r0, r4
 8005720:	4629      	mov	r1, r5
 8005722:	f04f 0200 	mov.w	r2, #0
 8005726:	f04f 0300 	mov.w	r3, #0
 800572a:	014b      	lsls	r3, r1, #5
 800572c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005730:	0142      	lsls	r2, r0, #5
 8005732:	4610      	mov	r0, r2
 8005734:	4619      	mov	r1, r3
 8005736:	1b00      	subs	r0, r0, r4
 8005738:	eb61 0105 	sbc.w	r1, r1, r5
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	018b      	lsls	r3, r1, #6
 8005746:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800574a:	0182      	lsls	r2, r0, #6
 800574c:	1a12      	subs	r2, r2, r0
 800574e:	eb63 0301 	sbc.w	r3, r3, r1
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f04f 0100 	mov.w	r1, #0
 800575a:	00d9      	lsls	r1, r3, #3
 800575c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005760:	00d0      	lsls	r0, r2, #3
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	1912      	adds	r2, r2, r4
 8005768:	eb45 0303 	adc.w	r3, r5, r3
 800576c:	f04f 0000 	mov.w	r0, #0
 8005770:	f04f 0100 	mov.w	r1, #0
 8005774:	0299      	lsls	r1, r3, #10
 8005776:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800577a:	0290      	lsls	r0, r2, #10
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4610      	mov	r0, r2
 8005782:	4619      	mov	r1, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	461a      	mov	r2, r3
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	f7fa fd1c 	bl	80001c8 <__aeabi_uldivmod>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4613      	mov	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005798:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	3301      	adds	r3, #1
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b0:	60bb      	str	r3, [r7, #8]
      break;
 80057b2:	e002      	b.n	80057ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80057b6:	60bb      	str	r3, [r7, #8]
      break;
 80057b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ba:	68bb      	ldr	r3, [r7, #8]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80057c6:	bf00      	nop
 80057c8:	40023800 	.word	0x40023800
 80057cc:	00f42400 	.word	0x00f42400
 80057d0:	007a1200 	.word	0x007a1200

080057d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057d8:	4b03      	ldr	r3, [pc, #12]	; (80057e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057da:	681b      	ldr	r3, [r3, #0]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	20000004 	.word	0x20000004

080057ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057f0:	f7ff fff0 	bl	80057d4 <HAL_RCC_GetHCLKFreq>
 80057f4:	4602      	mov	r2, r0
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <HAL_RCC_GetPCLK1Freq+0x20>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	0a9b      	lsrs	r3, r3, #10
 80057fc:	f003 0307 	and.w	r3, r3, #7
 8005800:	4903      	ldr	r1, [pc, #12]	; (8005810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005802:	5ccb      	ldrb	r3, [r1, r3]
 8005804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005808:	4618      	mov	r0, r3
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40023800 	.word	0x40023800
 8005810:	080099b0 	.word	0x080099b0

08005814 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d105      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005838:	2b00      	cmp	r3, #0
 800583a:	d035      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800583c:	4b62      	ldr	r3, [pc, #392]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005842:	f7fb fec3 	bl	80015cc <HAL_GetTick>
 8005846:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005848:	e008      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800584a:	f7fb febf 	bl	80015cc <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d901      	bls.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e0b0      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800585c:	4b5b      	ldr	r3, [pc, #364]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1f0      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	019a      	lsls	r2, r3, #6
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	071b      	lsls	r3, r3, #28
 8005874:	4955      	ldr	r1, [pc, #340]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800587c:	4b52      	ldr	r3, [pc, #328]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800587e:	2201      	movs	r2, #1
 8005880:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005882:	f7fb fea3 	bl	80015cc <HAL_GetTick>
 8005886:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005888:	e008      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800588a:	f7fb fe9f 	bl	80015cc <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e090      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800589c:	4b4b      	ldr	r3, [pc, #300]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0f0      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8083 	beq.w	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	4b44      	ldr	r3, [pc, #272]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	4a43      	ldr	r2, [pc, #268]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c4:	6413      	str	r3, [r2, #64]	; 0x40
 80058c6:	4b41      	ldr	r3, [pc, #260]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058d2:	4b3f      	ldr	r3, [pc, #252]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a3e      	ldr	r2, [pc, #248]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058de:	f7fb fe75 	bl	80015cc <HAL_GetTick>
 80058e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058e4:	e008      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058e6:	f7fb fe71 	bl	80015cc <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e062      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058f8:	4b35      	ldr	r3, [pc, #212]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0f0      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005904:	4b31      	ldr	r3, [pc, #196]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d02f      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	429a      	cmp	r2, r3
 8005920:	d028      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005922:	4b2a      	ldr	r3, [pc, #168]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800592a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800592c:	4b29      	ldr	r3, [pc, #164]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005932:	4b28      	ldr	r3, [pc, #160]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005938:	4a24      	ldr	r2, [pc, #144]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800593e:	4b23      	ldr	r3, [pc, #140]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b01      	cmp	r3, #1
 8005948:	d114      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800594a:	f7fb fe3f 	bl	80015cc <HAL_GetTick>
 800594e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005950:	e00a      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005952:	f7fb fe3b 	bl	80015cc <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005960:	4293      	cmp	r3, r2
 8005962:	d901      	bls.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e02a      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005968:	4b18      	ldr	r3, [pc, #96]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0ee      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005980:	d10d      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005982:	4b12      	ldr	r3, [pc, #72]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005996:	490d      	ldr	r1, [pc, #52]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005998:	4313      	orrs	r3, r2
 800599a:	608b      	str	r3, [r1, #8]
 800599c:	e005      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800599e:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	4a0a      	ldr	r2, [pc, #40]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059a8:	6093      	str	r3, [r2, #8]
 80059aa:	4b08      	ldr	r3, [pc, #32]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b6:	4905      	ldr	r1, [pc, #20]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	42470068 	.word	0x42470068
 80059cc:	40023800 	.word	0x40023800
 80059d0:	40007000 	.word	0x40007000
 80059d4:	42470e40 	.word	0x42470e40

080059d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d13e      	bne.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80059f6:	4b23      	ldr	r3, [pc, #140]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d12f      	bne.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a0c:	4b1e      	ldr	r3, [pc, #120]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a0e:	617b      	str	r3, [r7, #20]
          break;
 8005a10:	e02f      	b.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a12:	4b1c      	ldr	r3, [pc, #112]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a1e:	d108      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a20:	4b18      	ldr	r3, [pc, #96]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a28:	4a18      	ldr	r2, [pc, #96]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2e:	613b      	str	r3, [r7, #16]
 8005a30:	e007      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a32:	4b14      	ldr	r3, [pc, #80]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a3a:	4a15      	ldr	r2, [pc, #84]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a40:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a42:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a48:	099b      	lsrs	r3, r3, #6
 8005a4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	fb02 f303 	mul.w	r3, r2, r3
 8005a54:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005a56:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a5c:	0f1b      	lsrs	r3, r3, #28
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a68:	617b      	str	r3, [r7, #20]
          break;
 8005a6a:	e002      	b.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]
          break;
 8005a70:	bf00      	nop
        }
      }
      break;
 8005a72:	bf00      	nop
    }
  }
  return frequency;
 8005a74:	697b      	ldr	r3, [r7, #20]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	371c      	adds	r7, #28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40023800 	.word	0x40023800
 8005a88:	00bb8000 	.word	0x00bb8000
 8005a8c:	007a1200 	.word	0x007a1200
 8005a90:	00f42400 	.word	0x00f42400

08005a94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e07b      	b.n	8005b9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d108      	bne.n	8005ac0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ab6:	d009      	beq.n	8005acc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	61da      	str	r2, [r3, #28]
 8005abe:	e005      	b.n	8005acc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d106      	bne.n	8005aec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fb fbec 	bl	80012c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b50:	ea42 0103 	orr.w	r1, r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	0c1b      	lsrs	r3, r3, #16
 8005b6a:	f003 0104 	and.w	r1, r3, #4
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	f003 0210 	and.w	r2, r3, #16
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e041      	b.n	8005c3c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d106      	bne.n	8005bd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7fb fbc1 	bl	8001354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3304      	adds	r3, #4
 8005be2:	4619      	mov	r1, r3
 8005be4:	4610      	mov	r0, r2
 8005be6:	f000 fa91 	bl	800610c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d001      	beq.n	8005c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e04e      	b.n	8005cfa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a23      	ldr	r2, [pc, #140]	; (8005d08 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d022      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0x80>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c86:	d01d      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0x80>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1f      	ldr	r2, [pc, #124]	; (8005d0c <HAL_TIM_Base_Start_IT+0xc8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d018      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0x80>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1e      	ldr	r2, [pc, #120]	; (8005d10 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d013      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0x80>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1c      	ldr	r2, [pc, #112]	; (8005d14 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00e      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0x80>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1b      	ldr	r2, [pc, #108]	; (8005d18 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d009      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0x80>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a19      	ldr	r2, [pc, #100]	; (8005d1c <HAL_TIM_Base_Start_IT+0xd8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d004      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0x80>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a18      	ldr	r2, [pc, #96]	; (8005d20 <HAL_TIM_Base_Start_IT+0xdc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d111      	bne.n	8005ce8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b06      	cmp	r3, #6
 8005cd4:	d010      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0201 	orr.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce6:	e007      	b.n	8005cf8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0201 	orr.w	r2, r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40010000 	.word	0x40010000
 8005d0c:	40000400 	.word	0x40000400
 8005d10:	40000800 	.word	0x40000800
 8005d14:	40000c00 	.word	0x40000c00
 8005d18:	40010400 	.word	0x40010400
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	40001800 	.word	0x40001800

08005d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d122      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d11b      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f06f 0202 	mvn.w	r2, #2
 8005d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f9b2 	bl	80060d0 <HAL_TIM_IC_CaptureCallback>
 8005d6c:	e005      	b.n	8005d7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f9a4 	bl	80060bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f9b5 	bl	80060e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d122      	bne.n	8005dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d11b      	bne.n	8005dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f06f 0204 	mvn.w	r2, #4
 8005da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2202      	movs	r2, #2
 8005daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f988 	bl	80060d0 <HAL_TIM_IC_CaptureCallback>
 8005dc0:	e005      	b.n	8005dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f97a 	bl	80060bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f98b 	bl	80060e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d122      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f003 0308 	and.w	r3, r3, #8
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d11b      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f06f 0208 	mvn.w	r2, #8
 8005df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2204      	movs	r2, #4
 8005dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f95e 	bl	80060d0 <HAL_TIM_IC_CaptureCallback>
 8005e14:	e005      	b.n	8005e22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f950 	bl	80060bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f961 	bl	80060e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f003 0310 	and.w	r3, r3, #16
 8005e32:	2b10      	cmp	r3, #16
 8005e34:	d122      	bne.n	8005e7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f003 0310 	and.w	r3, r3, #16
 8005e40:	2b10      	cmp	r3, #16
 8005e42:	d11b      	bne.n	8005e7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f06f 0210 	mvn.w	r2, #16
 8005e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2208      	movs	r2, #8
 8005e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f934 	bl	80060d0 <HAL_TIM_IC_CaptureCallback>
 8005e68:	e005      	b.n	8005e76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f926 	bl	80060bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f937 	bl	80060e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d10e      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d107      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0201 	mvn.w	r2, #1
 8005ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fa fb0c 	bl	80004c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb2:	2b80      	cmp	r3, #128	; 0x80
 8005eb4:	d10e      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec0:	2b80      	cmp	r3, #128	; 0x80
 8005ec2:	d107      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fadc 	bl	800648c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ede:	2b40      	cmp	r3, #64	; 0x40
 8005ee0:	d10e      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	d107      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f8fc 	bl	80060f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d10e      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f003 0320 	and.w	r3, r3, #32
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d107      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0220 	mvn.w	r2, #32
 8005f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 faa6 	bl	8006478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f2c:	bf00      	nop
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <HAL_TIM_ConfigClockSource+0x18>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e0b3      	b.n	80060b4 <HAL_TIM_ConfigClockSource+0x180>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f84:	d03e      	beq.n	8006004 <HAL_TIM_ConfigClockSource+0xd0>
 8005f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f8a:	f200 8087 	bhi.w	800609c <HAL_TIM_ConfigClockSource+0x168>
 8005f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f92:	f000 8085 	beq.w	80060a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f9a:	d87f      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x168>
 8005f9c:	2b70      	cmp	r3, #112	; 0x70
 8005f9e:	d01a      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0xa2>
 8005fa0:	2b70      	cmp	r3, #112	; 0x70
 8005fa2:	d87b      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x168>
 8005fa4:	2b60      	cmp	r3, #96	; 0x60
 8005fa6:	d050      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x116>
 8005fa8:	2b60      	cmp	r3, #96	; 0x60
 8005faa:	d877      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x168>
 8005fac:	2b50      	cmp	r3, #80	; 0x50
 8005fae:	d03c      	beq.n	800602a <HAL_TIM_ConfigClockSource+0xf6>
 8005fb0:	2b50      	cmp	r3, #80	; 0x50
 8005fb2:	d873      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x168>
 8005fb4:	2b40      	cmp	r3, #64	; 0x40
 8005fb6:	d058      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x136>
 8005fb8:	2b40      	cmp	r3, #64	; 0x40
 8005fba:	d86f      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x168>
 8005fbc:	2b30      	cmp	r3, #48	; 0x30
 8005fbe:	d064      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x156>
 8005fc0:	2b30      	cmp	r3, #48	; 0x30
 8005fc2:	d86b      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x168>
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d060      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x156>
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d867      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x168>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d05c      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x156>
 8005fd0:	2b10      	cmp	r3, #16
 8005fd2:	d05a      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005fd4:	e062      	b.n	800609c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6899      	ldr	r1, [r3, #8]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f000 f9ab 	bl	8006340 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ff8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	609a      	str	r2, [r3, #8]
      break;
 8006002:	e04e      	b.n	80060a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	6899      	ldr	r1, [r3, #8]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f000 f994 	bl	8006340 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006026:	609a      	str	r2, [r3, #8]
      break;
 8006028:	e03b      	b.n	80060a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6859      	ldr	r1, [r3, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	461a      	mov	r2, r3
 8006038:	f000 f908 	bl	800624c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2150      	movs	r1, #80	; 0x50
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f961 	bl	800630a <TIM_ITRx_SetConfig>
      break;
 8006048:	e02b      	b.n	80060a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6818      	ldr	r0, [r3, #0]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	6859      	ldr	r1, [r3, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	461a      	mov	r2, r3
 8006058:	f000 f927 	bl	80062aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2160      	movs	r1, #96	; 0x60
 8006062:	4618      	mov	r0, r3
 8006064:	f000 f951 	bl	800630a <TIM_ITRx_SetConfig>
      break;
 8006068:	e01b      	b.n	80060a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	6859      	ldr	r1, [r3, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	461a      	mov	r2, r3
 8006078:	f000 f8e8 	bl	800624c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2140      	movs	r1, #64	; 0x40
 8006082:	4618      	mov	r0, r3
 8006084:	f000 f941 	bl	800630a <TIM_ITRx_SetConfig>
      break;
 8006088:	e00b      	b.n	80060a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4619      	mov	r1, r3
 8006094:	4610      	mov	r0, r2
 8006096:	f000 f938 	bl	800630a <TIM_ITRx_SetConfig>
        break;
 800609a:	e002      	b.n	80060a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800609c:	bf00      	nop
 800609e:	e000      	b.n	80060a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80060a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a40      	ldr	r2, [pc, #256]	; (8006220 <TIM_Base_SetConfig+0x114>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d013      	beq.n	800614c <TIM_Base_SetConfig+0x40>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612a:	d00f      	beq.n	800614c <TIM_Base_SetConfig+0x40>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a3d      	ldr	r2, [pc, #244]	; (8006224 <TIM_Base_SetConfig+0x118>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00b      	beq.n	800614c <TIM_Base_SetConfig+0x40>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a3c      	ldr	r2, [pc, #240]	; (8006228 <TIM_Base_SetConfig+0x11c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d007      	beq.n	800614c <TIM_Base_SetConfig+0x40>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a3b      	ldr	r2, [pc, #236]	; (800622c <TIM_Base_SetConfig+0x120>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d003      	beq.n	800614c <TIM_Base_SetConfig+0x40>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a3a      	ldr	r2, [pc, #232]	; (8006230 <TIM_Base_SetConfig+0x124>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d108      	bne.n	800615e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a2f      	ldr	r2, [pc, #188]	; (8006220 <TIM_Base_SetConfig+0x114>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d02b      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616c:	d027      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a2c      	ldr	r2, [pc, #176]	; (8006224 <TIM_Base_SetConfig+0x118>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d023      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a2b      	ldr	r2, [pc, #172]	; (8006228 <TIM_Base_SetConfig+0x11c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d01f      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a2a      	ldr	r2, [pc, #168]	; (800622c <TIM_Base_SetConfig+0x120>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d01b      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a29      	ldr	r2, [pc, #164]	; (8006230 <TIM_Base_SetConfig+0x124>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d017      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a28      	ldr	r2, [pc, #160]	; (8006234 <TIM_Base_SetConfig+0x128>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d013      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a27      	ldr	r2, [pc, #156]	; (8006238 <TIM_Base_SetConfig+0x12c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00f      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a26      	ldr	r2, [pc, #152]	; (800623c <TIM_Base_SetConfig+0x130>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00b      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a25      	ldr	r2, [pc, #148]	; (8006240 <TIM_Base_SetConfig+0x134>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d007      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a24      	ldr	r2, [pc, #144]	; (8006244 <TIM_Base_SetConfig+0x138>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d003      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a23      	ldr	r2, [pc, #140]	; (8006248 <TIM_Base_SetConfig+0x13c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d108      	bne.n	80061d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a0a      	ldr	r2, [pc, #40]	; (8006220 <TIM_Base_SetConfig+0x114>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d003      	beq.n	8006204 <TIM_Base_SetConfig+0xf8>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a0c      	ldr	r2, [pc, #48]	; (8006230 <TIM_Base_SetConfig+0x124>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d103      	bne.n	800620c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	615a      	str	r2, [r3, #20]
}
 8006212:	bf00      	nop
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	40010000 	.word	0x40010000
 8006224:	40000400 	.word	0x40000400
 8006228:	40000800 	.word	0x40000800
 800622c:	40000c00 	.word	0x40000c00
 8006230:	40010400 	.word	0x40010400
 8006234:	40014000 	.word	0x40014000
 8006238:	40014400 	.word	0x40014400
 800623c:	40014800 	.word	0x40014800
 8006240:	40001800 	.word	0x40001800
 8006244:	40001c00 	.word	0x40001c00
 8006248:	40002000 	.word	0x40002000

0800624c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	f023 0201 	bic.w	r2, r3, #1
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f023 030a 	bic.w	r3, r3, #10
 8006288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	621a      	str	r2, [r3, #32]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b087      	sub	sp, #28
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f023 0210 	bic.w	r2, r3, #16
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	031b      	lsls	r3, r3, #12
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	4313      	orrs	r3, r2
 80062de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	621a      	str	r2, [r3, #32]
}
 80062fe:	bf00      	nop
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800630a:	b480      	push	{r7}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006320:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	f043 0307 	orr.w	r3, r3, #7
 800632c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	609a      	str	r2, [r3, #8]
}
 8006334:	bf00      	nop
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800635a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	021a      	lsls	r2, r3, #8
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	431a      	orrs	r2, r3
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4313      	orrs	r3, r2
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	609a      	str	r2, [r3, #8]
}
 8006374:	bf00      	nop
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006394:	2302      	movs	r3, #2
 8006396:	e05a      	b.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a21      	ldr	r2, [pc, #132]	; (800645c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d022      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e4:	d01d      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a1d      	ldr	r2, [pc, #116]	; (8006460 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d018      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a1b      	ldr	r2, [pc, #108]	; (8006464 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a1a      	ldr	r2, [pc, #104]	; (8006468 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00e      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a18      	ldr	r2, [pc, #96]	; (800646c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d009      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a17      	ldr	r2, [pc, #92]	; (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d004      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a15      	ldr	r2, [pc, #84]	; (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d10c      	bne.n	800643c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006428:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	4313      	orrs	r3, r2
 8006432:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	40010000 	.word	0x40010000
 8006460:	40000400 	.word	0x40000400
 8006464:	40000800 	.word	0x40000800
 8006468:	40000c00 	.word	0x40000c00
 800646c:	40010400 	.word	0x40010400
 8006470:	40014000 	.word	0x40014000
 8006474:	40001800 	.word	0x40001800

08006478 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064a0:	b084      	sub	sp, #16
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	f107 001c 	add.w	r0, r7, #28
 80064ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d122      	bne.n	80064fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80064cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d105      	bne.n	80064f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f94a 	bl	800678c <USB_CoreReset>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]
 80064fc:	e01a      	b.n	8006534 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f93e 	bl	800678c <USB_CoreReset>
 8006510:	4603      	mov	r3, r0
 8006512:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	d106      	bne.n	8006528 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	639a      	str	r2, [r3, #56]	; 0x38
 8006526:	e005      	b.n	8006534 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	2b01      	cmp	r3, #1
 8006538:	d10b      	bne.n	8006552 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f043 0206 	orr.w	r2, r3, #6
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f043 0220 	orr.w	r2, r3, #32
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006552:	7bfb      	ldrb	r3, [r7, #15]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800655e:	b004      	add	sp, #16
 8006560:	4770      	bx	lr

08006562 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f043 0201 	orr.w	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f023 0201 	bic.w	r2, r3, #1
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	460b      	mov	r3, r1
 80065b0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065be:	78fb      	ldrb	r3, [r7, #3]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d106      	bne.n	80065d2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	60da      	str	r2, [r3, #12]
 80065d0:	e00b      	b.n	80065ea <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80065d2:	78fb      	ldrb	r3, [r7, #3]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60da      	str	r2, [r3, #12]
 80065e4:	e001      	b.n	80065ea <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e003      	b.n	80065f2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80065ea:	2032      	movs	r0, #50	; 0x32
 80065ec:	f7fa fffa 	bl	80015e4 <HAL_Delay>

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	019b      	lsls	r3, r3, #6
 800660e:	f043 0220 	orr.w	r2, r3, #32
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3301      	adds	r3, #1
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4a09      	ldr	r2, [pc, #36]	; (8006644 <USB_FlushTxFifo+0x48>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d901      	bls.n	8006628 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e006      	b.n	8006636 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f003 0320 	and.w	r3, r3, #32
 8006630:	2b20      	cmp	r3, #32
 8006632:	d0f0      	beq.n	8006616 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	00030d40 	.word	0x00030d40

08006648 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2210      	movs	r2, #16
 8006658:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3301      	adds	r3, #1
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4a09      	ldr	r2, [pc, #36]	; (8006688 <USB_FlushRxFifo+0x40>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d901      	bls.n	800666c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e006      	b.n	800667a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f003 0310 	and.w	r3, r3, #16
 8006674:	2b10      	cmp	r3, #16
 8006676:	d0f0      	beq.n	800665a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	00030d40 	.word	0x00030d40

0800668c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800668c:	b480      	push	{r7}
 800668e:	b089      	sub	sp, #36	; 0x24
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	4611      	mov	r1, r2
 8006698:	461a      	mov	r2, r3
 800669a:	460b      	mov	r3, r1
 800669c:	71fb      	strb	r3, [r7, #7]
 800669e:	4613      	mov	r3, r2
 80066a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80066aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d11a      	bne.n	80066e8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066b2:	88bb      	ldrh	r3, [r7, #4]
 80066b4:	3303      	adds	r3, #3
 80066b6:	089b      	lsrs	r3, r3, #2
 80066b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066ba:	2300      	movs	r3, #0
 80066bc:	61bb      	str	r3, [r7, #24]
 80066be:	e00f      	b.n	80066e0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	031a      	lsls	r2, r3, #12
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066cc:	461a      	mov	r2, r3
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	3304      	adds	r3, #4
 80066d8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	3301      	adds	r3, #1
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d3eb      	bcc.n	80066c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3724      	adds	r7, #36	; 0x24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b089      	sub	sp, #36	; 0x24
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	4613      	mov	r3, r2
 8006702:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	3303      	adds	r3, #3
 8006710:	089b      	lsrs	r3, r3, #2
 8006712:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006714:	2300      	movs	r3, #0
 8006716:	61bb      	str	r3, [r7, #24]
 8006718:	e00b      	b.n	8006732 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	601a      	str	r2, [r3, #0]
    pDest++;
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	3304      	adds	r3, #4
 800672a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	3301      	adds	r3, #1
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	429a      	cmp	r2, r3
 8006738:	d3ef      	bcc.n	800671a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800673a:	69fb      	ldr	r3, [r7, #28]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3724      	adds	r7, #36	; 0x24
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4013      	ands	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006760:	68fb      	ldr	r3, [r7, #12]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f003 0301 	and.w	r3, r3, #1
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
	...

0800678c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3301      	adds	r3, #1
 800679c:	60fb      	str	r3, [r7, #12]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4a13      	ldr	r2, [pc, #76]	; (80067f0 <USB_CoreReset+0x64>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d901      	bls.n	80067aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e01b      	b.n	80067e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	daf2      	bge.n	8006798 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f043 0201 	orr.w	r2, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3301      	adds	r3, #1
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4a09      	ldr	r2, [pc, #36]	; (80067f0 <USB_CoreReset+0x64>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d901      	bls.n	80067d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e006      	b.n	80067e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d0f0      	beq.n	80067c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	00030d40 	.word	0x00030d40

080067f4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067f4:	b084      	sub	sp, #16
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	f107 001c 	add.w	r0, r7, #28
 8006802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006810:	461a      	mov	r2, r3
 8006812:	2300      	movs	r3, #0
 8006814:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006826:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006832:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006842:	2b00      	cmp	r3, #0
 8006844:	d018      	beq.n	8006878 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	2b01      	cmp	r3, #1
 800684a:	d10a      	bne.n	8006862 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800685a:	f043 0304 	orr.w	r3, r3, #4
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	e014      	b.n	800688c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006870:	f023 0304 	bic.w	r3, r3, #4
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	e009      	b.n	800688c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006886:	f023 0304 	bic.w	r3, r3, #4
 800688a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800688c:	2110      	movs	r1, #16
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7ff feb4 	bl	80065fc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff fed7 	bl	8006648 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	e015      	b.n	80068cc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ac:	461a      	mov	r2, r3
 80068ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068b2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c0:	461a      	mov	r2, r3
 80068c2:	2300      	movs	r3, #0
 80068c4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	3301      	adds	r3, #1
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d3e5      	bcc.n	80068a0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80068d4:	2101      	movs	r1, #1
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f8ac 	bl	8006a34 <USB_DriveVbus>

  HAL_Delay(200U);
 80068dc:	20c8      	movs	r0, #200	; 0xc8
 80068de:	f7fa fe81 	bl	80015e4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068ee:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00b      	beq.n	8006914 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006902:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a14      	ldr	r2, [pc, #80]	; (8006958 <USB_HostInit+0x164>)
 8006908:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a13      	ldr	r2, [pc, #76]	; (800695c <USB_HostInit+0x168>)
 800690e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006912:	e009      	b.n	8006928 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2280      	movs	r2, #128	; 0x80
 8006918:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a10      	ldr	r2, [pc, #64]	; (8006960 <USB_HostInit+0x16c>)
 800691e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a10      	ldr	r2, [pc, #64]	; (8006964 <USB_HostInit+0x170>)
 8006924:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	2b00      	cmp	r3, #0
 800692c:	d105      	bne.n	800693a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	f043 0210 	orr.w	r2, r3, #16
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	4b0a      	ldr	r3, [pc, #40]	; (8006968 <USB_HostInit+0x174>)
 8006940:	4313      	orrs	r3, r2
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006952:	b004      	add	sp, #16
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	01000200 	.word	0x01000200
 800695c:	00e00300 	.word	0x00e00300
 8006960:	00600080 	.word	0x00600080
 8006964:	004000e0 	.word	0x004000e0
 8006968:	a3200008 	.word	0xa3200008

0800696c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	460b      	mov	r3, r1
 8006976:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800698a:	f023 0303 	bic.w	r3, r3, #3
 800698e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	68f9      	ldr	r1, [r7, #12]
 80069a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80069a4:	4313      	orrs	r3, r2
 80069a6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d107      	bne.n	80069be <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069b4:	461a      	mov	r2, r3
 80069b6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80069ba:	6053      	str	r3, [r2, #4]
 80069bc:	e009      	b.n	80069d2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80069be:	78fb      	ldrb	r3, [r7, #3]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d106      	bne.n	80069d2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ca:	461a      	mov	r2, r3
 80069cc:	f241 7370 	movw	r3, #6000	; 0x1770
 80069d0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a0e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006a10:	2064      	movs	r0, #100	; 0x64
 8006a12:	f7fa fde7 	bl	80015e4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a22:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006a24:	200a      	movs	r0, #10
 8006a26:	f7fa fddd 	bl	80015e4 <HAL_Delay>

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a58:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d109      	bne.n	8006a78 <USB_DriveVbus+0x44>
 8006a64:	78fb      	ldrb	r3, [r7, #3]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d106      	bne.n	8006a78 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a76:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a82:	d109      	bne.n	8006a98 <USB_DriveVbus+0x64>
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a96:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b085      	sub	sp, #20
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	0c5b      	lsrs	r3, r3, #17
 8006ac4:	f003 0303 	and.w	r3, r3, #3
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	b29b      	uxth	r3, r3
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
	...

08006af8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b088      	sub	sp, #32
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	4608      	mov	r0, r1
 8006b02:	4611      	mov	r1, r2
 8006b04:	461a      	mov	r2, r3
 8006b06:	4603      	mov	r3, r0
 8006b08:	70fb      	strb	r3, [r7, #3]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	70bb      	strb	r3, [r7, #2]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b26:	461a      	mov	r2, r3
 8006b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b2c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006b2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d87e      	bhi.n	8006c34 <USB_HC_Init+0x13c>
 8006b36:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <USB_HC_Init+0x44>)
 8006b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3c:	08006b4d 	.word	0x08006b4d
 8006b40:	08006bf7 	.word	0x08006bf7
 8006b44:	08006b4d 	.word	0x08006b4d
 8006b48:	08006bb9 	.word	0x08006bb9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b58:	461a      	mov	r2, r3
 8006b5a:	f240 439d 	movw	r3, #1181	; 0x49d
 8006b5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006b60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	da10      	bge.n	8006b8a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	78fa      	ldrb	r2, [r7, #3]
 8006b78:	0151      	lsls	r1, r2, #5
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	440a      	add	r2, r1
 8006b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b86:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006b88:	e057      	b.n	8006c3a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d051      	beq.n	8006c3a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006b96:	78fb      	ldrb	r3, [r7, #3]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	78fa      	ldrb	r2, [r7, #3]
 8006ba6:	0151      	lsls	r1, r2, #5
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	440a      	add	r2, r1
 8006bac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bb0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006bb4:	60d3      	str	r3, [r2, #12]
      break;
 8006bb6:	e040      	b.n	8006c3a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f240 639d 	movw	r3, #1693	; 0x69d
 8006bca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006bcc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	da34      	bge.n	8006c3e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	78fa      	ldrb	r2, [r7, #3]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006bf4:	e023      	b.n	8006c3e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c02:	461a      	mov	r2, r3
 8006c04:	f240 2325 	movw	r3, #549	; 0x225
 8006c08:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c0a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	da17      	bge.n	8006c42 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006c12:	78fb      	ldrb	r3, [r7, #3]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	78fa      	ldrb	r2, [r7, #3]
 8006c22:	0151      	lsls	r1, r2, #5
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	440a      	add	r2, r1
 8006c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c2c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006c30:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006c32:	e006      	b.n	8006c42 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	77fb      	strb	r3, [r7, #31]
      break;
 8006c38:	e004      	b.n	8006c44 <USB_HC_Init+0x14c>
      break;
 8006c3a:	bf00      	nop
 8006c3c:	e002      	b.n	8006c44 <USB_HC_Init+0x14c>
      break;
 8006c3e:	bf00      	nop
 8006c40:	e000      	b.n	8006c44 <USB_HC_Init+0x14c>
      break;
 8006c42:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c4a:	699a      	ldr	r2, [r3, #24]
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	f003 030f 	and.w	r3, r3, #15
 8006c52:	2101      	movs	r1, #1
 8006c54:	fa01 f303 	lsl.w	r3, r1, r3
 8006c58:	6939      	ldr	r1, [r7, #16]
 8006c5a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006c6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	da03      	bge.n	8006c7e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c7a:	61bb      	str	r3, [r7, #24]
 8006c7c:	e001      	b.n	8006c82 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff ff0f 	bl	8006aa6 <USB_GetHostSpeed>
 8006c88:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006c8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d106      	bne.n	8006ca0 <USB_HC_Init+0x1a8>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d003      	beq.n	8006ca0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006c98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c9c:	617b      	str	r3, [r7, #20]
 8006c9e:	e001      	b.n	8006ca4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ca4:	787b      	ldrb	r3, [r7, #1]
 8006ca6:	059b      	lsls	r3, r3, #22
 8006ca8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006cac:	78bb      	ldrb	r3, [r7, #2]
 8006cae:	02db      	lsls	r3, r3, #11
 8006cb0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006cb4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006cb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006cba:	049b      	lsls	r3, r3, #18
 8006cbc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006cc0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006cc2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006cc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006cc8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006cce:	78fb      	ldrb	r3, [r7, #3]
 8006cd0:	0159      	lsls	r1, r3, #5
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	440b      	add	r3, r1
 8006cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cda:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ce0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006ce2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d10f      	bne.n	8006d0a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	78fa      	ldrb	r2, [r7, #3]
 8006cfa:	0151      	lsls	r1, r2, #5
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	440a      	add	r2, r1
 8006d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d08:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006d0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3720      	adds	r7, #32
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08c      	sub	sp, #48	; 0x30
 8006d18:	af02      	add	r7, sp, #8
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	785b      	ldrb	r3, [r3, #1]
 8006d2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d30:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d02d      	beq.n	8006d9a <USB_HC_StartXfer+0x86>
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	791b      	ldrb	r3, [r3, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d129      	bne.n	8006d9a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006d46:	79fb      	ldrb	r3, [r7, #7]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d117      	bne.n	8006d7c <USB_HC_StartXfer+0x68>
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	79db      	ldrb	r3, [r3, #7]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <USB_HC_StartXfer+0x48>
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	79db      	ldrb	r3, [r3, #7]
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d10f      	bne.n	8006d7c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	0151      	lsls	r1, r2, #5
 8006d6e:	6a3a      	ldr	r2, [r7, #32]
 8006d70:	440a      	add	r2, r1
 8006d72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006d7c:	79fb      	ldrb	r3, [r7, #7]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10b      	bne.n	8006d9a <USB_HC_StartXfer+0x86>
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	795b      	ldrb	r3, [r3, #5]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d107      	bne.n	8006d9a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 fa2f 	bl	80071f4 <USB_DoPing>
      return HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	e0f8      	b.n	8006f8c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d018      	beq.n	8006dd4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	8912      	ldrh	r2, [r2, #8]
 8006daa:	4413      	add	r3, r2
 8006dac:	3b01      	subs	r3, #1
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	8912      	ldrh	r2, [r2, #8]
 8006db2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006db6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006db8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006dba:	8b7b      	ldrh	r3, [r7, #26]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d90b      	bls.n	8006dd8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006dc0:	8b7b      	ldrh	r3, [r7, #26]
 8006dc2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006dc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	8912      	ldrh	r2, [r2, #8]
 8006dca:	fb02 f203 	mul.w	r2, r2, r3
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	611a      	str	r2, [r3, #16]
 8006dd2:	e001      	b.n	8006dd8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	78db      	ldrb	r3, [r3, #3]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d007      	beq.n	8006df0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006de0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	8912      	ldrh	r2, [r2, #8]
 8006de6:	fb02 f203 	mul.w	r2, r2, r3
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	611a      	str	r2, [r3, #16]
 8006dee:	e003      	b.n	8006df8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	695a      	ldr	r2, [r3, #20]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e02:	04d9      	lsls	r1, r3, #19
 8006e04:	4b63      	ldr	r3, [pc, #396]	; (8006f94 <USB_HC_StartXfer+0x280>)
 8006e06:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e08:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	7a9b      	ldrb	r3, [r3, #10]
 8006e0e:	075b      	lsls	r3, r3, #29
 8006e10:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e14:	69f9      	ldr	r1, [r7, #28]
 8006e16:	0148      	lsls	r0, r1, #5
 8006e18:	6a39      	ldr	r1, [r7, #32]
 8006e1a:	4401      	add	r1, r0
 8006e1c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e20:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e22:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006e24:	79fb      	ldrb	r3, [r7, #7]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d009      	beq.n	8006e3e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	68d9      	ldr	r1, [r3, #12]
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e3a:	460a      	mov	r2, r1
 8006e3c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	bf0c      	ite	eq
 8006e4e:	2301      	moveq	r3, #1
 8006e50:	2300      	movne	r3, #0
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	0151      	lsls	r1, r2, #5
 8006e68:	6a3a      	ldr	r2, [r7, #32]
 8006e6a:	440a      	add	r2, r1
 8006e6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e74:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	7e7b      	ldrb	r3, [r7, #25]
 8006e86:	075b      	lsls	r3, r3, #29
 8006e88:	69f9      	ldr	r1, [r7, #28]
 8006e8a:	0148      	lsls	r0, r1, #5
 8006e8c:	6a39      	ldr	r1, [r7, #32]
 8006e8e:	4401      	add	r1, r0
 8006e90:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006e94:	4313      	orrs	r3, r2
 8006e96:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006eae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	78db      	ldrb	r3, [r3, #3]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d004      	beq.n	8006ec2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	e003      	b.n	8006eca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ec8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ed0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ede:	461a      	mov	r2, r3
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	e04e      	b.n	8006f8c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	78db      	ldrb	r3, [r3, #3]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d149      	bne.n	8006f8a <USB_HC_StartXfer+0x276>
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d045      	beq.n	8006f8a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	79db      	ldrb	r3, [r3, #7]
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d830      	bhi.n	8006f68 <USB_HC_StartXfer+0x254>
 8006f06:	a201      	add	r2, pc, #4	; (adr r2, 8006f0c <USB_HC_StartXfer+0x1f8>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f1d 	.word	0x08006f1d
 8006f10:	08006f41 	.word	0x08006f41
 8006f14:	08006f1d 	.word	0x08006f1d
 8006f18:	08006f41 	.word	0x08006f41
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	3303      	adds	r3, #3
 8006f22:	089b      	lsrs	r3, r3, #2
 8006f24:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006f26:	8afa      	ldrh	r2, [r7, #22]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d91c      	bls.n	8006f6c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	f043 0220 	orr.w	r2, r3, #32
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006f3e:	e015      	b.n	8006f6c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	3303      	adds	r3, #3
 8006f46:	089b      	lsrs	r3, r3, #2
 8006f48:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006f4a:	8afa      	ldrh	r2, [r7, #22]
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d90a      	bls.n	8006f70 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	619a      	str	r2, [r3, #24]
        }
        break;
 8006f66:	e003      	b.n	8006f70 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006f68:	bf00      	nop
 8006f6a:	e002      	b.n	8006f72 <USB_HC_StartXfer+0x25e>
        break;
 8006f6c:	bf00      	nop
 8006f6e:	e000      	b.n	8006f72 <USB_HC_StartXfer+0x25e>
        break;
 8006f70:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	68d9      	ldr	r1, [r3, #12]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	785a      	ldrb	r2, [r3, #1]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	2000      	movs	r0, #0
 8006f82:	9000      	str	r0, [sp, #0]
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f7ff fb81 	bl	800668c <USB_WritePacket>
  }

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3728      	adds	r7, #40	; 0x28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	1ff80000 	.word	0x1ff80000

08006f98 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	b29b      	uxth	r3, r3
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b089      	sub	sp, #36	; 0x24
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006fca:	78fb      	ldrb	r3, [r7, #3]
 8006fcc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	0c9b      	lsrs	r3, r3, #18
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	0fdb      	lsrs	r3, r3, #31
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 0320 	and.w	r3, r3, #32
 8007006:	2b20      	cmp	r3, #32
 8007008:	d104      	bne.n	8007014 <USB_HC_Halt+0x5a>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007010:	2300      	movs	r3, #0
 8007012:	e0e8      	b.n	80071e6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <USB_HC_Halt+0x66>
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2b02      	cmp	r3, #2
 800701e:	d173      	bne.n	8007108 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	4413      	add	r3, r2
 8007028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	0151      	lsls	r1, r2, #5
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	440a      	add	r2, r1
 8007036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800703a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800703e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 0320 	and.w	r3, r3, #32
 8007048:	2b00      	cmp	r3, #0
 800704a:	f040 80cb 	bne.w	80071e4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007052:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d143      	bne.n	80070e2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	4413      	add	r3, r2
 8007062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	0151      	lsls	r1, r2, #5
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	440a      	add	r2, r1
 8007070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007078:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	4413      	add	r3, r2
 8007082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	0151      	lsls	r1, r2, #5
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	440a      	add	r2, r1
 8007090:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007094:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007098:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	0151      	lsls	r1, r2, #5
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	440a      	add	r2, r1
 80070b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070b8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	3301      	adds	r3, #1
 80070be:	61fb      	str	r3, [r7, #28]
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070c6:	d81d      	bhi.n	8007104 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070de:	d0ec      	beq.n	80070ba <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070e0:	e080      	b.n	80071e4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	0151      	lsls	r1, r2, #5
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	440a      	add	r2, r1
 80070f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007100:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007102:	e06f      	b.n	80071e4 <USB_HC_Halt+0x22a>
            break;
 8007104:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007106:	e06d      	b.n	80071e4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	4413      	add	r3, r2
 8007110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	0151      	lsls	r1, r2, #5
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	440a      	add	r2, r1
 800711e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007122:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007126:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d143      	bne.n	80071c0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	4413      	add	r3, r2
 8007140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	0151      	lsls	r1, r2, #5
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	440a      	add	r2, r1
 800714e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007152:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007156:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	4413      	add	r3, r2
 8007160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	0151      	lsls	r1, r2, #5
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	440a      	add	r2, r1
 800716e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007176:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	4413      	add	r3, r2
 8007180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	0151      	lsls	r1, r2, #5
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	440a      	add	r2, r1
 800718e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007192:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007196:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	3301      	adds	r3, #1
 800719c:	61fb      	str	r3, [r7, #28]
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071a4:	d81d      	bhi.n	80071e2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071bc:	d0ec      	beq.n	8007198 <USB_HC_Halt+0x1de>
 80071be:	e011      	b.n	80071e4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	0151      	lsls	r1, r2, #5
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	440a      	add	r2, r1
 80071d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	e000      	b.n	80071e4 <USB_HC_Halt+0x22a>
          break;
 80071e2:	bf00      	nop
    }
  }

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3724      	adds	r7, #36	; 0x24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
	...

080071f4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007208:	2301      	movs	r3, #1
 800720a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	04da      	lsls	r2, r3, #19
 8007210:	4b15      	ldr	r3, [pc, #84]	; (8007268 <USB_DoPing+0x74>)
 8007212:	4013      	ands	r3, r2
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	0151      	lsls	r1, r2, #5
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	440a      	add	r2, r1
 800721c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007224:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	4413      	add	r3, r2
 800722e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800723c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007244:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	4413      	add	r3, r2
 800724e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007252:	461a      	mov	r2, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	371c      	adds	r7, #28
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	1ff80000 	.word	0x1ff80000

0800726c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7ff f981 	bl	8006584 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007282:	2110      	movs	r1, #16
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7ff f9b9 	bl	80065fc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff f9dc 	bl	8006648 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007290:	2300      	movs	r3, #0
 8007292:	613b      	str	r3, [r7, #16]
 8007294:	e01f      	b.n	80072d6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4413      	add	r3, r2
 800729e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072bc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ca:	461a      	mov	r2, r3
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	3301      	adds	r3, #1
 80072d4:	613b      	str	r3, [r7, #16]
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	2b0f      	cmp	r3, #15
 80072da:	d9dc      	bls.n	8007296 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80072dc:	2300      	movs	r3, #0
 80072de:	613b      	str	r3, [r7, #16]
 80072e0:	e034      	b.n	800734c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007300:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007308:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4413      	add	r3, r2
 8007312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007316:	461a      	mov	r2, r3
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	3301      	adds	r3, #1
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007328:	d80c      	bhi.n	8007344 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	4413      	add	r3, r2
 8007332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800733c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007340:	d0ec      	beq.n	800731c <USB_StopHost+0xb0>
 8007342:	e000      	b.n	8007346 <USB_StopHost+0xda>
        break;
 8007344:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	3301      	adds	r3, #1
 800734a:	613b      	str	r3, [r7, #16]
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	2b0f      	cmp	r3, #15
 8007350:	d9c7      	bls.n	80072e2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007358:	461a      	mov	r2, r3
 800735a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800735e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007366:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff f8fa 	bl	8006562 <USB_EnableGlobalInt>

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3718      	adds	r7, #24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007378:	b590      	push	{r4, r7, lr}
 800737a:	b089      	sub	sp, #36	; 0x24
 800737c:	af04      	add	r7, sp, #16
 800737e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007380:	2301      	movs	r3, #1
 8007382:	2202      	movs	r2, #2
 8007384:	2102      	movs	r1, #2
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fc66 	bl	8007c58 <USBH_FindInterface>
 800738c:	4603      	mov	r3, r0
 800738e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	2bff      	cmp	r3, #255	; 0xff
 8007394:	d002      	beq.n	800739c <USBH_CDC_InterfaceInit+0x24>
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d901      	bls.n	80073a0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800739c:	2302      	movs	r3, #2
 800739e:	e13d      	b.n	800761c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fc3b 	bl	8007c20 <USBH_SelectInterface>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80073b4:	2302      	movs	r3, #2
 80073b6:	e131      	b.n	800761c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80073be:	2050      	movs	r0, #80	; 0x50
 80073c0:	f002 fa00 	bl	80097c4 <malloc>
 80073c4:	4603      	mov	r3, r0
 80073c6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073ce:	69db      	ldr	r3, [r3, #28]
 80073d0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80073d8:	2302      	movs	r3, #2
 80073da:	e11f      	b.n	800761c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80073dc:	2250      	movs	r2, #80	; 0x50
 80073de:	2100      	movs	r1, #0
 80073e0:	68b8      	ldr	r0, [r7, #8]
 80073e2:	f002 f9ff 	bl	80097e4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	211a      	movs	r1, #26
 80073ec:	fb01 f303 	mul.w	r3, r1, r3
 80073f0:	4413      	add	r3, r2
 80073f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	b25b      	sxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	da15      	bge.n	800742a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	211a      	movs	r1, #26
 8007404:	fb01 f303 	mul.w	r3, r1, r3
 8007408:	4413      	add	r3, r2
 800740a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800740e:	781a      	ldrb	r2, [r3, #0]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	211a      	movs	r1, #26
 800741a:	fb01 f303 	mul.w	r3, r1, r3
 800741e:	4413      	add	r3, r2
 8007420:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007424:	881a      	ldrh	r2, [r3, #0]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	785b      	ldrb	r3, [r3, #1]
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f001 fe32 	bl	800909a <USBH_AllocPipe>
 8007436:	4603      	mov	r3, r0
 8007438:	461a      	mov	r2, r3
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	7819      	ldrb	r1, [r3, #0]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	7858      	ldrb	r0, [r3, #1]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	8952      	ldrh	r2, [r2, #10]
 8007456:	9202      	str	r2, [sp, #8]
 8007458:	2203      	movs	r2, #3
 800745a:	9201      	str	r2, [sp, #4]
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	4623      	mov	r3, r4
 8007460:	4602      	mov	r2, r0
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 fdea 	bl	800903c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2200      	movs	r2, #0
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f002 f8f9 	bl	8009668 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007476:	2300      	movs	r3, #0
 8007478:	2200      	movs	r2, #0
 800747a:	210a      	movs	r1, #10
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fbeb 	bl	8007c58 <USBH_FindInterface>
 8007482:	4603      	mov	r3, r0
 8007484:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	2bff      	cmp	r3, #255	; 0xff
 800748a:	d002      	beq.n	8007492 <USBH_CDC_InterfaceInit+0x11a>
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d901      	bls.n	8007496 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007492:	2302      	movs	r3, #2
 8007494:	e0c2      	b.n	800761c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	211a      	movs	r1, #26
 800749c:	fb01 f303 	mul.w	r3, r1, r3
 80074a0:	4413      	add	r3, r2
 80074a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	b25b      	sxtb	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	da16      	bge.n	80074dc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	211a      	movs	r1, #26
 80074b4:	fb01 f303 	mul.w	r3, r1, r3
 80074b8:	4413      	add	r3, r2
 80074ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074be:	781a      	ldrb	r2, [r3, #0]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	211a      	movs	r1, #26
 80074ca:	fb01 f303 	mul.w	r3, r1, r3
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80074d4:	881a      	ldrh	r2, [r3, #0]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	835a      	strh	r2, [r3, #26]
 80074da:	e015      	b.n	8007508 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	211a      	movs	r1, #26
 80074e2:	fb01 f303 	mul.w	r3, r1, r3
 80074e6:	4413      	add	r3, r2
 80074e8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074ec:	781a      	ldrb	r2, [r3, #0]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	211a      	movs	r1, #26
 80074f8:	fb01 f303 	mul.w	r3, r1, r3
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007502:	881a      	ldrh	r2, [r3, #0]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	211a      	movs	r1, #26
 800750e:	fb01 f303 	mul.w	r3, r1, r3
 8007512:	4413      	add	r3, r2
 8007514:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	b25b      	sxtb	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	da16      	bge.n	800754e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	211a      	movs	r1, #26
 8007526:	fb01 f303 	mul.w	r3, r1, r3
 800752a:	4413      	add	r3, r2
 800752c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007530:	781a      	ldrb	r2, [r3, #0]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	211a      	movs	r1, #26
 800753c:	fb01 f303 	mul.w	r3, r1, r3
 8007540:	4413      	add	r3, r2
 8007542:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007546:	881a      	ldrh	r2, [r3, #0]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	835a      	strh	r2, [r3, #26]
 800754c:	e015      	b.n	800757a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800754e:	7bfb      	ldrb	r3, [r7, #15]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	211a      	movs	r1, #26
 8007554:	fb01 f303 	mul.w	r3, r1, r3
 8007558:	4413      	add	r3, r2
 800755a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	211a      	movs	r1, #26
 800756a:	fb01 f303 	mul.w	r3, r1, r3
 800756e:	4413      	add	r3, r2
 8007570:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007574:	881a      	ldrh	r2, [r3, #0]
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	7b9b      	ldrb	r3, [r3, #14]
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 fd8a 	bl	800909a <USBH_AllocPipe>
 8007586:	4603      	mov	r3, r0
 8007588:	461a      	mov	r2, r3
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	7bdb      	ldrb	r3, [r3, #15]
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 fd80 	bl	800909a <USBH_AllocPipe>
 800759a:	4603      	mov	r3, r0
 800759c:	461a      	mov	r2, r3
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	7b59      	ldrb	r1, [r3, #13]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	7b98      	ldrb	r0, [r3, #14]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	8b12      	ldrh	r2, [r2, #24]
 80075ba:	9202      	str	r2, [sp, #8]
 80075bc:	2202      	movs	r2, #2
 80075be:	9201      	str	r2, [sp, #4]
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	4623      	mov	r3, r4
 80075c4:	4602      	mov	r2, r0
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 fd38 	bl	800903c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	7b19      	ldrb	r1, [r3, #12]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	7bd8      	ldrb	r0, [r3, #15]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	8b52      	ldrh	r2, [r2, #26]
 80075e4:	9202      	str	r2, [sp, #8]
 80075e6:	2202      	movs	r2, #2
 80075e8:	9201      	str	r2, [sp, #4]
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	4623      	mov	r3, r4
 80075ee:	4602      	mov	r2, r0
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 fd23 	bl	800903c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	7b5b      	ldrb	r3, [r3, #13]
 8007602:	2200      	movs	r2, #0
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f002 f82e 	bl	8009668 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	7b1b      	ldrb	r3, [r3, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f002 f827 	bl	8009668 <USBH_LL_SetToggle>

  return USBH_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	bd90      	pop	{r4, r7, pc}

08007624 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00e      	beq.n	800765c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 fd18 	bl	800907a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 fd43 	bl	80090dc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	7b1b      	ldrb	r3, [r3, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00e      	beq.n	8007682 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	7b1b      	ldrb	r3, [r3, #12]
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 fd05 	bl	800907a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	7b1b      	ldrb	r3, [r3, #12]
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f001 fd30 	bl	80090dc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	7b5b      	ldrb	r3, [r3, #13]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00e      	beq.n	80076a8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	7b5b      	ldrb	r3, [r3, #13]
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 fcf2 	bl	800907a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	7b5b      	ldrb	r3, [r3, #13]
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 fd1d 	bl	80090dc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00b      	beq.n	80076cc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ba:	69db      	ldr	r3, [r3, #28]
 80076bc:	4618      	mov	r0, r3
 80076be:	f002 f889 	bl	80097d4 <free>
    phost->pActiveClass->pData = 0U;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076c8:	2200      	movs	r2, #0
 80076ca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3340      	adds	r3, #64	; 0x40
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f8b1 	bl	8007856 <GetLineCoding>
 80076f4:	4603      	mov	r3, r0
 80076f6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80076f8:	7afb      	ldrb	r3, [r7, #11]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d105      	bne.n	800770a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007704:	2102      	movs	r1, #2
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800770a:	7afb      	ldrb	r3, [r7, #11]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800771c:	2301      	movs	r3, #1
 800771e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800772a:	69db      	ldr	r3, [r3, #28]
 800772c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007734:	2b04      	cmp	r3, #4
 8007736:	d877      	bhi.n	8007828 <USBH_CDC_Process+0x114>
 8007738:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <USBH_CDC_Process+0x2c>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007755 	.word	0x08007755
 8007744:	0800775b 	.word	0x0800775b
 8007748:	0800778b 	.word	0x0800778b
 800774c:	080077ff 	.word	0x080077ff
 8007750:	0800780d 	.word	0x0800780d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	73fb      	strb	r3, [r7, #15]
      break;
 8007758:	e06d      	b.n	8007836 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f897 	bl	8007894 <SetLineCoding>
 8007766:	4603      	mov	r3, r0
 8007768:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800776a:	7bbb      	ldrb	r3, [r7, #14]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d104      	bne.n	800777a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007778:	e058      	b.n	800782c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800777a:	7bbb      	ldrb	r3, [r7, #14]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d055      	beq.n	800782c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2204      	movs	r2, #4
 8007784:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007788:	e050      	b.n	800782c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	3340      	adds	r3, #64	; 0x40
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f860 	bl	8007856 <GetLineCoding>
 8007796:	4603      	mov	r3, r0
 8007798:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d126      	bne.n	80077ee <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b2:	791b      	ldrb	r3, [r3, #4]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d13b      	bne.n	8007830 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d133      	bne.n	8007830 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d12b      	bne.n	8007830 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d124      	bne.n	8007830 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f958 	bl	8007a9c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80077ec:	e020      	b.n	8007830 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80077ee:	7bbb      	ldrb	r3, [r7, #14]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d01d      	beq.n	8007830 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2204      	movs	r2, #4
 80077f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80077fc:	e018      	b.n	8007830 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f867 	bl	80078d2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f8da 	bl	80079be <CDC_ProcessReception>
      break;
 800780a:	e014      	b.n	8007836 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800780c:	2100      	movs	r1, #0
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 ffe3 	bl	80087da <USBH_ClrFeature>
 8007814:	4603      	mov	r3, r0
 8007816:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10a      	bne.n	8007834 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007826:	e005      	b.n	8007834 <USBH_CDC_Process+0x120>

    default:
      break;
 8007828:	bf00      	nop
 800782a:	e004      	b.n	8007836 <USBH_CDC_Process+0x122>
      break;
 800782c:	bf00      	nop
 800782e:	e002      	b.n	8007836 <USBH_CDC_Process+0x122>
      break;
 8007830:	bf00      	nop
 8007832:	e000      	b.n	8007836 <USBH_CDC_Process+0x122>
      break;
 8007834:	bf00      	nop

  }

  return status;
 8007836:	7bfb      	ldrb	r3, [r7, #15]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	22a1      	movs	r2, #161	; 0xa1
 8007864:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2221      	movs	r2, #33	; 0x21
 800786a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2207      	movs	r2, #7
 800787c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2207      	movs	r2, #7
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 f988 	bl	8008b9a <USBH_CtlReq>
 800788a:	4603      	mov	r3, r0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2221      	movs	r2, #33	; 0x21
 80078a2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2220      	movs	r2, #32
 80078a8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2207      	movs	r2, #7
 80078ba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2207      	movs	r2, #7
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f001 f969 	bl	8008b9a <USBH_CtlReq>
 80078c8:	4603      	mov	r3, r0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b086      	sub	sp, #24
 80078d6:	af02      	add	r7, sp, #8
 80078d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078e4:	2300      	movs	r3, #0
 80078e6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d002      	beq.n	80078f8 <CDC_ProcessTransmission+0x26>
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d023      	beq.n	800793e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80078f6:	e05e      	b.n	80079b6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	8b12      	ldrh	r2, [r2, #24]
 8007900:	4293      	cmp	r3, r2
 8007902:	d90b      	bls.n	800791c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	69d9      	ldr	r1, [r3, #28]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8b1a      	ldrh	r2, [r3, #24]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	7b5b      	ldrb	r3, [r3, #13]
 8007910:	2001      	movs	r0, #1
 8007912:	9000      	str	r0, [sp, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f001 fb4e 	bl	8008fb6 <USBH_BulkSendData>
 800791a:	e00b      	b.n	8007934 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007924:	b29a      	uxth	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	7b5b      	ldrb	r3, [r3, #13]
 800792a:	2001      	movs	r0, #1
 800792c:	9000      	str	r0, [sp, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 fb41 	bl	8008fb6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2202      	movs	r2, #2
 8007938:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800793c:	e03b      	b.n	80079b6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	7b5b      	ldrb	r3, [r3, #13]
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 fe65 	bl	8009614 <USBH_LL_GetURBState>
 800794a:	4603      	mov	r3, r0
 800794c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800794e:	7afb      	ldrb	r3, [r7, #11]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d128      	bne.n	80079a6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	8b12      	ldrh	r2, [r2, #24]
 800795c:	4293      	cmp	r3, r2
 800795e:	d90e      	bls.n	800797e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	8b12      	ldrh	r2, [r2, #24]
 8007968:	1a9a      	subs	r2, r3, r2
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	8b12      	ldrh	r2, [r2, #24]
 8007976:	441a      	add	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	61da      	str	r2, [r3, #28]
 800797c:	e002      	b.n	8007984 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007994:	e00e      	b.n	80079b4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f868 	bl	8007a74 <USBH_CDC_TransmitCallback>
      break;
 80079a4:	e006      	b.n	80079b4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80079a6:	7afb      	ldrb	r3, [r7, #11]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d103      	bne.n	80079b4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079b4:	bf00      	nop
  }
}
 80079b6:	bf00      	nop
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b086      	sub	sp, #24
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d002      	beq.n	80079e4 <CDC_ProcessReception+0x26>
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d00e      	beq.n	8007a00 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80079e2:	e043      	b.n	8007a6c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	6a19      	ldr	r1, [r3, #32]
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	8b5a      	ldrh	r2, [r3, #26]
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	7b1b      	ldrb	r3, [r3, #12]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 fb05 	bl	8009000 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2204      	movs	r2, #4
 80079fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80079fe:	e035      	b.n	8007a6c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	7b1b      	ldrb	r3, [r3, #12]
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f001 fe04 	bl	8009614 <USBH_LL_GetURBState>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007a10:	7cfb      	ldrb	r3, [r7, #19]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d129      	bne.n	8007a6a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	7b1b      	ldrb	r3, [r3, #12]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 fd67 	bl	80094f0 <USBH_LL_GetLastXferSize>
 8007a22:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d016      	beq.n	8007a5c <CDC_ProcessReception+0x9e>
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	8b5b      	ldrh	r3, [r3, #26]
 8007a32:	461a      	mov	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d910      	bls.n	8007a5c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	1ad2      	subs	r2, r2, r3
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	6a1a      	ldr	r2, [r3, #32]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	441a      	add	r2, r3
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2203      	movs	r2, #3
 8007a56:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a5a:	e006      	b.n	8007a6a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f80f 	bl	8007a88 <USBH_CDC_ReceiveCallback>
      break;
 8007a6a:	bf00      	nop
  }
}
 8007a6c:	bf00      	nop
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	4613      	mov	r3, r2
 8007abc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	e029      	b.n	8007b1c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	79fa      	ldrb	r2, [r7, #7]
 8007acc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f81f 	bl	8007b24 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f001 fc37 	bl	8009388 <USBH_LL_Init>

  return USBH_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b30:	2300      	movs	r3, #0
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	e009      	b.n	8007b4a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	33e0      	adds	r3, #224	; 0xe0
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	2200      	movs	r2, #0
 8007b42:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3301      	adds	r3, #1
 8007b48:	60fb      	str	r3, [r7, #12]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b0e      	cmp	r3, #14
 8007b4e:	d9f2      	bls.n	8007b36 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007b50:	2300      	movs	r3, #0
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	e009      	b.n	8007b6a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b60:	2200      	movs	r2, #0
 8007b62:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	3301      	adds	r3, #1
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b70:	d3f1      	bcc.n	8007b56 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2240      	movs	r2, #64	; 0x40
 8007b96:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d016      	beq.n	8007c0e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10e      	bne.n	8007c08 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007bf0:	1c59      	adds	r1, r3, #1
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	33de      	adds	r3, #222	; 0xde
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	73fb      	strb	r3, [r7, #15]
 8007c06:	e004      	b.n	8007c12 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007c08:	2302      	movs	r3, #2
 8007c0a:	73fb      	strb	r3, [r7, #15]
 8007c0c:	e001      	b.n	8007c12 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007c0e:	2302      	movs	r3, #2
 8007c10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007c36:	78fa      	ldrb	r2, [r7, #3]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d204      	bcs.n	8007c46 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	78fa      	ldrb	r2, [r7, #3]
 8007c40:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007c44:	e001      	b.n	8007c4a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007c46:	2302      	movs	r3, #2
 8007c48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	4608      	mov	r0, r1
 8007c62:	4611      	mov	r1, r2
 8007c64:	461a      	mov	r2, r3
 8007c66:	4603      	mov	r3, r0
 8007c68:	70fb      	strb	r3, [r7, #3]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	70bb      	strb	r3, [r7, #2]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007c80:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c82:	e025      	b.n	8007cd0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	221a      	movs	r2, #26
 8007c88:	fb02 f303 	mul.w	r3, r2, r3
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	4413      	add	r3, r2
 8007c92:	3302      	adds	r3, #2
 8007c94:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	795b      	ldrb	r3, [r3, #5]
 8007c9a:	78fa      	ldrb	r2, [r7, #3]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d002      	beq.n	8007ca6 <USBH_FindInterface+0x4e>
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	2bff      	cmp	r3, #255	; 0xff
 8007ca4:	d111      	bne.n	8007cca <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007caa:	78ba      	ldrb	r2, [r7, #2]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d002      	beq.n	8007cb6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007cb0:	78bb      	ldrb	r3, [r7, #2]
 8007cb2:	2bff      	cmp	r3, #255	; 0xff
 8007cb4:	d109      	bne.n	8007cca <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007cba:	787a      	ldrb	r2, [r7, #1]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d002      	beq.n	8007cc6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007cc0:	787b      	ldrb	r3, [r7, #1]
 8007cc2:	2bff      	cmp	r3, #255	; 0xff
 8007cc4:	d101      	bne.n	8007cca <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
 8007cc8:	e006      	b.n	8007cd8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d9d6      	bls.n	8007c84 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007cd6:	23ff      	movs	r3, #255	; 0xff
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	371c      	adds	r7, #28
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 fb87 	bl	8009400 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 fca0 	bl	800963a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af04      	add	r7, sp, #16
 8007d0a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d102      	bne.n	8007d26 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2203      	movs	r2, #3
 8007d24:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b0b      	cmp	r3, #11
 8007d2e:	f200 81b3 	bhi.w	8008098 <USBH_Process+0x394>
 8007d32:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <USBH_Process+0x34>)
 8007d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d38:	08007d69 	.word	0x08007d69
 8007d3c:	08007d9b 	.word	0x08007d9b
 8007d40:	08007e03 	.word	0x08007e03
 8007d44:	08008033 	.word	0x08008033
 8007d48:	08008099 	.word	0x08008099
 8007d4c:	08007ea7 	.word	0x08007ea7
 8007d50:	08007fd9 	.word	0x08007fd9
 8007d54:	08007edd 	.word	0x08007edd
 8007d58:	08007efd 	.word	0x08007efd
 8007d5c:	08007f1d 	.word	0x08007f1d
 8007d60:	08007f4b 	.word	0x08007f4b
 8007d64:	0800801b 	.word	0x0800801b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 8193 	beq.w	800809c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007d7c:	20c8      	movs	r0, #200	; 0xc8
 8007d7e:	f001 fca3 	bl	80096c8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 fb99 	bl	80094ba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d98:	e180      	b.n	800809c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d107      	bne.n	8007db4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007db2:	e182      	b.n	80080ba <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007dba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dbe:	d914      	bls.n	8007dea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d903      	bls.n	8007de2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	220d      	movs	r2, #13
 8007dde:	701a      	strb	r2, [r3, #0]
      break;
 8007de0:	e16b      	b.n	80080ba <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	701a      	strb	r2, [r3, #0]
      break;
 8007de8:	e167      	b.n	80080ba <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007df0:	f103 020a 	add.w	r2, r3, #10
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007dfa:	200a      	movs	r0, #10
 8007dfc:	f001 fc64 	bl	80096c8 <USBH_Delay>
      break;
 8007e00:	e15b      	b.n	80080ba <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e12:	2104      	movs	r1, #4
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007e18:	2064      	movs	r0, #100	; 0x64
 8007e1a:	f001 fc55 	bl	80096c8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f001 fb24 	bl	800946c <USBH_LL_GetSpeed>
 8007e24:	4603      	mov	r3, r0
 8007e26:	461a      	mov	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2205      	movs	r2, #5
 8007e32:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007e34:	2100      	movs	r1, #0
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f001 f92f 	bl	800909a <USBH_AllocPipe>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	461a      	mov	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007e44:	2180      	movs	r1, #128	; 0x80
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f001 f927 	bl	800909a <USBH_AllocPipe>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	461a      	mov	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	7919      	ldrb	r1, [r3, #4]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e68:	b292      	uxth	r2, r2
 8007e6a:	9202      	str	r2, [sp, #8]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	9201      	str	r2, [sp, #4]
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	4603      	mov	r3, r0
 8007e74:	2280      	movs	r2, #128	; 0x80
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 f8e0 	bl	800903c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	7959      	ldrb	r1, [r3, #5]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e90:	b292      	uxth	r2, r2
 8007e92:	9202      	str	r2, [sp, #8]
 8007e94:	2200      	movs	r2, #0
 8007e96:	9201      	str	r2, [sp, #4]
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 f8cc 	bl	800903c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ea4:	e109      	b.n	80080ba <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f90c 	bl	80080c4 <USBH_HandleEnum>
 8007eac:	4603      	mov	r3, r0
 8007eae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f040 80f3 	bne.w	80080a0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d103      	bne.n	8007ed4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2208      	movs	r2, #8
 8007ed0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007ed2:	e0e5      	b.n	80080a0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2207      	movs	r2, #7
 8007ed8:	701a      	strb	r2, [r3, #0]
      break;
 8007eda:	e0e1      	b.n	80080a0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 80de 	beq.w	80080a4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007eee:	2101      	movs	r1, #1
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2208      	movs	r2, #8
 8007ef8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007efa:	e0d3      	b.n	80080a4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fc20 	bl	800874c <USBH_SetCfg>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f040 80ca 	bne.w	80080a8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2209      	movs	r2, #9
 8007f18:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f1a:	e0c5      	b.n	80080a8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007f22:	f003 0320 	and.w	r3, r3, #32
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00b      	beq.n	8007f42 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fc30 	bl	8008792 <USBH_SetFeature>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f040 80b9 	bne.w	80080ac <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	220a      	movs	r2, #10
 8007f3e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f40:	e0b4      	b.n	80080ac <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	220a      	movs	r2, #10
 8007f46:	701a      	strb	r2, [r3, #0]
      break;
 8007f48:	e0b0      	b.n	80080ac <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 80ad 	beq.w	80080b0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73fb      	strb	r3, [r7, #15]
 8007f62:	e016      	b.n	8007f92 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007f64:	7bfa      	ldrb	r2, [r7, #15]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	32de      	adds	r2, #222	; 0xde
 8007f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f6e:	791a      	ldrb	r2, [r3, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d108      	bne.n	8007f8c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007f7a:	7bfa      	ldrb	r2, [r7, #15]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	32de      	adds	r2, #222	; 0xde
 8007f80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007f8a:	e005      	b.n	8007f98 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	73fb      	strb	r3, [r7, #15]
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d0e5      	beq.n	8007f64 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d016      	beq.n	8007fd0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	4798      	blx	r3
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d109      	bne.n	8007fc8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2206      	movs	r2, #6
 8007fb8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fc0:	2103      	movs	r1, #3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007fc6:	e073      	b.n	80080b0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	220d      	movs	r2, #13
 8007fcc:	701a      	strb	r2, [r3, #0]
      break;
 8007fce:	e06f      	b.n	80080b0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	220d      	movs	r2, #13
 8007fd4:	701a      	strb	r2, [r3, #0]
      break;
 8007fd6:	e06b      	b.n	80080b0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d017      	beq.n	8008012 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
 8007fee:	4603      	mov	r3, r0
 8007ff0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007ff2:	7bbb      	ldrb	r3, [r7, #14]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d103      	bne.n	8008002 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	220b      	movs	r2, #11
 8007ffe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008000:	e058      	b.n	80080b4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b02      	cmp	r3, #2
 8008008:	d154      	bne.n	80080b4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	220d      	movs	r2, #13
 800800e:	701a      	strb	r2, [r3, #0]
      break;
 8008010:	e050      	b.n	80080b4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	220d      	movs	r2, #13
 8008016:	701a      	strb	r2, [r3, #0]
      break;
 8008018:	e04c      	b.n	80080b4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008020:	2b00      	cmp	r3, #0
 8008022:	d049      	beq.n	80080b8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	4798      	blx	r3
      }
      break;
 8008030:	e042      	b.n	80080b8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff fd72 	bl	8007b24 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008046:	2b00      	cmp	r3, #0
 8008048:	d009      	beq.n	800805e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008064:	2b00      	cmp	r3, #0
 8008066:	d005      	beq.n	8008074 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800806e:	2105      	movs	r1, #5
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b01      	cmp	r3, #1
 800807e:	d107      	bne.n	8008090 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7ff fe2b 	bl	8007ce4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800808e:	e014      	b.n	80080ba <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 f9b5 	bl	8009400 <USBH_LL_Start>
      break;
 8008096:	e010      	b.n	80080ba <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008098:	bf00      	nop
 800809a:	e00e      	b.n	80080ba <USBH_Process+0x3b6>
      break;
 800809c:	bf00      	nop
 800809e:	e00c      	b.n	80080ba <USBH_Process+0x3b6>
      break;
 80080a0:	bf00      	nop
 80080a2:	e00a      	b.n	80080ba <USBH_Process+0x3b6>
    break;
 80080a4:	bf00      	nop
 80080a6:	e008      	b.n	80080ba <USBH_Process+0x3b6>
      break;
 80080a8:	bf00      	nop
 80080aa:	e006      	b.n	80080ba <USBH_Process+0x3b6>
      break;
 80080ac:	bf00      	nop
 80080ae:	e004      	b.n	80080ba <USBH_Process+0x3b6>
      break;
 80080b0:	bf00      	nop
 80080b2:	e002      	b.n	80080ba <USBH_Process+0x3b6>
      break;
 80080b4:	bf00      	nop
 80080b6:	e000      	b.n	80080ba <USBH_Process+0x3b6>
      break;
 80080b8:	bf00      	nop
  }
  return USBH_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af04      	add	r7, sp, #16
 80080ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80080cc:	2301      	movs	r3, #1
 80080ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80080d0:	2301      	movs	r3, #1
 80080d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	785b      	ldrb	r3, [r3, #1]
 80080d8:	2b07      	cmp	r3, #7
 80080da:	f200 81c1 	bhi.w	8008460 <USBH_HandleEnum+0x39c>
 80080de:	a201      	add	r2, pc, #4	; (adr r2, 80080e4 <USBH_HandleEnum+0x20>)
 80080e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e4:	08008105 	.word	0x08008105
 80080e8:	080081c3 	.word	0x080081c3
 80080ec:	0800822d 	.word	0x0800822d
 80080f0:	080082bb 	.word	0x080082bb
 80080f4:	08008325 	.word	0x08008325
 80080f8:	08008395 	.word	0x08008395
 80080fc:	080083db 	.word	0x080083db
 8008100:	08008421 	.word	0x08008421
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008104:	2108      	movs	r1, #8
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa50 	bl	80085ac <USBH_Get_DevDesc>
 800810c:	4603      	mov	r3, r0
 800810e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d130      	bne.n	8008178 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	7919      	ldrb	r1, [r3, #4]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800813a:	b292      	uxth	r2, r2
 800813c:	9202      	str	r2, [sp, #8]
 800813e:	2200      	movs	r2, #0
 8008140:	9201      	str	r2, [sp, #4]
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	4603      	mov	r3, r0
 8008146:	2280      	movs	r2, #128	; 0x80
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 ff77 	bl	800903c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	7959      	ldrb	r1, [r3, #5]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008162:	b292      	uxth	r2, r2
 8008164:	9202      	str	r2, [sp, #8]
 8008166:	2200      	movs	r2, #0
 8008168:	9201      	str	r2, [sp, #4]
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	4603      	mov	r3, r0
 800816e:	2200      	movs	r2, #0
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 ff63 	bl	800903c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008176:	e175      	b.n	8008464 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	2b03      	cmp	r3, #3
 800817c:	f040 8172 	bne.w	8008464 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008186:	3301      	adds	r3, #1
 8008188:	b2da      	uxtb	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008196:	2b03      	cmp	r3, #3
 8008198:	d903      	bls.n	80081a2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	220d      	movs	r2, #13
 800819e:	701a      	strb	r2, [r3, #0]
      break;
 80081a0:	e160      	b.n	8008464 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	795b      	ldrb	r3, [r3, #5]
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 ff97 	bl	80090dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	791b      	ldrb	r3, [r3, #4]
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 ff91 	bl	80090dc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	701a      	strb	r2, [r3, #0]
      break;
 80081c0:	e150      	b.n	8008464 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80081c2:	2112      	movs	r1, #18
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f9f1 	bl	80085ac <USBH_Get_DevDesc>
 80081ca:	4603      	mov	r3, r0
 80081cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d103      	bne.n	80081dc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081da:	e145      	b.n	8008468 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	2b03      	cmp	r3, #3
 80081e0:	f040 8142 	bne.w	8008468 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081ea:	3301      	adds	r3, #1
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d903      	bls.n	8008206 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	220d      	movs	r2, #13
 8008202:	701a      	strb	r2, [r3, #0]
      break;
 8008204:	e130      	b.n	8008468 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	795b      	ldrb	r3, [r3, #5]
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 ff65 	bl	80090dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	791b      	ldrb	r3, [r3, #4]
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 ff5f 	bl	80090dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	701a      	strb	r2, [r3, #0]
      break;
 800822a:	e11d      	b.n	8008468 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800822c:	2101      	movs	r1, #1
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fa68 	bl	8008704 <USBH_SetAddress>
 8008234:	4603      	mov	r3, r0
 8008236:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008238:	7bbb      	ldrb	r3, [r7, #14]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d132      	bne.n	80082a4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800823e:	2002      	movs	r0, #2
 8008240:	f001 fa42 	bl	80096c8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2203      	movs	r2, #3
 8008250:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	7919      	ldrb	r1, [r3, #4]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008266:	b292      	uxth	r2, r2
 8008268:	9202      	str	r2, [sp, #8]
 800826a:	2200      	movs	r2, #0
 800826c:	9201      	str	r2, [sp, #4]
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	4603      	mov	r3, r0
 8008272:	2280      	movs	r2, #128	; 0x80
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fee1 	bl	800903c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	7959      	ldrb	r1, [r3, #5]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800828e:	b292      	uxth	r2, r2
 8008290:	9202      	str	r2, [sp, #8]
 8008292:	2200      	movs	r2, #0
 8008294:	9201      	str	r2, [sp, #4]
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	4603      	mov	r3, r0
 800829a:	2200      	movs	r2, #0
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fecd 	bl	800903c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80082a2:	e0e3      	b.n	800846c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	f040 80e0 	bne.w	800846c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	220d      	movs	r2, #13
 80082b0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	705a      	strb	r2, [r3, #1]
      break;
 80082b8:	e0d8      	b.n	800846c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80082ba:	2109      	movs	r1, #9
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f99d 	bl	80085fc <USBH_Get_CfgDesc>
 80082c2:	4603      	mov	r3, r0
 80082c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d103      	bne.n	80082d4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2204      	movs	r2, #4
 80082d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082d2:	e0cd      	b.n	8008470 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	f040 80ca 	bne.w	8008470 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082e2:	3301      	adds	r3, #1
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d903      	bls.n	80082fe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	220d      	movs	r2, #13
 80082fa:	701a      	strb	r2, [r3, #0]
      break;
 80082fc:	e0b8      	b.n	8008470 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	795b      	ldrb	r3, [r3, #5]
 8008302:	4619      	mov	r1, r3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fee9 	bl	80090dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	791b      	ldrb	r3, [r3, #4]
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fee3 	bl	80090dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	701a      	strb	r2, [r3, #0]
      break;
 8008322:	e0a5      	b.n	8008470 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f965 	bl	80085fc <USBH_Get_CfgDesc>
 8008332:	4603      	mov	r3, r0
 8008334:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d103      	bne.n	8008344 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2205      	movs	r2, #5
 8008340:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008342:	e097      	b.n	8008474 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	2b03      	cmp	r3, #3
 8008348:	f040 8094 	bne.w	8008474 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008352:	3301      	adds	r3, #1
 8008354:	b2da      	uxtb	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008362:	2b03      	cmp	r3, #3
 8008364:	d903      	bls.n	800836e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	220d      	movs	r2, #13
 800836a:	701a      	strb	r2, [r3, #0]
      break;
 800836c:	e082      	b.n	8008474 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	795b      	ldrb	r3, [r3, #5]
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 feb1 	bl	80090dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	791b      	ldrb	r3, [r3, #4]
 800837e:	4619      	mov	r1, r3
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 feab 	bl	80090dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	701a      	strb	r2, [r3, #0]
      break;
 8008392:	e06f      	b.n	8008474 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800839a:	2b00      	cmp	r3, #0
 800839c:	d019      	beq.n	80083d2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80083aa:	23ff      	movs	r3, #255	; 0xff
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f949 	bl	8008644 <USBH_Get_StringDesc>
 80083b2:	4603      	mov	r3, r0
 80083b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d103      	bne.n	80083c4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2206      	movs	r2, #6
 80083c0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80083c2:	e059      	b.n	8008478 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d156      	bne.n	8008478 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2206      	movs	r2, #6
 80083ce:	705a      	strb	r2, [r3, #1]
      break;
 80083d0:	e052      	b.n	8008478 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2206      	movs	r2, #6
 80083d6:	705a      	strb	r2, [r3, #1]
      break;
 80083d8:	e04e      	b.n	8008478 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d019      	beq.n	8008418 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80083f0:	23ff      	movs	r3, #255	; 0xff
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f926 	bl	8008644 <USBH_Get_StringDesc>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d103      	bne.n	800840a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2207      	movs	r2, #7
 8008406:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008408:	e038      	b.n	800847c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800840a:	7bbb      	ldrb	r3, [r7, #14]
 800840c:	2b03      	cmp	r3, #3
 800840e:	d135      	bne.n	800847c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2207      	movs	r2, #7
 8008414:	705a      	strb	r2, [r3, #1]
      break;
 8008416:	e031      	b.n	800847c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2207      	movs	r2, #7
 800841c:	705a      	strb	r2, [r3, #1]
      break;
 800841e:	e02d      	b.n	800847c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008426:	2b00      	cmp	r3, #0
 8008428:	d017      	beq.n	800845a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008436:	23ff      	movs	r3, #255	; 0xff
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f903 	bl	8008644 <USBH_Get_StringDesc>
 800843e:	4603      	mov	r3, r0
 8008440:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d102      	bne.n	800844e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800844c:	e018      	b.n	8008480 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b03      	cmp	r3, #3
 8008452:	d115      	bne.n	8008480 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
      break;
 8008458:	e012      	b.n	8008480 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]
      break;
 800845e:	e00f      	b.n	8008480 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008460:	bf00      	nop
 8008462:	e00e      	b.n	8008482 <USBH_HandleEnum+0x3be>
      break;
 8008464:	bf00      	nop
 8008466:	e00c      	b.n	8008482 <USBH_HandleEnum+0x3be>
      break;
 8008468:	bf00      	nop
 800846a:	e00a      	b.n	8008482 <USBH_HandleEnum+0x3be>
      break;
 800846c:	bf00      	nop
 800846e:	e008      	b.n	8008482 <USBH_HandleEnum+0x3be>
      break;
 8008470:	bf00      	nop
 8008472:	e006      	b.n	8008482 <USBH_HandleEnum+0x3be>
      break;
 8008474:	bf00      	nop
 8008476:	e004      	b.n	8008482 <USBH_HandleEnum+0x3be>
      break;
 8008478:	bf00      	nop
 800847a:	e002      	b.n	8008482 <USBH_HandleEnum+0x3be>
      break;
 800847c:	bf00      	nop
 800847e:	e000      	b.n	8008482 <USBH_HandleEnum+0x3be>
      break;
 8008480:	bf00      	nop
  }
  return Status;
 8008482:	7bfb      	ldrb	r3, [r7, #15]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800849e:	bf00      	nop
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084b8:	1c5a      	adds	r2, r3, #1
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f804 	bl	80084ce <USBH_HandleSof>
}
 80084c6:	bf00      	nop
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b082      	sub	sp, #8
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b0b      	cmp	r3, #11
 80084de:	d10a      	bne.n	80084f6 <USBH_HandleSof+0x28>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d005      	beq.n	80084f6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	4798      	blx	r3
  }
}
 80084f6:	bf00      	nop
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80084fe:	b480      	push	{r7}
 8008500:	b083      	sub	sp, #12
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800850e:	bf00      	nop
}
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800851a:	b480      	push	{r7}
 800851c:	b083      	sub	sp, #12
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800852a:	bf00      	nop
}
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008536:	b480      	push	{r7}
 8008538:	b083      	sub	sp, #12
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 ff56 	bl	8009436 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	791b      	ldrb	r3, [r3, #4]
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fda3 	bl	80090dc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	795b      	ldrb	r3, [r3, #5]
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fd9d 	bl	80090dc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80085be:	78fb      	ldrb	r3, [r7, #3]
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	4613      	mov	r3, r2
 80085c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085ca:	2100      	movs	r1, #0
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f864 	bl	800869a <USBH_GetDescriptor>
 80085d2:	4603      	mov	r3, r0
 80085d4:	73fb      	strb	r3, [r7, #15]
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10a      	bne.n	80085f2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f203 3026 	addw	r0, r3, #806	; 0x326
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80085e8:	78fa      	ldrb	r2, [r7, #3]
 80085ea:	b292      	uxth	r2, r2
 80085ec:	4619      	mov	r1, r3
 80085ee:	f000 f918 	bl	8008822 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af02      	add	r7, sp, #8
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	331c      	adds	r3, #28
 800860c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800860e:	887b      	ldrh	r3, [r7, #2]
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008618:	2100      	movs	r1, #0
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f83d 	bl	800869a <USBH_GetDescriptor>
 8008620:	4603      	mov	r3, r0
 8008622:	72fb      	strb	r3, [r7, #11]
 8008624:	7afb      	ldrb	r3, [r7, #11]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d107      	bne.n	800863a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008630:	887a      	ldrh	r2, [r7, #2]
 8008632:	68f9      	ldr	r1, [r7, #12]
 8008634:	4618      	mov	r0, r3
 8008636:	f000 f964 	bl	8008902 <USBH_ParseCfgDesc>
  }

  return status;
 800863a:	7afb      	ldrb	r3, [r7, #11]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b088      	sub	sp, #32
 8008648:	af02      	add	r7, sp, #8
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	607a      	str	r2, [r7, #4]
 800864e:	461a      	mov	r2, r3
 8008650:	460b      	mov	r3, r1
 8008652:	72fb      	strb	r3, [r7, #11]
 8008654:	4613      	mov	r3, r2
 8008656:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008658:	7afb      	ldrb	r3, [r7, #11]
 800865a:	b29b      	uxth	r3, r3
 800865c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008660:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008668:	893b      	ldrh	r3, [r7, #8]
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	460b      	mov	r3, r1
 800866e:	2100      	movs	r1, #0
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f000 f812 	bl	800869a <USBH_GetDescriptor>
 8008676:	4603      	mov	r3, r0
 8008678:	75fb      	strb	r3, [r7, #23]
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d107      	bne.n	8008690 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008686:	893a      	ldrh	r2, [r7, #8]
 8008688:	6879      	ldr	r1, [r7, #4]
 800868a:	4618      	mov	r0, r3
 800868c:	f000 fa37 	bl	8008afe <USBH_ParseStringDesc>
  }

  return status;
 8008690:	7dfb      	ldrb	r3, [r7, #23]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b084      	sub	sp, #16
 800869e:	af00      	add	r7, sp, #0
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	607b      	str	r3, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	72fb      	strb	r3, [r7, #11]
 80086a8:	4613      	mov	r3, r2
 80086aa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	789b      	ldrb	r3, [r3, #2]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d11c      	bne.n	80086ee <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2206      	movs	r2, #6
 80086c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	893a      	ldrh	r2, [r7, #8]
 80086ca:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80086cc:	893b      	ldrh	r3, [r7, #8]
 80086ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80086d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086d6:	d104      	bne.n	80086e2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f240 4209 	movw	r2, #1033	; 0x409
 80086de:	829a      	strh	r2, [r3, #20]
 80086e0:	e002      	b.n	80086e8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8b3a      	ldrh	r2, [r7, #24]
 80086ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80086ee:	8b3b      	ldrh	r3, [r7, #24]
 80086f0:	461a      	mov	r2, r3
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 fa50 	bl	8008b9a <USBH_CtlReq>
 80086fa:	4603      	mov	r3, r0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	789b      	ldrb	r3, [r3, #2]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d10f      	bne.n	8008738 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2205      	movs	r2, #5
 8008722:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	b29a      	uxth	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008738:	2200      	movs	r2, #0
 800873a:	2100      	movs	r1, #0
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fa2c 	bl	8008b9a <USBH_CtlReq>
 8008742:	4603      	mov	r3, r0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	789b      	ldrb	r3, [r3, #2]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d10e      	bne.n	800877e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2209      	movs	r2, #9
 800876a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	887a      	ldrh	r2, [r7, #2]
 8008770:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800877e:	2200      	movs	r2, #0
 8008780:	2100      	movs	r1, #0
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fa09 	bl	8008b9a <USBH_CtlReq>
 8008788:	4603      	mov	r3, r0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	460b      	mov	r3, r1
 800879c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	789b      	ldrb	r3, [r3, #2]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d10f      	bne.n	80087c6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2203      	movs	r2, #3
 80087b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80087b2:	78fb      	ldrb	r3, [r7, #3]
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80087c6:	2200      	movs	r2, #0
 80087c8:	2100      	movs	r1, #0
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f9e5 	bl	8008b9a <USBH_CtlReq>
 80087d0:	4603      	mov	r3, r0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	460b      	mov	r3, r1
 80087e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	789b      	ldrb	r3, [r3, #2]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d10f      	bne.n	800880e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2202      	movs	r2, #2
 80087f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008800:	78fb      	ldrb	r3, [r7, #3]
 8008802:	b29a      	uxth	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800880e:	2200      	movs	r2, #0
 8008810:	2100      	movs	r1, #0
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f9c1 	bl	8008b9a <USBH_CtlReq>
 8008818:	4603      	mov	r3, r0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008822:	b480      	push	{r7}
 8008824:	b085      	sub	sp, #20
 8008826:	af00      	add	r7, sp, #0
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	4613      	mov	r3, r2
 800882e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	781a      	ldrb	r2, [r3, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	785a      	ldrb	r2, [r3, #1]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	3302      	adds	r3, #2
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	b29a      	uxth	r2, r3
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	3303      	adds	r3, #3
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	b29b      	uxth	r3, r3
 8008850:	021b      	lsls	r3, r3, #8
 8008852:	b29b      	uxth	r3, r3
 8008854:	4313      	orrs	r3, r2
 8008856:	b29a      	uxth	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	791a      	ldrb	r2, [r3, #4]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	795a      	ldrb	r2, [r3, #5]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	799a      	ldrb	r2, [r3, #6]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	79da      	ldrb	r2, [r3, #7]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800887c:	88fb      	ldrh	r3, [r7, #6]
 800887e:	2b08      	cmp	r3, #8
 8008880:	d939      	bls.n	80088f6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	3308      	adds	r3, #8
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	b29a      	uxth	r2, r3
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	3309      	adds	r3, #9
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	b29b      	uxth	r3, r3
 8008892:	021b      	lsls	r3, r3, #8
 8008894:	b29b      	uxth	r3, r3
 8008896:	4313      	orrs	r3, r2
 8008898:	b29a      	uxth	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	330a      	adds	r3, #10
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	330b      	adds	r3, #11
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	021b      	lsls	r3, r3, #8
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	4313      	orrs	r3, r2
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	330c      	adds	r3, #12
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	330d      	adds	r3, #13
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	021b      	lsls	r3, r3, #8
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	4313      	orrs	r3, r2
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	7b9a      	ldrb	r2, [r3, #14]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	7bda      	ldrb	r2, [r3, #15]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	7c1a      	ldrb	r2, [r3, #16]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	7c5a      	ldrb	r2, [r3, #17]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	745a      	strb	r2, [r3, #17]
  }
}
 80088f6:	bf00      	nop
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b08a      	sub	sp, #40	; 0x28
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	4613      	mov	r3, r2
 800890e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008914:	2300      	movs	r3, #0
 8008916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	781a      	ldrb	r2, [r3, #0]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	785a      	ldrb	r2, [r3, #1]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	3302      	adds	r3, #2
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	b29a      	uxth	r2, r3
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	3303      	adds	r3, #3
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	b29b      	uxth	r3, r3
 8008944:	021b      	lsls	r3, r3, #8
 8008946:	b29b      	uxth	r3, r3
 8008948:	4313      	orrs	r3, r2
 800894a:	b29a      	uxth	r2, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	791a      	ldrb	r2, [r3, #4]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	795a      	ldrb	r2, [r3, #5]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	799a      	ldrb	r2, [r3, #6]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	79da      	ldrb	r2, [r3, #7]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	7a1a      	ldrb	r2, [r3, #8]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008978:	88fb      	ldrh	r3, [r7, #6]
 800897a:	2b09      	cmp	r3, #9
 800897c:	d95f      	bls.n	8008a3e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800897e:	2309      	movs	r3, #9
 8008980:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008982:	2300      	movs	r3, #0
 8008984:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008986:	e051      	b.n	8008a2c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008988:	f107 0316 	add.w	r3, r7, #22
 800898c:	4619      	mov	r1, r3
 800898e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008990:	f000 f8e8 	bl	8008b64 <USBH_GetNextDesc>
 8008994:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008998:	785b      	ldrb	r3, [r3, #1]
 800899a:	2b04      	cmp	r3, #4
 800899c:	d146      	bne.n	8008a2c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800899e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089a2:	221a      	movs	r2, #26
 80089a4:	fb02 f303 	mul.w	r3, r2, r3
 80089a8:	3308      	adds	r3, #8
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	4413      	add	r3, r2
 80089ae:	3302      	adds	r3, #2
 80089b0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80089b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089b4:	69f8      	ldr	r0, [r7, #28]
 80089b6:	f000 f846 	bl	8008a46 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80089c4:	e022      	b.n	8008a0c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80089c6:	f107 0316 	add.w	r3, r7, #22
 80089ca:	4619      	mov	r1, r3
 80089cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089ce:	f000 f8c9 	bl	8008b64 <USBH_GetNextDesc>
 80089d2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	785b      	ldrb	r3, [r3, #1]
 80089d8:	2b05      	cmp	r3, #5
 80089da:	d117      	bne.n	8008a0c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80089dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089e0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80089e4:	3201      	adds	r2, #1
 80089e6:	00d2      	lsls	r2, r2, #3
 80089e8:	211a      	movs	r1, #26
 80089ea:	fb01 f303 	mul.w	r3, r1, r3
 80089ee:	4413      	add	r3, r2
 80089f0:	3308      	adds	r3, #8
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	4413      	add	r3, r2
 80089f6:	3304      	adds	r3, #4
 80089f8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80089fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089fc:	69b8      	ldr	r0, [r7, #24]
 80089fe:	f000 f851 	bl	8008aa4 <USBH_ParseEPDesc>
            ep_ix++;
 8008a02:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008a06:	3301      	adds	r3, #1
 8008a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	791b      	ldrb	r3, [r3, #4]
 8008a10:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d204      	bcs.n	8008a22 <USBH_ParseCfgDesc+0x120>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	885a      	ldrh	r2, [r3, #2]
 8008a1c:	8afb      	ldrh	r3, [r7, #22]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d8d1      	bhi.n	80089c6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008a22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a26:	3301      	adds	r3, #1
 8008a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d804      	bhi.n	8008a3e <USBH_ParseCfgDesc+0x13c>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	885a      	ldrh	r2, [r3, #2]
 8008a38:	8afb      	ldrh	r3, [r7, #22]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d8a4      	bhi.n	8008988 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008a3e:	bf00      	nop
 8008a40:	3728      	adds	r7, #40	; 0x28
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	781a      	ldrb	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	785a      	ldrb	r2, [r3, #1]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	789a      	ldrb	r2, [r3, #2]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	78da      	ldrb	r2, [r3, #3]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	791a      	ldrb	r2, [r3, #4]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	795a      	ldrb	r2, [r3, #5]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	799a      	ldrb	r2, [r3, #6]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	79da      	ldrb	r2, [r3, #7]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	7a1a      	ldrb	r2, [r3, #8]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	721a      	strb	r2, [r3, #8]
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781a      	ldrb	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	785a      	ldrb	r2, [r3, #1]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	789a      	ldrb	r2, [r3, #2]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	78da      	ldrb	r2, [r3, #3]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	3305      	adds	r3, #5
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	021b      	lsls	r3, r3, #8
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	799a      	ldrb	r2, [r3, #6]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	719a      	strb	r2, [r3, #6]
}
 8008af2:	bf00      	nop
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b087      	sub	sp, #28
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d120      	bne.n	8008b58 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	1e9a      	subs	r2, r3, #2
 8008b1c:	88fb      	ldrh	r3, [r7, #6]
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	bf28      	it	cs
 8008b22:	4613      	movcs	r3, r2
 8008b24:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	3302      	adds	r3, #2
 8008b2a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	82fb      	strh	r3, [r7, #22]
 8008b30:	e00b      	b.n	8008b4a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008b32:	8afb      	ldrh	r3, [r7, #22]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4413      	add	r3, r2
 8008b38:	781a      	ldrb	r2, [r3, #0]
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	3301      	adds	r3, #1
 8008b42:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008b44:	8afb      	ldrh	r3, [r7, #22]
 8008b46:	3302      	adds	r3, #2
 8008b48:	82fb      	strh	r3, [r7, #22]
 8008b4a:	8afa      	ldrh	r2, [r7, #22]
 8008b4c:	8abb      	ldrh	r3, [r7, #20]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d3ef      	bcc.n	8008b32 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	2200      	movs	r2, #0
 8008b56:	701a      	strb	r2, [r3, #0]
  }
}
 8008b58:	bf00      	nop
 8008b5a:	371c      	adds	r7, #28
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	881a      	ldrh	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	4413      	add	r3, r2
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4413      	add	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b086      	sub	sp, #24
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	60b9      	str	r1, [r7, #8]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	789b      	ldrb	r3, [r3, #2]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d002      	beq.n	8008bba <USBH_CtlReq+0x20>
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d00f      	beq.n	8008bd8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008bb8:	e027      	b.n	8008c0a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	88fa      	ldrh	r2, [r7, #6]
 8008bc4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2202      	movs	r2, #2
 8008bd0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8008bd6:	e018      	b.n	8008c0a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 f81b 	bl	8008c14 <USBH_HandleControl>
 8008bde:	4603      	mov	r3, r0
 8008be0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008be2:	7dfb      	ldrb	r3, [r7, #23]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <USBH_CtlReq+0x54>
 8008be8:	7dfb      	ldrb	r3, [r7, #23]
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d106      	bne.n	8008bfc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	761a      	strb	r2, [r3, #24]
      break;
 8008bfa:	e005      	b.n	8008c08 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d102      	bne.n	8008c08 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2201      	movs	r2, #1
 8008c06:	709a      	strb	r2, [r3, #2]
      break;
 8008c08:	bf00      	nop
  }
  return status;
 8008c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3718      	adds	r7, #24
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af02      	add	r7, sp, #8
 8008c1a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c20:	2300      	movs	r3, #0
 8008c22:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	7e1b      	ldrb	r3, [r3, #24]
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	2b0a      	cmp	r3, #10
 8008c2c:	f200 8156 	bhi.w	8008edc <USBH_HandleControl+0x2c8>
 8008c30:	a201      	add	r2, pc, #4	; (adr r2, 8008c38 <USBH_HandleControl+0x24>)
 8008c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c36:	bf00      	nop
 8008c38:	08008c65 	.word	0x08008c65
 8008c3c:	08008c7f 	.word	0x08008c7f
 8008c40:	08008ce9 	.word	0x08008ce9
 8008c44:	08008d0f 	.word	0x08008d0f
 8008c48:	08008d47 	.word	0x08008d47
 8008c4c:	08008d71 	.word	0x08008d71
 8008c50:	08008dc3 	.word	0x08008dc3
 8008c54:	08008de5 	.word	0x08008de5
 8008c58:	08008e21 	.word	0x08008e21
 8008c5c:	08008e47 	.word	0x08008e47
 8008c60:	08008e85 	.word	0x08008e85
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f103 0110 	add.w	r1, r3, #16
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	795b      	ldrb	r3, [r3, #5]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f943 	bl	8008efc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2202      	movs	r2, #2
 8008c7a:	761a      	strb	r2, [r3, #24]
      break;
 8008c7c:	e139      	b.n	8008ef2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	795b      	ldrb	r3, [r3, #5]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fcc5 	bl	8009614 <USBH_LL_GetURBState>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d11e      	bne.n	8008cd2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	7c1b      	ldrb	r3, [r3, #16]
 8008c98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c9c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	8adb      	ldrh	r3, [r3, #22]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00a      	beq.n	8008cbc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008ca6:	7b7b      	ldrb	r3, [r7, #13]
 8008ca8:	2b80      	cmp	r3, #128	; 0x80
 8008caa:	d103      	bne.n	8008cb4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2203      	movs	r2, #3
 8008cb0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008cb2:	e115      	b.n	8008ee0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2205      	movs	r2, #5
 8008cb8:	761a      	strb	r2, [r3, #24]
      break;
 8008cba:	e111      	b.n	8008ee0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008cbc:	7b7b      	ldrb	r3, [r7, #13]
 8008cbe:	2b80      	cmp	r3, #128	; 0x80
 8008cc0:	d103      	bne.n	8008cca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2209      	movs	r2, #9
 8008cc6:	761a      	strb	r2, [r3, #24]
      break;
 8008cc8:	e10a      	b.n	8008ee0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2207      	movs	r2, #7
 8008cce:	761a      	strb	r2, [r3, #24]
      break;
 8008cd0:	e106      	b.n	8008ee0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
 8008cd4:	2b04      	cmp	r3, #4
 8008cd6:	d003      	beq.n	8008ce0 <USBH_HandleControl+0xcc>
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	f040 8100 	bne.w	8008ee0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	220b      	movs	r2, #11
 8008ce4:	761a      	strb	r2, [r3, #24]
      break;
 8008ce6:	e0fb      	b.n	8008ee0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6899      	ldr	r1, [r3, #8]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	899a      	ldrh	r2, [r3, #12]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	791b      	ldrb	r3, [r3, #4]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f93a 	bl	8008f7a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2204      	movs	r2, #4
 8008d0a:	761a      	strb	r2, [r3, #24]
      break;
 8008d0c:	e0f1      	b.n	8008ef2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	791b      	ldrb	r3, [r3, #4]
 8008d12:	4619      	mov	r1, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fc7d 	bl	8009614 <USBH_LL_GetURBState>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d1e:	7bbb      	ldrb	r3, [r7, #14]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d102      	bne.n	8008d2a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2209      	movs	r2, #9
 8008d28:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	2b05      	cmp	r3, #5
 8008d2e:	d102      	bne.n	8008d36 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008d30:	2303      	movs	r3, #3
 8008d32:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d34:	e0d6      	b.n	8008ee4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	f040 80d3 	bne.w	8008ee4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	220b      	movs	r2, #11
 8008d42:	761a      	strb	r2, [r3, #24]
      break;
 8008d44:	e0ce      	b.n	8008ee4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6899      	ldr	r1, [r3, #8]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	899a      	ldrh	r2, [r3, #12]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	795b      	ldrb	r3, [r3, #5]
 8008d52:	2001      	movs	r0, #1
 8008d54:	9000      	str	r0, [sp, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f8ea 	bl	8008f30 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2206      	movs	r2, #6
 8008d6c:	761a      	strb	r2, [r3, #24]
      break;
 8008d6e:	e0c0      	b.n	8008ef2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	795b      	ldrb	r3, [r3, #5]
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fc4c 	bl	8009614 <USBH_LL_GetURBState>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d103      	bne.n	8008d8e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2207      	movs	r2, #7
 8008d8a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d8c:	e0ac      	b.n	8008ee8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	2b05      	cmp	r3, #5
 8008d92:	d105      	bne.n	8008da0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	220c      	movs	r2, #12
 8008d98:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d9e:	e0a3      	b.n	8008ee8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d103      	bne.n	8008dae <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2205      	movs	r2, #5
 8008daa:	761a      	strb	r2, [r3, #24]
      break;
 8008dac:	e09c      	b.n	8008ee8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	f040 8099 	bne.w	8008ee8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	220b      	movs	r2, #11
 8008dba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc0:	e092      	b.n	8008ee8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	791b      	ldrb	r3, [r3, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	2100      	movs	r1, #0
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f8d5 	bl	8008f7a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2208      	movs	r2, #8
 8008de0:	761a      	strb	r2, [r3, #24]

      break;
 8008de2:	e086      	b.n	8008ef2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	791b      	ldrb	r3, [r3, #4]
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fc12 	bl	8009614 <USBH_LL_GetURBState>
 8008df0:	4603      	mov	r3, r0
 8008df2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d105      	bne.n	8008e06 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	220d      	movs	r2, #13
 8008dfe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e04:	e072      	b.n	8008eec <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008e06:	7bbb      	ldrb	r3, [r7, #14]
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	d103      	bne.n	8008e14 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	220b      	movs	r2, #11
 8008e10:	761a      	strb	r2, [r3, #24]
      break;
 8008e12:	e06b      	b.n	8008eec <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008e14:	7bbb      	ldrb	r3, [r7, #14]
 8008e16:	2b05      	cmp	r3, #5
 8008e18:	d168      	bne.n	8008eec <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e1e:	e065      	b.n	8008eec <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	795b      	ldrb	r3, [r3, #5]
 8008e24:	2201      	movs	r2, #1
 8008e26:	9200      	str	r2, [sp, #0]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f87f 	bl	8008f30 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	220a      	movs	r2, #10
 8008e42:	761a      	strb	r2, [r3, #24]
      break;
 8008e44:	e055      	b.n	8008ef2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	795b      	ldrb	r3, [r3, #5]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fbe1 	bl	8009614 <USBH_LL_GetURBState>
 8008e52:	4603      	mov	r3, r0
 8008e54:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008e56:	7bbb      	ldrb	r3, [r7, #14]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d105      	bne.n	8008e68 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	220d      	movs	r2, #13
 8008e64:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e66:	e043      	b.n	8008ef0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d103      	bne.n	8008e76 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2209      	movs	r2, #9
 8008e72:	761a      	strb	r2, [r3, #24]
      break;
 8008e74:	e03c      	b.n	8008ef0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
 8008e78:	2b04      	cmp	r3, #4
 8008e7a:	d139      	bne.n	8008ef0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	220b      	movs	r2, #11
 8008e80:	761a      	strb	r2, [r3, #24]
      break;
 8008e82:	e035      	b.n	8008ef0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	7e5b      	ldrb	r3, [r3, #25]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	765a      	strb	r2, [r3, #25]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	7e5b      	ldrb	r3, [r3, #25]
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d806      	bhi.n	8008ea6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008ea4:	e025      	b.n	8008ef2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008eac:	2106      	movs	r1, #6
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	795b      	ldrb	r3, [r3, #5]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f90c 	bl	80090dc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	791b      	ldrb	r3, [r3, #4]
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f906 	bl	80090dc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	73fb      	strb	r3, [r7, #15]
      break;
 8008eda:	e00a      	b.n	8008ef2 <USBH_HandleControl+0x2de>

    default:
      break;
 8008edc:	bf00      	nop
 8008ede:	e008      	b.n	8008ef2 <USBH_HandleControl+0x2de>
      break;
 8008ee0:	bf00      	nop
 8008ee2:	e006      	b.n	8008ef2 <USBH_HandleControl+0x2de>
      break;
 8008ee4:	bf00      	nop
 8008ee6:	e004      	b.n	8008ef2 <USBH_HandleControl+0x2de>
      break;
 8008ee8:	bf00      	nop
 8008eea:	e002      	b.n	8008ef2 <USBH_HandleControl+0x2de>
      break;
 8008eec:	bf00      	nop
 8008eee:	e000      	b.n	8008ef2 <USBH_HandleControl+0x2de>
      break;
 8008ef0:	bf00      	nop
  }

  return status;
 8008ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b088      	sub	sp, #32
 8008f00:	af04      	add	r7, sp, #16
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	4613      	mov	r3, r2
 8008f08:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f0a:	79f9      	ldrb	r1, [r7, #7]
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9303      	str	r3, [sp, #12]
 8008f10:	2308      	movs	r3, #8
 8008f12:	9302      	str	r3, [sp, #8]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	2300      	movs	r3, #0
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	2200      	movs	r2, #0
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 fb46 	bl	80095b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b088      	sub	sp, #32
 8008f34:	af04      	add	r7, sp, #16
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	460b      	mov	r3, r1
 8008f40:	80fb      	strh	r3, [r7, #6]
 8008f42:	4613      	mov	r3, r2
 8008f44:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008f50:	2300      	movs	r3, #0
 8008f52:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f54:	7979      	ldrb	r1, [r7, #5]
 8008f56:	7e3b      	ldrb	r3, [r7, #24]
 8008f58:	9303      	str	r3, [sp, #12]
 8008f5a:	88fb      	ldrh	r3, [r7, #6]
 8008f5c:	9302      	str	r3, [sp, #8]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	9301      	str	r3, [sp, #4]
 8008f62:	2301      	movs	r3, #1
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	2300      	movs	r3, #0
 8008f68:	2200      	movs	r2, #0
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f000 fb21 	bl	80095b2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b088      	sub	sp, #32
 8008f7e:	af04      	add	r7, sp, #16
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	4611      	mov	r1, r2
 8008f86:	461a      	mov	r2, r3
 8008f88:	460b      	mov	r3, r1
 8008f8a:	80fb      	strh	r3, [r7, #6]
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f90:	7979      	ldrb	r1, [r7, #5]
 8008f92:	2300      	movs	r3, #0
 8008f94:	9303      	str	r3, [sp, #12]
 8008f96:	88fb      	ldrh	r3, [r7, #6]
 8008f98:	9302      	str	r3, [sp, #8]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	9301      	str	r3, [sp, #4]
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f000 fb03 	bl	80095b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008fac:	2300      	movs	r3, #0

}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b088      	sub	sp, #32
 8008fba:	af04      	add	r7, sp, #16
 8008fbc:	60f8      	str	r0, [r7, #12]
 8008fbe:	60b9      	str	r1, [r7, #8]
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	80fb      	strh	r3, [r7, #6]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008fda:	7979      	ldrb	r1, [r7, #5]
 8008fdc:	7e3b      	ldrb	r3, [r7, #24]
 8008fde:	9303      	str	r3, [sp, #12]
 8008fe0:	88fb      	ldrh	r3, [r7, #6]
 8008fe2:	9302      	str	r3, [sp, #8]
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	9301      	str	r3, [sp, #4]
 8008fe8:	2301      	movs	r3, #1
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	2302      	movs	r3, #2
 8008fee:	2200      	movs	r2, #0
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fade 	bl	80095b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af04      	add	r7, sp, #16
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	4611      	mov	r1, r2
 800900c:	461a      	mov	r2, r3
 800900e:	460b      	mov	r3, r1
 8009010:	80fb      	strh	r3, [r7, #6]
 8009012:	4613      	mov	r3, r2
 8009014:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009016:	7979      	ldrb	r1, [r7, #5]
 8009018:	2300      	movs	r3, #0
 800901a:	9303      	str	r3, [sp, #12]
 800901c:	88fb      	ldrh	r3, [r7, #6]
 800901e:	9302      	str	r3, [sp, #8]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	9301      	str	r3, [sp, #4]
 8009024:	2301      	movs	r3, #1
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	2302      	movs	r3, #2
 800902a:	2201      	movs	r2, #1
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 fac0 	bl	80095b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af04      	add	r7, sp, #16
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	4608      	mov	r0, r1
 8009046:	4611      	mov	r1, r2
 8009048:	461a      	mov	r2, r3
 800904a:	4603      	mov	r3, r0
 800904c:	70fb      	strb	r3, [r7, #3]
 800904e:	460b      	mov	r3, r1
 8009050:	70bb      	strb	r3, [r7, #2]
 8009052:	4613      	mov	r3, r2
 8009054:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009056:	7878      	ldrb	r0, [r7, #1]
 8009058:	78ba      	ldrb	r2, [r7, #2]
 800905a:	78f9      	ldrb	r1, [r7, #3]
 800905c:	8b3b      	ldrh	r3, [r7, #24]
 800905e:	9302      	str	r3, [sp, #8]
 8009060:	7d3b      	ldrb	r3, [r7, #20]
 8009062:	9301      	str	r3, [sp, #4]
 8009064:	7c3b      	ldrb	r3, [r7, #16]
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	4603      	mov	r3, r0
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fa53 	bl	8009516 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b082      	sub	sp, #8
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	460b      	mov	r3, r1
 8009084:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009086:	78fb      	ldrb	r3, [r7, #3]
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fa72 	bl	8009574 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b084      	sub	sp, #16
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	460b      	mov	r3, r1
 80090a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f836 	bl	8009118 <USBH_GetFreePipe>
 80090ac:	4603      	mov	r3, r0
 80090ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80090b0:	89fb      	ldrh	r3, [r7, #14]
 80090b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d00a      	beq.n	80090d0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80090ba:	78fa      	ldrb	r2, [r7, #3]
 80090bc:	89fb      	ldrh	r3, [r7, #14]
 80090be:	f003 030f 	and.w	r3, r3, #15
 80090c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	33e0      	adds	r3, #224	; 0xe0
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	440b      	add	r3, r1
 80090ce:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80090d0:	89fb      	ldrh	r3, [r7, #14]
 80090d2:	b2db      	uxtb	r3, r3
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80090e8:	78fb      	ldrb	r3, [r7, #3]
 80090ea:	2b0a      	cmp	r3, #10
 80090ec:	d80d      	bhi.n	800910a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80090ee:	78fb      	ldrb	r3, [r7, #3]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	33e0      	adds	r3, #224	; 0xe0
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	4413      	add	r3, r2
 80090f8:	685a      	ldr	r2, [r3, #4]
 80090fa:	78fb      	ldrb	r3, [r7, #3]
 80090fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009100:	6879      	ldr	r1, [r7, #4]
 8009102:	33e0      	adds	r3, #224	; 0xe0
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	440b      	add	r3, r1
 8009108:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009124:	2300      	movs	r3, #0
 8009126:	73fb      	strb	r3, [r7, #15]
 8009128:	e00f      	b.n	800914a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800912a:	7bfb      	ldrb	r3, [r7, #15]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	33e0      	adds	r3, #224	; 0xe0
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d102      	bne.n	8009144 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800913e:	7bfb      	ldrb	r3, [r7, #15]
 8009140:	b29b      	uxth	r3, r3
 8009142:	e007      	b.n	8009154 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009144:	7bfb      	ldrb	r3, [r7, #15]
 8009146:	3301      	adds	r3, #1
 8009148:	73fb      	strb	r3, [r7, #15]
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	2b0a      	cmp	r3, #10
 800914e:	d9ec      	bls.n	800912a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009150:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009154:	4618      	mov	r0, r3
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009164:	2201      	movs	r2, #1
 8009166:	490e      	ldr	r1, [pc, #56]	; (80091a0 <MX_USB_HOST_Init+0x40>)
 8009168:	480e      	ldr	r0, [pc, #56]	; (80091a4 <MX_USB_HOST_Init+0x44>)
 800916a:	f7fe fca1 	bl	8007ab0 <USBH_Init>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009174:	f7f7 ffc8 	bl	8001108 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009178:	490b      	ldr	r1, [pc, #44]	; (80091a8 <MX_USB_HOST_Init+0x48>)
 800917a:	480a      	ldr	r0, [pc, #40]	; (80091a4 <MX_USB_HOST_Init+0x44>)
 800917c:	f7fe fd26 	bl	8007bcc <USBH_RegisterClass>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d001      	beq.n	800918a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009186:	f7f7 ffbf 	bl	8001108 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800918a:	4806      	ldr	r0, [pc, #24]	; (80091a4 <MX_USB_HOST_Init+0x44>)
 800918c:	f7fe fdaa 	bl	8007ce4 <USBH_Start>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009196:	f7f7 ffb7 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800919a:	bf00      	nop
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	080091c1 	.word	0x080091c1
 80091a4:	2000020c 	.word	0x2000020c
 80091a8:	20000010 	.word	0x20000010

080091ac <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80091b0:	4802      	ldr	r0, [pc, #8]	; (80091bc <MX_USB_HOST_Process+0x10>)
 80091b2:	f7fe fda7 	bl	8007d04 <USBH_Process>
}
 80091b6:	bf00      	nop
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	2000020c 	.word	0x2000020c

080091c0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80091cc:	78fb      	ldrb	r3, [r7, #3]
 80091ce:	3b01      	subs	r3, #1
 80091d0:	2b04      	cmp	r3, #4
 80091d2:	d819      	bhi.n	8009208 <USBH_UserProcess+0x48>
 80091d4:	a201      	add	r2, pc, #4	; (adr r2, 80091dc <USBH_UserProcess+0x1c>)
 80091d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091da:	bf00      	nop
 80091dc:	08009209 	.word	0x08009209
 80091e0:	080091f9 	.word	0x080091f9
 80091e4:	08009209 	.word	0x08009209
 80091e8:	08009201 	.word	0x08009201
 80091ec:	080091f1 	.word	0x080091f1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80091f0:	4b09      	ldr	r3, [pc, #36]	; (8009218 <USBH_UserProcess+0x58>)
 80091f2:	2203      	movs	r2, #3
 80091f4:	701a      	strb	r2, [r3, #0]
  break;
 80091f6:	e008      	b.n	800920a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80091f8:	4b07      	ldr	r3, [pc, #28]	; (8009218 <USBH_UserProcess+0x58>)
 80091fa:	2202      	movs	r2, #2
 80091fc:	701a      	strb	r2, [r3, #0]
  break;
 80091fe:	e004      	b.n	800920a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009200:	4b05      	ldr	r3, [pc, #20]	; (8009218 <USBH_UserProcess+0x58>)
 8009202:	2201      	movs	r2, #1
 8009204:	701a      	strb	r2, [r3, #0]
  break;
 8009206:	e000      	b.n	800920a <USBH_UserProcess+0x4a>

  default:
  break;
 8009208:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800920a:	bf00      	nop
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	200000c0 	.word	0x200000c0

0800921c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08a      	sub	sp, #40	; 0x28
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009224:	f107 0314 	add.w	r3, r7, #20
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	605a      	str	r2, [r3, #4]
 800922e:	609a      	str	r2, [r3, #8]
 8009230:	60da      	str	r2, [r3, #12]
 8009232:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800923c:	d147      	bne.n	80092ce <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800923e:	2300      	movs	r3, #0
 8009240:	613b      	str	r3, [r7, #16]
 8009242:	4b25      	ldr	r3, [pc, #148]	; (80092d8 <HAL_HCD_MspInit+0xbc>)
 8009244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009246:	4a24      	ldr	r2, [pc, #144]	; (80092d8 <HAL_HCD_MspInit+0xbc>)
 8009248:	f043 0301 	orr.w	r3, r3, #1
 800924c:	6313      	str	r3, [r2, #48]	; 0x30
 800924e:	4b22      	ldr	r3, [pc, #136]	; (80092d8 <HAL_HCD_MspInit+0xbc>)
 8009250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	613b      	str	r3, [r7, #16]
 8009258:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800925a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800925e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009260:	2300      	movs	r3, #0
 8009262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009264:	2300      	movs	r3, #0
 8009266:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009268:	f107 0314 	add.w	r3, r7, #20
 800926c:	4619      	mov	r1, r3
 800926e:	481b      	ldr	r0, [pc, #108]	; (80092dc <HAL_HCD_MspInit+0xc0>)
 8009270:	f7f8 faee 	bl	8001850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009274:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800927a:	2302      	movs	r3, #2
 800927c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800927e:	2300      	movs	r3, #0
 8009280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009282:	2300      	movs	r3, #0
 8009284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009286:	230a      	movs	r3, #10
 8009288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800928a:	f107 0314 	add.w	r3, r7, #20
 800928e:	4619      	mov	r1, r3
 8009290:	4812      	ldr	r0, [pc, #72]	; (80092dc <HAL_HCD_MspInit+0xc0>)
 8009292:	f7f8 fadd 	bl	8001850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009296:	4b10      	ldr	r3, [pc, #64]	; (80092d8 <HAL_HCD_MspInit+0xbc>)
 8009298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800929a:	4a0f      	ldr	r2, [pc, #60]	; (80092d8 <HAL_HCD_MspInit+0xbc>)
 800929c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a0:	6353      	str	r3, [r2, #52]	; 0x34
 80092a2:	2300      	movs	r3, #0
 80092a4:	60fb      	str	r3, [r7, #12]
 80092a6:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <HAL_HCD_MspInit+0xbc>)
 80092a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092aa:	4a0b      	ldr	r2, [pc, #44]	; (80092d8 <HAL_HCD_MspInit+0xbc>)
 80092ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092b0:	6453      	str	r3, [r2, #68]	; 0x44
 80092b2:	4b09      	ldr	r3, [pc, #36]	; (80092d8 <HAL_HCD_MspInit+0xbc>)
 80092b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092ba:	60fb      	str	r3, [r7, #12]
 80092bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092be:	2200      	movs	r2, #0
 80092c0:	2100      	movs	r1, #0
 80092c2:	2043      	movs	r0, #67	; 0x43
 80092c4:	f7f8 fa8d 	bl	80017e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80092c8:	2043      	movs	r0, #67	; 0x43
 80092ca:	f7f8 faa6 	bl	800181a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092ce:	bf00      	nop
 80092d0:	3728      	adds	r7, #40	; 0x28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	40023800 	.word	0x40023800
 80092dc:	40020000 	.word	0x40020000

080092e0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7ff f8db 	bl	80084aa <USBH_LL_IncTimer>
}
 80092f4:	bf00      	nop
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800930a:	4618      	mov	r0, r3
 800930c:	f7ff f913 	bl	8008536 <USBH_LL_Connect>
}
 8009310:	bf00      	nop
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009326:	4618      	mov	r0, r3
 8009328:	f7ff f91c 	bl	8008564 <USBH_LL_Disconnect>
}
 800932c:	bf00      	nop
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	70fb      	strb	r3, [r7, #3]
 8009340:	4613      	mov	r3, r2
 8009342:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff f8cd 	bl	80084fe <USBH_LL_PortEnabled>
}
 8009364:	bf00      	nop
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800937a:	4618      	mov	r0, r3
 800937c:	f7ff f8cd 	bl	800851a <USBH_LL_PortDisabled>
}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009396:	2b01      	cmp	r3, #1
 8009398:	d12a      	bne.n	80093f0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800939a:	4a18      	ldr	r2, [pc, #96]	; (80093fc <USBH_LL_Init+0x74>)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a15      	ldr	r2, [pc, #84]	; (80093fc <USBH_LL_Init+0x74>)
 80093a6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093aa:	4b14      	ldr	r3, [pc, #80]	; (80093fc <USBH_LL_Init+0x74>)
 80093ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80093b0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80093b2:	4b12      	ldr	r3, [pc, #72]	; (80093fc <USBH_LL_Init+0x74>)
 80093b4:	2208      	movs	r2, #8
 80093b6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80093b8:	4b10      	ldr	r3, [pc, #64]	; (80093fc <USBH_LL_Init+0x74>)
 80093ba:	2201      	movs	r2, #1
 80093bc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093be:	4b0f      	ldr	r3, [pc, #60]	; (80093fc <USBH_LL_Init+0x74>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80093c4:	4b0d      	ldr	r3, [pc, #52]	; (80093fc <USBH_LL_Init+0x74>)
 80093c6:	2202      	movs	r2, #2
 80093c8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093ca:	4b0c      	ldr	r3, [pc, #48]	; (80093fc <USBH_LL_Init+0x74>)
 80093cc:	2200      	movs	r2, #0
 80093ce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80093d0:	480a      	ldr	r0, [pc, #40]	; (80093fc <USBH_LL_Init+0x74>)
 80093d2:	f7f8 fc24 	bl	8001c1e <HAL_HCD_Init>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80093dc:	f7f7 fe94 	bl	8001108 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80093e0:	4806      	ldr	r0, [pc, #24]	; (80093fc <USBH_LL_Init+0x74>)
 80093e2:	f7f9 f801 	bl	80023e8 <HAL_HCD_GetCurrentFrame>
 80093e6:	4603      	mov	r3, r0
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7ff f84e 	bl	800848c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	200005e4 	.word	0x200005e4

08009400 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009416:	4618      	mov	r0, r3
 8009418:	f7f8 ff70 	bl	80022fc <HAL_HCD_Start>
 800941c:	4603      	mov	r3, r0
 800941e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	4618      	mov	r0, r3
 8009424:	f000 f95c 	bl	80096e0 <USBH_Get_USB_Status>
 8009428:	4603      	mov	r3, r0
 800942a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800942c:	7bbb      	ldrb	r3, [r7, #14]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800943e:	2300      	movs	r3, #0
 8009440:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800944c:	4618      	mov	r0, r3
 800944e:	f7f8 ff78 	bl	8002342 <HAL_HCD_Stop>
 8009452:	4603      	mov	r3, r0
 8009454:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009456:	7bfb      	ldrb	r3, [r7, #15]
 8009458:	4618      	mov	r0, r3
 800945a:	f000 f941 	bl	80096e0 <USBH_Get_USB_Status>
 800945e:	4603      	mov	r3, r0
 8009460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009462:	7bbb      	ldrb	r3, [r7, #14]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009474:	2301      	movs	r3, #1
 8009476:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800947e:	4618      	mov	r0, r3
 8009480:	f7f8 ffc0 	bl	8002404 <HAL_HCD_GetCurrentSpeed>
 8009484:	4603      	mov	r3, r0
 8009486:	2b02      	cmp	r3, #2
 8009488:	d00c      	beq.n	80094a4 <USBH_LL_GetSpeed+0x38>
 800948a:	2b02      	cmp	r3, #2
 800948c:	d80d      	bhi.n	80094aa <USBH_LL_GetSpeed+0x3e>
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <USBH_LL_GetSpeed+0x2c>
 8009492:	2b01      	cmp	r3, #1
 8009494:	d003      	beq.n	800949e <USBH_LL_GetSpeed+0x32>
 8009496:	e008      	b.n	80094aa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009498:	2300      	movs	r3, #0
 800949a:	73fb      	strb	r3, [r7, #15]
    break;
 800949c:	e008      	b.n	80094b0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800949e:	2301      	movs	r3, #1
 80094a0:	73fb      	strb	r3, [r7, #15]
    break;
 80094a2:	e005      	b.n	80094b0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80094a4:	2302      	movs	r3, #2
 80094a6:	73fb      	strb	r3, [r7, #15]
    break;
 80094a8:	e002      	b.n	80094b0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80094aa:	2301      	movs	r3, #1
 80094ac:	73fb      	strb	r3, [r7, #15]
    break;
 80094ae:	bf00      	nop
  }
  return  speed;
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c2:	2300      	movs	r3, #0
 80094c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7f8 ff53 	bl	800237c <HAL_HCD_ResetPort>
 80094d6:	4603      	mov	r3, r0
 80094d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094da:	7bfb      	ldrb	r3, [r7, #15]
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 f8ff 	bl	80096e0 <USBH_Get_USB_Status>
 80094e2:	4603      	mov	r3, r0
 80094e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009502:	78fa      	ldrb	r2, [r7, #3]
 8009504:	4611      	mov	r1, r2
 8009506:	4618      	mov	r0, r3
 8009508:	f7f8 ff5a 	bl	80023c0 <HAL_HCD_HC_GetXferCount>
 800950c:	4603      	mov	r3, r0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009516:	b590      	push	{r4, r7, lr}
 8009518:	b089      	sub	sp, #36	; 0x24
 800951a:	af04      	add	r7, sp, #16
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	4608      	mov	r0, r1
 8009520:	4611      	mov	r1, r2
 8009522:	461a      	mov	r2, r3
 8009524:	4603      	mov	r3, r0
 8009526:	70fb      	strb	r3, [r7, #3]
 8009528:	460b      	mov	r3, r1
 800952a:	70bb      	strb	r3, [r7, #2]
 800952c:	4613      	mov	r3, r2
 800952e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800953e:	787c      	ldrb	r4, [r7, #1]
 8009540:	78ba      	ldrb	r2, [r7, #2]
 8009542:	78f9      	ldrb	r1, [r7, #3]
 8009544:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009546:	9302      	str	r3, [sp, #8]
 8009548:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800954c:	9301      	str	r3, [sp, #4]
 800954e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	4623      	mov	r3, r4
 8009556:	f7f8 fbc4 	bl	8001ce2 <HAL_HCD_HC_Init>
 800955a:	4603      	mov	r3, r0
 800955c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800955e:	7bfb      	ldrb	r3, [r7, #15]
 8009560:	4618      	mov	r0, r3
 8009562:	f000 f8bd 	bl	80096e0 <USBH_Get_USB_Status>
 8009566:	4603      	mov	r3, r0
 8009568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800956a:	7bbb      	ldrb	r3, [r7, #14]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3714      	adds	r7, #20
 8009570:	46bd      	mov	sp, r7
 8009572:	bd90      	pop	{r4, r7, pc}

08009574 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	460b      	mov	r3, r1
 800957e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800958e:	78fa      	ldrb	r2, [r7, #3]
 8009590:	4611      	mov	r1, r2
 8009592:	4618      	mov	r0, r3
 8009594:	f7f8 fc34 	bl	8001e00 <HAL_HCD_HC_Halt>
 8009598:	4603      	mov	r3, r0
 800959a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800959c:	7bfb      	ldrb	r3, [r7, #15]
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 f89e 	bl	80096e0 <USBH_Get_USB_Status>
 80095a4:	4603      	mov	r3, r0
 80095a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80095b2:	b590      	push	{r4, r7, lr}
 80095b4:	b089      	sub	sp, #36	; 0x24
 80095b6:	af04      	add	r7, sp, #16
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	4608      	mov	r0, r1
 80095bc:	4611      	mov	r1, r2
 80095be:	461a      	mov	r2, r3
 80095c0:	4603      	mov	r3, r0
 80095c2:	70fb      	strb	r3, [r7, #3]
 80095c4:	460b      	mov	r3, r1
 80095c6:	70bb      	strb	r3, [r7, #2]
 80095c8:	4613      	mov	r3, r2
 80095ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095d0:	2300      	movs	r3, #0
 80095d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80095da:	787c      	ldrb	r4, [r7, #1]
 80095dc:	78ba      	ldrb	r2, [r7, #2]
 80095de:	78f9      	ldrb	r1, [r7, #3]
 80095e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80095e4:	9303      	str	r3, [sp, #12]
 80095e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095e8:	9302      	str	r3, [sp, #8]
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	9301      	str	r3, [sp, #4]
 80095ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	4623      	mov	r3, r4
 80095f6:	f7f8 fc27 	bl	8001e48 <HAL_HCD_HC_SubmitRequest>
 80095fa:	4603      	mov	r3, r0
 80095fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
 8009600:	4618      	mov	r0, r3
 8009602:	f000 f86d 	bl	80096e0 <USBH_Get_USB_Status>
 8009606:	4603      	mov	r3, r0
 8009608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800960a:	7bbb      	ldrb	r3, [r7, #14]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	bd90      	pop	{r4, r7, pc}

08009614 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009626:	78fa      	ldrb	r2, [r7, #3]
 8009628:	4611      	mov	r1, r2
 800962a:	4618      	mov	r0, r3
 800962c:	f7f8 feb4 	bl	8002398 <HAL_HCD_HC_GetURBState>
 8009630:	4603      	mov	r3, r0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b082      	sub	sp, #8
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800964c:	2b01      	cmp	r3, #1
 800964e:	d103      	bne.n	8009658 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009650:	78fb      	ldrb	r3, [r7, #3]
 8009652:	4618      	mov	r0, r3
 8009654:	f000 f870 	bl	8009738 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009658:	20c8      	movs	r0, #200	; 0xc8
 800965a:	f7f7 ffc3 	bl	80015e4 <HAL_Delay>
  return USBH_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	70fb      	strb	r3, [r7, #3]
 8009674:	4613      	mov	r3, r2
 8009676:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800967e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	212c      	movs	r1, #44	; 0x2c
 8009686:	fb01 f303 	mul.w	r3, r1, r3
 800968a:	4413      	add	r3, r2
 800968c:	333b      	adds	r3, #59	; 0x3b
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d009      	beq.n	80096a8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009694:	78fb      	ldrb	r3, [r7, #3]
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	212c      	movs	r1, #44	; 0x2c
 800969a:	fb01 f303 	mul.w	r3, r1, r3
 800969e:	4413      	add	r3, r2
 80096a0:	3354      	adds	r3, #84	; 0x54
 80096a2:	78ba      	ldrb	r2, [r7, #2]
 80096a4:	701a      	strb	r2, [r3, #0]
 80096a6:	e008      	b.n	80096ba <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80096a8:	78fb      	ldrb	r3, [r7, #3]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	212c      	movs	r1, #44	; 0x2c
 80096ae:	fb01 f303 	mul.w	r3, r1, r3
 80096b2:	4413      	add	r3, r2
 80096b4:	3355      	adds	r3, #85	; 0x55
 80096b6:	78ba      	ldrb	r2, [r7, #2]
 80096b8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7f7 ff87 	bl	80015e4 <HAL_Delay>
}
 80096d6:	bf00      	nop
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	4603      	mov	r3, r0
 80096e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096ee:	79fb      	ldrb	r3, [r7, #7]
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d817      	bhi.n	8009724 <USBH_Get_USB_Status+0x44>
 80096f4:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <USBH_Get_USB_Status+0x1c>)
 80096f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fa:	bf00      	nop
 80096fc:	0800970d 	.word	0x0800970d
 8009700:	08009713 	.word	0x08009713
 8009704:	08009719 	.word	0x08009719
 8009708:	0800971f 	.word	0x0800971f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	73fb      	strb	r3, [r7, #15]
    break;
 8009710:	e00b      	b.n	800972a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009712:	2302      	movs	r3, #2
 8009714:	73fb      	strb	r3, [r7, #15]
    break;
 8009716:	e008      	b.n	800972a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009718:	2301      	movs	r3, #1
 800971a:	73fb      	strb	r3, [r7, #15]
    break;
 800971c:	e005      	b.n	800972a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800971e:	2302      	movs	r3, #2
 8009720:	73fb      	strb	r3, [r7, #15]
    break;
 8009722:	e002      	b.n	800972a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009724:	2302      	movs	r3, #2
 8009726:	73fb      	strb	r3, [r7, #15]
    break;
 8009728:	bf00      	nop
  }
  return usb_status;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009742:	79fb      	ldrb	r3, [r7, #7]
 8009744:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009746:	79fb      	ldrb	r3, [r7, #7]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d102      	bne.n	8009752 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800974c:	2301      	movs	r3, #1
 800974e:	73fb      	strb	r3, [r7, #15]
 8009750:	e001      	b.n	8009756 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009752:	2300      	movs	r3, #0
 8009754:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009756:	7bfb      	ldrb	r3, [r7, #15]
 8009758:	461a      	mov	r2, r3
 800975a:	2101      	movs	r1, #1
 800975c:	4803      	ldr	r0, [pc, #12]	; (800976c <MX_DriverVbusFS+0x34>)
 800975e:	f7f8 fa2b 	bl	8001bb8 <HAL_GPIO_WritePin>
}
 8009762:	bf00      	nop
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	40020800 	.word	0x40020800

08009770 <__errno>:
 8009770:	4b01      	ldr	r3, [pc, #4]	; (8009778 <__errno+0x8>)
 8009772:	6818      	ldr	r0, [r3, #0]
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	20000030 	.word	0x20000030

0800977c <__libc_init_array>:
 800977c:	b570      	push	{r4, r5, r6, lr}
 800977e:	4d0d      	ldr	r5, [pc, #52]	; (80097b4 <__libc_init_array+0x38>)
 8009780:	4c0d      	ldr	r4, [pc, #52]	; (80097b8 <__libc_init_array+0x3c>)
 8009782:	1b64      	subs	r4, r4, r5
 8009784:	10a4      	asrs	r4, r4, #2
 8009786:	2600      	movs	r6, #0
 8009788:	42a6      	cmp	r6, r4
 800978a:	d109      	bne.n	80097a0 <__libc_init_array+0x24>
 800978c:	4d0b      	ldr	r5, [pc, #44]	; (80097bc <__libc_init_array+0x40>)
 800978e:	4c0c      	ldr	r4, [pc, #48]	; (80097c0 <__libc_init_array+0x44>)
 8009790:	f000 f8f8 	bl	8009984 <_init>
 8009794:	1b64      	subs	r4, r4, r5
 8009796:	10a4      	asrs	r4, r4, #2
 8009798:	2600      	movs	r6, #0
 800979a:	42a6      	cmp	r6, r4
 800979c:	d105      	bne.n	80097aa <__libc_init_array+0x2e>
 800979e:	bd70      	pop	{r4, r5, r6, pc}
 80097a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097a4:	4798      	blx	r3
 80097a6:	3601      	adds	r6, #1
 80097a8:	e7ee      	b.n	8009788 <__libc_init_array+0xc>
 80097aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ae:	4798      	blx	r3
 80097b0:	3601      	adds	r6, #1
 80097b2:	e7f2      	b.n	800979a <__libc_init_array+0x1e>
 80097b4:	080099c0 	.word	0x080099c0
 80097b8:	080099c0 	.word	0x080099c0
 80097bc:	080099c0 	.word	0x080099c0
 80097c0:	080099c4 	.word	0x080099c4

080097c4 <malloc>:
 80097c4:	4b02      	ldr	r3, [pc, #8]	; (80097d0 <malloc+0xc>)
 80097c6:	4601      	mov	r1, r0
 80097c8:	6818      	ldr	r0, [r3, #0]
 80097ca:	f000 b863 	b.w	8009894 <_malloc_r>
 80097ce:	bf00      	nop
 80097d0:	20000030 	.word	0x20000030

080097d4 <free>:
 80097d4:	4b02      	ldr	r3, [pc, #8]	; (80097e0 <free+0xc>)
 80097d6:	4601      	mov	r1, r0
 80097d8:	6818      	ldr	r0, [r3, #0]
 80097da:	f000 b80b 	b.w	80097f4 <_free_r>
 80097de:	bf00      	nop
 80097e0:	20000030 	.word	0x20000030

080097e4 <memset>:
 80097e4:	4402      	add	r2, r0
 80097e6:	4603      	mov	r3, r0
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d100      	bne.n	80097ee <memset+0xa>
 80097ec:	4770      	bx	lr
 80097ee:	f803 1b01 	strb.w	r1, [r3], #1
 80097f2:	e7f9      	b.n	80097e8 <memset+0x4>

080097f4 <_free_r>:
 80097f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097f6:	2900      	cmp	r1, #0
 80097f8:	d048      	beq.n	800988c <_free_r+0x98>
 80097fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097fe:	9001      	str	r0, [sp, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	f1a1 0404 	sub.w	r4, r1, #4
 8009806:	bfb8      	it	lt
 8009808:	18e4      	addlt	r4, r4, r3
 800980a:	f000 f8ad 	bl	8009968 <__malloc_lock>
 800980e:	4a20      	ldr	r2, [pc, #128]	; (8009890 <_free_r+0x9c>)
 8009810:	9801      	ldr	r0, [sp, #4]
 8009812:	6813      	ldr	r3, [r2, #0]
 8009814:	4615      	mov	r5, r2
 8009816:	b933      	cbnz	r3, 8009826 <_free_r+0x32>
 8009818:	6063      	str	r3, [r4, #4]
 800981a:	6014      	str	r4, [r2, #0]
 800981c:	b003      	add	sp, #12
 800981e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009822:	f000 b8a7 	b.w	8009974 <__malloc_unlock>
 8009826:	42a3      	cmp	r3, r4
 8009828:	d90b      	bls.n	8009842 <_free_r+0x4e>
 800982a:	6821      	ldr	r1, [r4, #0]
 800982c:	1862      	adds	r2, r4, r1
 800982e:	4293      	cmp	r3, r2
 8009830:	bf04      	itt	eq
 8009832:	681a      	ldreq	r2, [r3, #0]
 8009834:	685b      	ldreq	r3, [r3, #4]
 8009836:	6063      	str	r3, [r4, #4]
 8009838:	bf04      	itt	eq
 800983a:	1852      	addeq	r2, r2, r1
 800983c:	6022      	streq	r2, [r4, #0]
 800983e:	602c      	str	r4, [r5, #0]
 8009840:	e7ec      	b.n	800981c <_free_r+0x28>
 8009842:	461a      	mov	r2, r3
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	b10b      	cbz	r3, 800984c <_free_r+0x58>
 8009848:	42a3      	cmp	r3, r4
 800984a:	d9fa      	bls.n	8009842 <_free_r+0x4e>
 800984c:	6811      	ldr	r1, [r2, #0]
 800984e:	1855      	adds	r5, r2, r1
 8009850:	42a5      	cmp	r5, r4
 8009852:	d10b      	bne.n	800986c <_free_r+0x78>
 8009854:	6824      	ldr	r4, [r4, #0]
 8009856:	4421      	add	r1, r4
 8009858:	1854      	adds	r4, r2, r1
 800985a:	42a3      	cmp	r3, r4
 800985c:	6011      	str	r1, [r2, #0]
 800985e:	d1dd      	bne.n	800981c <_free_r+0x28>
 8009860:	681c      	ldr	r4, [r3, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	6053      	str	r3, [r2, #4]
 8009866:	4421      	add	r1, r4
 8009868:	6011      	str	r1, [r2, #0]
 800986a:	e7d7      	b.n	800981c <_free_r+0x28>
 800986c:	d902      	bls.n	8009874 <_free_r+0x80>
 800986e:	230c      	movs	r3, #12
 8009870:	6003      	str	r3, [r0, #0]
 8009872:	e7d3      	b.n	800981c <_free_r+0x28>
 8009874:	6825      	ldr	r5, [r4, #0]
 8009876:	1961      	adds	r1, r4, r5
 8009878:	428b      	cmp	r3, r1
 800987a:	bf04      	itt	eq
 800987c:	6819      	ldreq	r1, [r3, #0]
 800987e:	685b      	ldreq	r3, [r3, #4]
 8009880:	6063      	str	r3, [r4, #4]
 8009882:	bf04      	itt	eq
 8009884:	1949      	addeq	r1, r1, r5
 8009886:	6021      	streq	r1, [r4, #0]
 8009888:	6054      	str	r4, [r2, #4]
 800988a:	e7c7      	b.n	800981c <_free_r+0x28>
 800988c:	b003      	add	sp, #12
 800988e:	bd30      	pop	{r4, r5, pc}
 8009890:	200000c4 	.word	0x200000c4

08009894 <_malloc_r>:
 8009894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009896:	1ccd      	adds	r5, r1, #3
 8009898:	f025 0503 	bic.w	r5, r5, #3
 800989c:	3508      	adds	r5, #8
 800989e:	2d0c      	cmp	r5, #12
 80098a0:	bf38      	it	cc
 80098a2:	250c      	movcc	r5, #12
 80098a4:	2d00      	cmp	r5, #0
 80098a6:	4606      	mov	r6, r0
 80098a8:	db01      	blt.n	80098ae <_malloc_r+0x1a>
 80098aa:	42a9      	cmp	r1, r5
 80098ac:	d903      	bls.n	80098b6 <_malloc_r+0x22>
 80098ae:	230c      	movs	r3, #12
 80098b0:	6033      	str	r3, [r6, #0]
 80098b2:	2000      	movs	r0, #0
 80098b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098b6:	f000 f857 	bl	8009968 <__malloc_lock>
 80098ba:	4921      	ldr	r1, [pc, #132]	; (8009940 <_malloc_r+0xac>)
 80098bc:	680a      	ldr	r2, [r1, #0]
 80098be:	4614      	mov	r4, r2
 80098c0:	b99c      	cbnz	r4, 80098ea <_malloc_r+0x56>
 80098c2:	4f20      	ldr	r7, [pc, #128]	; (8009944 <_malloc_r+0xb0>)
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	b923      	cbnz	r3, 80098d2 <_malloc_r+0x3e>
 80098c8:	4621      	mov	r1, r4
 80098ca:	4630      	mov	r0, r6
 80098cc:	f000 f83c 	bl	8009948 <_sbrk_r>
 80098d0:	6038      	str	r0, [r7, #0]
 80098d2:	4629      	mov	r1, r5
 80098d4:	4630      	mov	r0, r6
 80098d6:	f000 f837 	bl	8009948 <_sbrk_r>
 80098da:	1c43      	adds	r3, r0, #1
 80098dc:	d123      	bne.n	8009926 <_malloc_r+0x92>
 80098de:	230c      	movs	r3, #12
 80098e0:	6033      	str	r3, [r6, #0]
 80098e2:	4630      	mov	r0, r6
 80098e4:	f000 f846 	bl	8009974 <__malloc_unlock>
 80098e8:	e7e3      	b.n	80098b2 <_malloc_r+0x1e>
 80098ea:	6823      	ldr	r3, [r4, #0]
 80098ec:	1b5b      	subs	r3, r3, r5
 80098ee:	d417      	bmi.n	8009920 <_malloc_r+0x8c>
 80098f0:	2b0b      	cmp	r3, #11
 80098f2:	d903      	bls.n	80098fc <_malloc_r+0x68>
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	441c      	add	r4, r3
 80098f8:	6025      	str	r5, [r4, #0]
 80098fa:	e004      	b.n	8009906 <_malloc_r+0x72>
 80098fc:	6863      	ldr	r3, [r4, #4]
 80098fe:	42a2      	cmp	r2, r4
 8009900:	bf0c      	ite	eq
 8009902:	600b      	streq	r3, [r1, #0]
 8009904:	6053      	strne	r3, [r2, #4]
 8009906:	4630      	mov	r0, r6
 8009908:	f000 f834 	bl	8009974 <__malloc_unlock>
 800990c:	f104 000b 	add.w	r0, r4, #11
 8009910:	1d23      	adds	r3, r4, #4
 8009912:	f020 0007 	bic.w	r0, r0, #7
 8009916:	1ac2      	subs	r2, r0, r3
 8009918:	d0cc      	beq.n	80098b4 <_malloc_r+0x20>
 800991a:	1a1b      	subs	r3, r3, r0
 800991c:	50a3      	str	r3, [r4, r2]
 800991e:	e7c9      	b.n	80098b4 <_malloc_r+0x20>
 8009920:	4622      	mov	r2, r4
 8009922:	6864      	ldr	r4, [r4, #4]
 8009924:	e7cc      	b.n	80098c0 <_malloc_r+0x2c>
 8009926:	1cc4      	adds	r4, r0, #3
 8009928:	f024 0403 	bic.w	r4, r4, #3
 800992c:	42a0      	cmp	r0, r4
 800992e:	d0e3      	beq.n	80098f8 <_malloc_r+0x64>
 8009930:	1a21      	subs	r1, r4, r0
 8009932:	4630      	mov	r0, r6
 8009934:	f000 f808 	bl	8009948 <_sbrk_r>
 8009938:	3001      	adds	r0, #1
 800993a:	d1dd      	bne.n	80098f8 <_malloc_r+0x64>
 800993c:	e7cf      	b.n	80098de <_malloc_r+0x4a>
 800993e:	bf00      	nop
 8009940:	200000c4 	.word	0x200000c4
 8009944:	200000c8 	.word	0x200000c8

08009948 <_sbrk_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d06      	ldr	r5, [pc, #24]	; (8009964 <_sbrk_r+0x1c>)
 800994c:	2300      	movs	r3, #0
 800994e:	4604      	mov	r4, r0
 8009950:	4608      	mov	r0, r1
 8009952:	602b      	str	r3, [r5, #0]
 8009954:	f7f7 fd62 	bl	800141c <_sbrk>
 8009958:	1c43      	adds	r3, r0, #1
 800995a:	d102      	bne.n	8009962 <_sbrk_r+0x1a>
 800995c:	682b      	ldr	r3, [r5, #0]
 800995e:	b103      	cbz	r3, 8009962 <_sbrk_r+0x1a>
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	bd38      	pop	{r3, r4, r5, pc}
 8009964:	200008e8 	.word	0x200008e8

08009968 <__malloc_lock>:
 8009968:	4801      	ldr	r0, [pc, #4]	; (8009970 <__malloc_lock+0x8>)
 800996a:	f000 b809 	b.w	8009980 <__retarget_lock_acquire_recursive>
 800996e:	bf00      	nop
 8009970:	200008f0 	.word	0x200008f0

08009974 <__malloc_unlock>:
 8009974:	4801      	ldr	r0, [pc, #4]	; (800997c <__malloc_unlock+0x8>)
 8009976:	f000 b804 	b.w	8009982 <__retarget_lock_release_recursive>
 800997a:	bf00      	nop
 800997c:	200008f0 	.word	0x200008f0

08009980 <__retarget_lock_acquire_recursive>:
 8009980:	4770      	bx	lr

08009982 <__retarget_lock_release_recursive>:
 8009982:	4770      	bx	lr

08009984 <_init>:
 8009984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009986:	bf00      	nop
 8009988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998a:	bc08      	pop	{r3}
 800998c:	469e      	mov	lr, r3
 800998e:	4770      	bx	lr

08009990 <_fini>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	bf00      	nop
 8009994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009996:	bc08      	pop	{r3}
 8009998:	469e      	mov	lr, r3
 800999a:	4770      	bx	lr
